<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head><list id="03-1580225579177" type="ordered"/><list id="15-1580225579512" type="unordered"/></head><body><para><coId>22-1580225579043</coId><text>P01:React Hooks介绍和环境搭建</text><inline-styles><bold><from>0</from><to>22</to><value>true</value></bold><font-size><from>0</from><to>22</to><value>20</value></font-size><color><from>0</from><to>22</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>00-1580225579046</coId><text/><inline-styles/><styles><font-size>16</font-size></styles></para><para><coId>19-1580225579055</coId><text>React Hooks 简介</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><font-size><from>0</from><to>14</to><value>20</value></font-size><color><from>0</from><to>14</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>68-1580225579056</coId><text>2018年底FaceBook的React小组推出Hooks以来，所有的React的开发者都对它大为赞赏。React Hooks就是用函数的形式代替原来的继承类的形式，并且使用预函数的形式管理state，有Hooks可以不再使用类的形式定义组件了。这时候你的认知也要发生变化了，原来把组件分为有状态组件和无状态组件，有状态组件用类的形式声明，无状态组件用函数的形式声明。那现在所有的组件都可以用函数来声明了。</text><inline-styles><font-family><from>52</from><to>63</to><value>monospace</value></font-family><font-family><from>95</from><to>100</to><value>monospace</value></font-family><font-size><from>0</from><to>52</to><value>16</value></font-size><font-size><from>52</from><to>63</to><value>13</value></font-size><font-size><from>63</from><to>95</to><value>16</value></font-size><font-size><from>95</from><to>100</to><value>13</value></font-size><font-size><from>100</from><to>203</to><value>16</value></font-size><color><from>0</from><to>52</to><value>#777777</value></color><color><from>52</from><to>63</to><value>#ff502c</value></color><color><from>63</from><to>95</to><value>#777777</value></color><color><from>95</from><to>100</to><value>#ff502c</value></color><color><from>100</from><to>203</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>74-1580225579061</coId><text>我们这里先不说Hooks有什么好处，就算说了，你也不可能完全理解，好像我王婆卖瓜自卖自夸一样，所以先学习，学过几节课后，我们再来总结React Hooks的好处。</text><inline-styles><font-family><from>66</from><to>77</to><value>monospace</value></font-family><font-size><from>0</from><to>66</to><value>16</value></font-size><font-size><from>66</from><to>77</to><value>13</value></font-size><font-size><from>77</from><to>81</to><value>16</value></font-size><color><from>0</from><to>66</to><value>#777777</value></color><color><from>66</from><to>77</to><value>#ff502c</value></color><color><from>77</from><to>81</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>32-1580225579063</coId><text>使用create-react-app创建项目</text><inline-styles><bold><from>0</from><to>22</to><value>true</value></bold><font-family><from>2</from><to>18</to><value>monospace</value></font-family><font-size><from>0</from><to>22</to><value>18</value></font-size><color><from>0</from><to>2</to><value>#777777</value></color><color><from>2</from><to>18</to><value>#ff502c</value></color><color><from>18</from><to>22</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>55-1580225579065</coId><text>这里我在D盘新建一个ReactHooksDemo的文件夹，然后在文件夹中用create-react-app创建一个demo01的项目。我们这些动作全部在命令提示符（我习惯叫终端）中进行。</text><inline-styles><font-family><from>10</from><to>24</to><value>monospace</value></font-family><font-family><from>37</from><to>53</to><value>monospace</value></font-family><font-size><from>0</from><to>10</to><value>16</value></font-size><font-size><from>10</from><to>24</to><value>13</value></font-size><font-size><from>24</from><to>37</to><value>16</value></font-size><font-size><from>37</from><to>53</to><value>13</value></font-size><font-size><from>53</from><to>93</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#777777</value></color><color><from>10</from><to>24</to><value>#ff502c</value></color><color><from>24</from><to>37</to><value>#777777</value></color><color><from>37</from><to>53</to><value>#ff502c</value></color><color><from>53</from><to>93</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>4075-1580316448089</coId><text>D: // 进入D盘
mkdir ReactHooksDemo
cd ReactHooksDemo
create-react-app demo01
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>60-1580225579069</coId><text>只留/src/index.js文件，然后把里边的代码删减成下面的样子:</text><inline-styles><font-family><from>2</from><to>15</to><value>monospace</value></font-family><font-size><from>0</from><to>2</to><value>16</value></font-size><font-size><from>2</from><to>15</to><value>13</value></font-size><font-size><from>15</from><to>35</to><value>16</value></font-size><color><from>0</from><to>2</to><value>#777777</value></color><color><from>2</from><to>15</to><value>#ff502c</value></color><color><from>15</from><to>35</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8574-1580316482028</coId><text>import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>72-1580225579075</coId><text>这样就算开发环境搭建完成了，接下来我们对比一下原始的写法和现在有了React Hooks的写法。</text><inline-styles><font-size><from>0</from><to>48</to><value>16</value></font-size><color><from>0</from><to>48</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>18-1580225579075</coId><text>React Hooks 编写形式对比</text><inline-styles><bold><from>0</from><to>18</to><value>true</value></bold><font-size><from>0</from><to>18</to><value>20</value></font-size><color><from>0</from><to>18</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>76-1580225579076</coId><text>先来写一个最简单的有状体组件，点我们点击按钮时，点击数量不断增加。</text><inline-styles><font-size><from>0</from><to>33</to><value>16</value></font-size><color><from>0</from><to>33</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>47-1580225579077</coId><text>原始写法:</text><inline-styles><font-size><from>0</from><to>5</to><value>16</value></font-size><color><from>0</from><to>5</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8921-1580316519918</coId><text>import React, { Component } from 'react';

class Example extends Component {
    constructor(props) {
        super(props);
        this.state = { count:0 }
    }
    render() { 
        return (
            &lt;div&gt;
                &lt;p&gt;You clicked {this.state.count} times&lt;/p&gt;
                &lt;button onClick={this.addCount.bind(this)}&gt;Chlick me&lt;/button&gt;
            &lt;/div&gt;
        );
    }
    addCount(){
        this.setState({count:this.state.count+1})
    }
}

export default Example;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>39-1580225579086</coId><text>React Hooks 写法：</text><inline-styles><font-size><from>0</from><to>15</to><value>16</value></font-size><color><from>0</from><to>15</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1320-1580316574385</coId><text>import React, { useState } from 'react';
function Example(){
    const [ count , setCount ] = useState(0);
    return (
        &lt;div&gt;
            &lt;p&gt;You clicked {count} times&lt;/p&gt;
            &lt;button onClick={()=&gt;{setCount(count+1)}}&gt;click me&lt;/button&gt;
        &lt;/div&gt;
    )
}
export default Example;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>61-1580225579095</coId><text>从这两个程序的对比上可以看出Hooks本质上就是一类特殊的函数，他们可以为你的函数型组件（function component）注入一些特殊的功能。这听起来有点像以前React中的Mixins差不多哦。其实是由很多不同，hooks的目的就是让你不再写class，让function一统江湖。</text><inline-styles><font-family><from>90</from><to>96</to><value>monospace</value></font-family><font-family><from>125</from><to>130</to><value>monospace</value></font-family><font-family><from>132</from><to>140</to><value>monospace</value></font-family><font-size><from>0</from><to>90</to><value>16</value></font-size><font-size><from>90</from><to>96</to><value>13</value></font-size><font-size><from>96</from><to>125</to><value>16</value></font-size><font-size><from>125</from><to>130</to><value>13</value></font-size><font-size><from>130</from><to>132</to><value>16</value></font-size><font-size><from>132</from><to>140</to><value>13</value></font-size><font-size><from>140</from><to>145</to><value>16</value></font-size><color><from>0</from><to>90</to><value>#777777</value></color><color><from>90</from><to>96</to><value>#ff502c</value></color><color><from>96</from><to>125</to><value>#777777</value></color><color><from>125</from><to>130</to><value>#ff502c</value></color><color><from>130</from><to>132</to><value>#777777</value></color><color><from>132</from><to>140</to><value>#ff502c</value></color><color><from>140</from><to>145</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>90-1580225579097</coId><text>P02:useState 的介绍和多状态声明</text><inline-styles><bold><from>0</from><to>22</to><value>true</value></bold><font-size><from>0</from><to>22</to><value>20</value></font-size><color><from>0</from><to>22</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>77-1580225579099</coId><text>useState的介绍</text><inline-styles><bold><from>0</from><to>11</to><value>true</value></bold><font-size><from>0</from><to>11</to><value>20</value></font-size><color><from>0</from><to>11</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>39-1580225579100</coId><text>useState是react自带的一个hook函数，它的作用是用来声明状态变量。</text><inline-styles><font-family><from>0</from><to>8</to><value>monospace</value></font-family><font-size><from>0</from><to>8</to><value>13</value></font-size><font-size><from>8</from><to>40</to><value>16</value></font-size><color><from>0</from><to>8</to><value>#ff502c</value></color><color><from>8</from><to>40</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>31-1580225579101</coId><text>那我们从三个方面来看useState的用法，分别是声明、读取、使用（修改）。这三个方面掌握了，你基本也就会使用useState了.</text><inline-styles><font-family><from>10</from><to>18</to><value>monospace</value></font-family><font-family><from>55</from><to>63</to><value>monospace</value></font-family><font-size><from>0</from><to>10</to><value>16</value></font-size><font-size><from>10</from><to>18</to><value>13</value></font-size><font-size><from>18</from><to>55</to><value>16</value></font-size><font-size><from>55</from><to>63</to><value>13</value></font-size><font-size><from>63</from><to>65</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#777777</value></color><color><from>10</from><to>18</to><value>#ff502c</value></color><color><from>18</from><to>55</to><value>#777777</value></color><color><from>55</from><to>63</to><value>#ff502c</value></color><color><from>63</from><to>65</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>78-1580225579102</coId><text>先来看一下声明的方式，上节课的代码如下：</text><inline-styles><font-size><from>0</from><to>20</to><value>16</value></font-size><color><from>0</from><to>20</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8036-1580316613674</coId><text>const [ count , setCount ] = useState(0);
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>58-1580225579103</coId><text>这种方法是ES6语法中的数组解构，这样看起来代码变的简单易懂。现在ES6的语法已经在工作中频繁使用，所以如果你对ES6的语法还不熟悉，我觉的有必要拿出2天时间学习一下。如果不写成数组解构，上边的语法要写成下面的三行:</text><inline-styles><font-size><from>0</from><to>108</to><value>16</value></font-size><color><from>0</from><to>108</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>7570-1580316659061</coId><text>let _useState = userState(0)
let count = _useState[0]
let setCount = _useState[1]
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>43-1580225579107</coId><text>useState这个函数接收的参数是状态的初始值(Initial state)，它返回一个数组，这个数组的第0位是当前的状态值，第1位是可以改变状态值的方法函数。所以上面的代码的意思就是声明了一个状态变量为count，并把它的初始值设为0，同时提供了一个可以改变count的状态值的方法函数。</text><inline-styles><font-family><from>0</from><to>8</to><value>monospace</value></font-family><font-family><from>131</from><to>136</to><value>monospace</value></font-family><font-size><from>0</from><to>8</to><value>13</value></font-size><font-size><from>8</from><to>131</to><value>16</value></font-size><font-size><from>131</from><to>136</to><value>13</value></font-size><font-size><from>136</from><to>146</to><value>16</value></font-size><color><from>0</from><to>8</to><value>#ff502c</value></color><color><from>8</from><to>131</to><value>#777777</value></color><color><from>131</from><to>136</to><value>#ff502c</value></color><color><from>136</from><to>146</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>87-1580225579109</coId><text>这时候你已经会声明一个状态了，接下来我们看看如何读取状态中的值。</text><inline-styles><font-size><from>0</from><to>32</to><value>16</value></font-size><color><from>0</from><to>32</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>7194-1580316693457</coId><text>&lt;p&gt;You clicked {count} times&lt;/p&gt;
</text><inline-styles/><styles/><language>html</language><theme>default</theme></code><para><coId>91-1580225579111</coId><text>你可以发现，我们读取是很简单的。只要使用{count}就可以，因为这时候的count就是JS里的一个变量，想在JSX中使用，值用加上{}就可以。</text><inline-styles><font-family><from>20</from><to>27</to><value>monospace</value></font-family><font-family><from>55</from><to>58</to><value>monospace</value></font-family><font-family><from>66</from><to>68</to><value>monospace</value></font-family><font-size><from>0</from><to>20</to><value>16</value></font-size><font-size><from>20</from><to>27</to><value>13</value></font-size><font-size><from>27</from><to>55</to><value>16</value></font-size><font-size><from>55</from><to>58</to><value>13</value></font-size><font-size><from>58</from><to>66</to><value>16</value></font-size><font-size><from>66</from><to>68</to><value>13</value></font-size><font-size><from>68</from><to>72</to><value>16</value></font-size><color><from>0</from><to>20</to><value>#777777</value></color><color><from>20</from><to>27</to><value>#ff502c</value></color><color><from>27</from><to>55</to><value>#777777</value></color><color><from>55</from><to>58</to><value>#ff502c</value></color><color><from>58</from><to>66</to><value>#777777</value></color><color><from>66</from><to>68</to><value>#ff502c</value></color><color><from>68</from><to>72</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>56-1580225579112</coId><text>最后看看如果改变State中的值,看下面的代码:</text><inline-styles><font-family><from>8</from><to>13</to><value>monospace</value></font-family><font-size><from>0</from><to>8</to><value>16</value></font-size><font-size><from>8</from><to>13</to><value>13</value></font-size><font-size><from>13</from><to>24</to><value>16</value></font-size><color><from>0</from><to>8</to><value>#777777</value></color><color><from>8</from><to>13</to><value>#ff502c</value></color><color><from>13</from><to>24</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>4284-1580317014347</coId><text>&lt;buttononClick={()=&gt;{setCount(count+1)}}&gt;click mebutton&gt;
</text><inline-styles><font-family><from>0</from><to>56</to><value>monospace</value></font-family><font-size><from>0</from><to>56</to><value>13</value></font-size><color><from>0</from><to>1</to><value>#f8f8f2</value></color><color><from>1</from><to>14</to><value>#f92672</value></color><color><from>14</from><to>15</to><value>#f8f8f2</value></color><color><from>15</from><to>18</to><value>#e6db74</value></color><color><from>18</from><to>20</to><value>#f8f8f2</value></color><color><from>20</from><to>49</to><value>#cccccc</value></color><color><from>49</from><to>55</to><value>#f92672</value></color><color><from>55</from><to>56</to><value>#f8f8f2</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>99-1580225579114</coId><text>直接调用setCount函数，这个函数接收的参数是修改过的新状态值。接下来的事情就交给React,他会重新渲染组件。React自动帮助我们记忆了组件的上一次状态值，但是这种记忆也给我们带来了一点小麻烦，但是这种麻烦你可以看成规则，只要准守规则，就可以愉快的进行编码。</text><inline-styles><font-family><from>43</from><to>48</to><value>monospace</value></font-family><font-family><from>58</from><to>63</to><value>monospace</value></font-family><font-size><from>0</from><to>43</to><value>16</value></font-size><font-size><from>43</from><to>48</to><value>13</value></font-size><font-size><from>48</from><to>58</to><value>16</value></font-size><font-size><from>58</from><to>63</to><value>13</value></font-size><font-size><from>63</from><to>133</to><value>16</value></font-size><color><from>0</from><to>43</to><value>#777777</value></color><color><from>43</from><to>48</to><value>#ff502c</value></color><color><from>48</from><to>58</to><value>#777777</value></color><color><from>58</from><to>63</to><value>#ff502c</value></color><color><from>63</from><to>133</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>87-1580225579116</coId><text>多状态声明的注意事项</text><inline-styles><bold><from>0</from><to>10</to><value>true</value></bold><font-size><from>0</from><to>10</to><value>20</value></font-size><color><from>0</from><to>10</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>14-1580225579117</coId><text>比如现在我们要声明多个状态，有年龄（age）、性别(sex)和工作(work)。代码可以这么写.</text><inline-styles><font-size><from>0</from><to>48</to><value>16</value></font-size><color><from>0</from><to>48</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1079-1580317065264</coId><text>import React, { useState } from 'react';
function Example2(){
    const [ age , setAge ] = useState(18)
    const [ sex , setSex ] = useState('男')
    const [ work , setWork ] = useState('前端程序员')
    return (
        &lt;div&gt;
            &lt;p&gt;JSPang 今年:{age}岁&lt;/p&gt;
            &lt;p&gt;性别:{sex}&lt;/p&gt;
            &lt;p&gt;工作是:{work}&lt;/p&gt;

        &lt;/div&gt;
    )
}
export default Example2;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>89-1580225579126</coId><text>其实细心的小伙伴一定可以发现，在使用useState的时候只赋了初始值，并没有绑定任何的key,那React是怎么保证这三个useState找到它自己对应的state呢？</text><inline-styles><font-family><from>18</from><to>26</to><value>monospace</value></font-family><font-family><from>44</from><to>47</to><value>monospace</value></font-family><font-size><from>0</from><to>18</to><value>16</value></font-size><font-size><from>18</from><to>26</to><value>13</value></font-size><font-size><from>26</from><to>44</to><value>16</value></font-size><font-size><from>44</from><to>47</to><value>13</value></font-size><font-size><from>47</from><to>85</to><value>16</value></font-size><color><from>0</from><to>18</to><value>#777777</value></color><color><from>18</from><to>26</to><value>#ff502c</value></color><color><from>26</from><to>44</to><value>#777777</value></color><color><from>44</from><to>47</to><value>#ff502c</value></color><color><from>47</from><to>85</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>44-1580225579127</coId><text>答案是：React是根据useState出现的顺序来确定的</text><inline-styles><bold><from>0</from><to>29</to><value>true</value></bold><font-size><from>0</from><to>29</to><value>16</value></font-size><color><from>0</from><to>29</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>62-1580225579127</coId><text>比如我们把代码改成下面的样子：</text><inline-styles><font-size><from>0</from><to>15</to><value>16</value></font-size><color><from>0</from><to>15</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>6834-1580317147482</coId><text>import React, { useState } from 'react';

let showSex = true
function Example2(){
    const [ age , setAge ] = useState(18)
    if(showSex){
        const [ sex , setSex ] = useState('男')
        showSex=false
    }

    const [ work , setWork ] = useState('前端程序员')
    return (
        &lt;div&gt;
            &lt;p&gt;JSPang 今年:{age}岁&lt;/p&gt;
            &lt;p&gt;性别:{sex}&lt;/p&gt;
            &lt;p&gt;工作是:{work}&lt;/p&gt;

        &lt;/div&gt;
    )
}
export default Example2;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>00-1580225579137</coId><text>这时候控制台就会直接给我们报错，错误如下：</text><inline-styles><font-size><from>0</from><to>21</to><value>16</value></font-size><color><from>0</from><to>21</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>2760-1580317156283</coId><text>React Hook "useState" is called conditionally. React Hooks must be called in the exact same order in every component render 
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>14-1580225579141</coId><text>意思就是useState不能在if...else...这样的条件语句中进行调用，必须要按照相同的顺序进行渲染。如果你还是不理解，你可以记住这样一句话就可以了：就是React Hooks不能出现在条件判断语句中，因为它必须有完全一样的渲染顺序。</text><inline-styles><bold><from>79</from><to>120</to><value>true</value></bold><font-family><from>15</from><to>27</to><value>monospace</value></font-family><font-size><from>0</from><to>15</to><value>16</value></font-size><font-size><from>15</from><to>27</to><value>13</value></font-size><font-size><from>27</from><to>121</to><value>16</value></font-size><color><from>0</from><to>15</to><value>#777777</value></color><color><from>15</from><to>27</to><value>#ff502c</value></color><color><from>27</from><to>121</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>31-1580225579143</coId><text>P03:useEffect代替常用生命周期函数</text><inline-styles><bold><from>0</from><to>23</to><value>true</value></bold><font-size><from>0</from><to>23</to><value>20</value></font-size><color><from>0</from><to>23</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>42-1580225579145</coId><text>在用Class制作组件时，经常会用生命周期函数，来处理一些额外的事情（副作用：和函数业务主逻辑关联不大，特定时间或事件中执行的动作，比如Ajax请求后端数据，添加登录监听和取消登录，手动修改DOM等等）。在React Hooks中也需要这样类似的生命周期函数，比如在每次状态（State）更新时执行，它为我们准备了useEffect。从这节课开始来认识一下这个useEffect函数。</text><inline-styles><font-family><from>2</from><to>7</to><value>monospace</value></font-family><font-family><from>95</from><to>98</to><value>monospace</value></font-family><font-family><from>103</from><to>114</to><value>monospace</value></font-family><font-family><from>157</from><to>166</to><value>monospace</value></font-family><font-family><from>180</from><to>189</to><value>monospace</value></font-family><font-size><from>0</from><to>2</to><value>16</value></font-size><font-size><from>2</from><to>7</to><value>13</value></font-size><font-size><from>7</from><to>95</to><value>16</value></font-size><font-size><from>95</from><to>98</to><value>13</value></font-size><font-size><from>98</from><to>103</to><value>16</value></font-size><font-size><from>103</from><to>114</to><value>13</value></font-size><font-size><from>114</from><to>157</to><value>16</value></font-size><font-size><from>157</from><to>166</to><value>13</value></font-size><font-size><from>166</from><to>180</to><value>16</value></font-size><font-size><from>180</from><to>189</to><value>13</value></font-size><font-size><from>189</from><to>192</to><value>16</value></font-size><color><from>0</from><to>2</to><value>#777777</value></color><color><from>2</from><to>7</to><value>#ff502c</value></color><color><from>7</from><to>95</to><value>#777777</value></color><color><from>95</from><to>98</to><value>#ff502c</value></color><color><from>98</from><to>103</to><value>#777777</value></color><color><from>103</from><to>114</to><value>#ff502c</value></color><color><from>114</from><to>157</to><value>#777777</value></color><color><from>157</from><to>166</to><value>#ff502c</value></color><color><from>166</from><to>180</to><value>#777777</value></color><color><from>180</from><to>189</to><value>#ff502c</value></color><color><from>189</from><to>192</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>79-1580225579147</coId><text>用Class的方式为计数器增加生命周期函数</text><inline-styles><bold><from>0</from><to>21</to><value>true</value></bold><font-family><from>1</from><to>6</to><value>monospace</value></font-family><font-size><from>0</from><to>1</to><value>20</value></font-size><font-size><from>1</from><to>6</to><value>13</value></font-size><font-size><from>6</from><to>21</to><value>20</value></font-size><color><from>0</from><to>1</to><value>#666666</value></color><color><from>1</from><to>6</to><value>#ff502c</value></color><color><from>6</from><to>21</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>13-1580225579148</coId><text>为了让你更好的理解useEffect的使用，先用原始的方式把计数器的Demo增加两个生命周期函数componentDidMount和componentDidUpdate。分别在组件第一次渲染后在浏览器控制台打印出计数器结果和在每次计数器状态发生变化后打印出结果。代码如下：</text><inline-styles><font-family><from>9</from><to>18</to><value>monospace</value></font-family><font-family><from>48</from><to>65</to><value>monospace</value></font-family><font-family><from>66</from><to>84</to><value>monospace</value></font-family><font-size><from>0</from><to>9</to><value>16</value></font-size><font-size><from>9</from><to>18</to><value>13</value></font-size><font-size><from>18</from><to>48</to><value>16</value></font-size><font-size><from>48</from><to>65</to><value>13</value></font-size><font-size><from>65</from><to>66</to><value>16</value></font-size><font-size><from>66</from><to>84</to><value>13</value></font-size><font-size><from>84</from><to>136</to><value>16</value></font-size><color><from>0</from><to>9</to><value>#777777</value></color><color><from>9</from><to>18</to><value>#ff502c</value></color><color><from>18</from><to>48</to><value>#777777</value></color><color><from>48</from><to>65</to><value>#ff502c</value></color><color><from>65</from><to>66</to><value>#777777</value></color><color><from>66</from><to>84</to><value>#ff502c</value></color><color><from>84</from><to>136</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>7022-1580377257913</coId><text>import React, { Component } from 'react';

class Example3 extends Component {
    constructor(props) {
        super(props);
        this.state = { count:0 }
    }


    componentDidMount(){
        console.log(`ComponentDidMount=&gt;You clicked ${this.state.count} times`)
    }
    componentDidUpdate(){
        console.log(`componentDidUpdate=&gt;You clicked ${this.state.count} times`)
    }

    render() { 
        return (
            &lt;div&gt;
                &lt;p&gt;You clicked {this.state.count} times&lt;/p&gt;
                &lt;button onClick={this.addCount.bind(this)}&gt;Chlick me&lt;/button&gt;
            &lt;/div&gt;
        );
    }
    addCount(){
        this.setState({count:this.state.count+1})
    }
}

export default Example3;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>65-1580225579158</coId><text>这就是在不使用Hooks情况下的写法，那如何用Hooks来代替这段代码，并产生一样的效果那。</text><inline-styles><font-size><from>0</from><to>46</to><value>16</value></font-size><color><from>0</from><to>46</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>55-1580225579160</coId><text>用useEffect函数来代替生命周期函数</text><inline-styles><bold><from>0</from><to>21</to><value>true</value></bold><font-family><from>1</from><to>10</to><value>monospace</value></font-family><font-size><from>0</from><to>1</to><value>20</value></font-size><font-size><from>1</from><to>10</to><value>13</value></font-size><font-size><from>10</from><to>21</to><value>20</value></font-size><color><from>0</from><to>1</to><value>#666666</value></color><color><from>1</from><to>10</to><value>#ff502c</value></color><color><from>10</from><to>21</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>30-1580225579160</coId><text>在使用React Hooks的情况下，我们可以使用下面的代码来完成上边代码的生命周期效果，代码如下（修改了以前的diamond）：记得要先引入useEffect后，才可以正常使用。</text><inline-styles><font-family><from>3</from><to>14</to><value>monospace</value></font-family><font-family><from>71</from><to>80</to><value>monospace</value></font-family><font-size><from>0</from><to>3</to><value>16</value></font-size><font-size><from>3</from><to>14</to><value>13</value></font-size><font-size><from>14</from><to>71</to><value>16</value></font-size><font-size><from>71</from><to>80</to><value>13</value></font-size><font-size><from>80</from><to>90</to><value>16</value></font-size><color><from>0</from><to>3</to><value>#777777</value></color><color><from>3</from><to>14</to><value>#ff502c</value></color><color><from>14</from><to>71</to><value>#777777</value></color><color><from>71</from><to>80</to><value>#ff502c</value></color><color><from>80</from><to>90</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5087-1580377288492</coId><text>import React, { useState , useEffect } from 'react';
function Example(){
    const [ count , setCount ] = useState(0);
    //---关键代码---------start-------
    useEffect(()=&gt;{
        console.log(`useEffect=&gt;You clicked ${count} times`)
    })
    //---关键代码---------end-------

    return (
        &lt;div&gt;
            &lt;p&gt;You clicked {count} times&lt;/p&gt;
            &lt;button onClick={()=&gt;{setCount(count+1)}}&gt;click me&lt;/button&gt;
        &lt;/div&gt;
    )
}
export default Example;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>78-1580225579173</coId><text>写完后，可以到浏览器中进行预览一下，可以看出跟class形式的生命周期函数是完全一样的，这代表第一次组件渲染和每次组件更新都会执行这个函数。那这段代码逻辑是什么？我们梳理一下:首先，我们生命了一个状态变量count,将它的初始值设为0，然后我们告诉react，我们的这个组件有一个副作用。给useEffecthook传了一个匿名函数，这个匿名函数就是我们的副作用。在这里我们打印了一句话，当然你也可以手动的去修改一个DOM元素。当React要渲染组件时，它会记住用到的副作用，然后执行一次。等Reat更新了State状态时，它再一词执行定义的副作用函数。</text><inline-styles><font-family><from>23</from><to>28</to><value>monospace</value></font-family><font-family><from>102</from><to>107</to><value>monospace</value></font-family><font-family><from>145</from><to>158</to><value>monospace</value></font-family><font-family><from>208</from><to>211</to><value>monospace</value></font-family><font-size><from>0</from><to>23</to><value>16</value></font-size><font-size><from>23</from><to>28</to><value>13</value></font-size><font-size><from>28</from><to>102</to><value>16</value></font-size><font-size><from>102</from><to>107</to><value>13</value></font-size><font-size><from>107</from><to>145</to><value>16</value></font-size><font-size><from>145</from><to>158</to><value>13</value></font-size><font-size><from>158</from><to>208</to><value>16</value></font-size><font-size><from>208</from><to>211</to><value>13</value></font-size><font-size><from>211</from><to>277</to><value>16</value></font-size><color><from>0</from><to>23</to><value>#777777</value></color><color><from>23</from><to>28</to><value>#ff502c</value></color><color><from>28</from><to>102</to><value>#777777</value></color><color><from>102</from><to>107</to><value>#ff502c</value></color><color><from>107</from><to>145</to><value>#777777</value></color><color><from>145</from><to>158</to><value>#ff502c</value></color><color><from>158</from><to>208</to><value>#777777</value></color><color><from>208</from><to>211</to><value>#ff502c</value></color><color><from>211</from><to>277</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>23-1580225579176</coId><text>useEffect两个注意点</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><font-size><from>0</from><to>14</to><value>20</value></font-size><color><from>0</from><to>14</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><list-item level="1" list-id="03-1580225579177"><coId>47-1580225579179</coId><text>React首次渲染和之后的每次渲染都会调用一遍useEffect函数，而之前我们要用两个生命周期函数分别表示首次渲染(componentDidMonut)和更新导致的重新渲染(componentDidUpdate)。</text><inline-styles><font-family><from>23</from><to>32</to><value>monospace</value></font-family><font-size><from>0</from><to>23</to><value>16</value></font-size><font-size><from>23</from><to>32</to><value>13</value></font-size><font-size><from>32</from><to>108</to><value>16</value></font-size><color><from>0</from><to>23</to><value>#777777</value></color><color><from>23</from><to>32</to><value>#ff502c</value></color><color><from>32</from><to>108</to><value>#777777</value></color></inline-styles><styles/></list-item><list-item level="1" list-id="03-1580225579177"><coId>40-1580225579183</coId><text>useEffect中定义的函数的执行不会阻碍浏览器更新视图，也就是说这些函数时异步执行的，而componentDidMonut和componentDidUpdate中的代码都是同步执行的。个人认为这个有好处也有坏处吧，比如我们要根据页面的大小，然后绘制当前弹出窗口的大小，如果时异步的就不好操作了。</text><inline-styles><font-family><from>46</from><to>63</to><value>monospace</value></font-family><font-family><from>64</from><to>82</to><value>monospace</value></font-family><font-size><from>0</from><to>46</to><value>16</value></font-size><font-size><from>46</from><to>63</to><value>13</value></font-size><font-size><from>63</from><to>64</to><value>16</value></font-size><font-size><from>64</from><to>82</to><value>13</value></font-size><font-size><from>82</from><to>149</to><value>16</value></font-size><color><from>0</from><to>46</to><value>#777777</value></color><color><from>46</from><to>63</to><value>#ff502c</value></color><color><from>63</from><to>64</to><value>#777777</value></color><color><from>64</from><to>82</to><value>#ff502c</value></color><color><from>82</from><to>149</to><value>#777777</value></color></inline-styles><styles/></list-item><para><coId>39-1580225579184</coId><text>P04:useEffect 实现 componentWillUnmount生命周期函数</text><inline-styles><bold><from>0</from><to>43</to><value>true</value></bold><font-size><from>0</from><to>43</to><value>20</value></font-size><color><from>0</from><to>43</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>75-1580225579185</coId><text>在写React应用的时候，在组件中经常用到componentWillUnmount生命周期函数（组件将要被卸载时执行）。比如我们的定时器要清空，避免发生内存泄漏;比如登录状态要取消掉，避免下次进入信息出错。所以这个生命周期函数也是必不可少的，这节课就来用useEffect来实现这个生命周期函数,并讲解一下useEffect容易踩的坑。</text><inline-styles><font-family><from>21</from><to>41</to><value>monospace</value></font-family><font-family><from>127</from><to>136</to><value>monospace</value></font-family><font-family><from>153</from><to>162</to><value>monospace</value></font-family><font-size><from>0</from><to>21</to><value>16</value></font-size><font-size><from>21</from><to>41</to><value>13</value></font-size><font-size><from>41</from><to>127</to><value>16</value></font-size><font-size><from>127</from><to>136</to><value>13</value></font-size><font-size><from>136</from><to>153</to><value>16</value></font-size><font-size><from>153</from><to>162</to><value>13</value></font-size><font-size><from>162</from><to>168</to><value>16</value></font-size><color><from>0</from><to>21</to><value>#777777</value></color><color><from>21</from><to>41</to><value>#ff502c</value></color><color><from>41</from><to>127</to><value>#777777</value></color><color><from>127</from><to>136</to><value>#ff502c</value></color><color><from>136</from><to>153</to><value>#777777</value></color><color><from>153</from><to>162</to><value>#ff502c</value></color><color><from>162</from><to>168</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>89-1580225579187</coId><text>useEffect解绑副作用</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><font-size><from>0</from><to>14</to><value>20</value></font-size><color><from>0</from><to>14</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>24-1580225579189</coId><text>学习React Hooks 时，我们要改掉生命周期函数的概念（人往往有先入为主的毛病，所以很难改掉），因为Hooks叫它副作用，所以componentWillUnmount也可以理解成解绑副作用。这里为了演示用useEffect来实现类似componentWillUnmount效果，先安装React-Router路由,进入项目根本录，使用npm进行安装。</text><inline-styles><font-family><from>2</from><to>13</to><value>monospace</value></font-family><font-family><from>53</from><to>58</to><value>monospace</value></font-family><font-family><from>66</from><to>86</to><value>monospace</value></font-family><font-family><from>105</from><to>114</to><value>monospace</value></font-family><font-family><from>119</from><to>139</to><value>monospace</value></font-family><font-family><from>145</from><to>157</to><value>monospace</value></font-family><font-family><from>170</from><to>173</to><value>monospace</value></font-family><font-size><from>0</from><to>2</to><value>16</value></font-size><font-size><from>2</from><to>13</to><value>13</value></font-size><font-size><from>13</from><to>53</to><value>16</value></font-size><font-size><from>53</from><to>58</to><value>13</value></font-size><font-size><from>58</from><to>66</to><value>16</value></font-size><font-size><from>66</from><to>86</to><value>13</value></font-size><font-size><from>86</from><to>105</to><value>16</value></font-size><font-size><from>105</from><to>114</to><value>13</value></font-size><font-size><from>114</from><to>119</to><value>16</value></font-size><font-size><from>119</from><to>139</to><value>13</value></font-size><font-size><from>139</from><to>145</to><value>16</value></font-size><font-size><from>145</from><to>157</to><value>13</value></font-size><font-size><from>157</from><to>170</to><value>16</value></font-size><font-size><from>170</from><to>173</to><value>13</value></font-size><font-size><from>173</from><to>178</to><value>16</value></font-size><color><from>0</from><to>2</to><value>#777777</value></color><color><from>2</from><to>13</to><value>#ff502c</value></color><color><from>13</from><to>53</to><value>#777777</value></color><color><from>53</from><to>58</to><value>#ff502c</value></color><color><from>58</from><to>66</to><value>#777777</value></color><color><from>66</from><to>86</to><value>#ff502c</value></color><color><from>86</from><to>105</to><value>#777777</value></color><color><from>105</from><to>114</to><value>#ff502c</value></color><color><from>114</from><to>119</to><value>#777777</value></color><color><from>119</from><to>139</to><value>#ff502c</value></color><color><from>139</from><to>145</to><value>#777777</value></color><color><from>145</from><to>157</to><value>#ff502c</value></color><color><from>157</from><to>170</to><value>#777777</value></color><color><from>170</from><to>173</to><value>#ff502c</value></color><color><from>173</from><to>178</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>4518-1580377522604</coId><text>npm install--save react-router-dom
</text><inline-styles><font-family><from>0</from><to>34</to><value>monospace</value></font-family><font-size><from>0</from><to>34</to><value>13</value></font-size><color><from>0</from><to>4</to><value>#cccccc</value></color><color><from>4</from><to>11</to><value>#f92672</value></color><color><from>11</from><to>34</to><value>#75715e</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>92-1580225579193</coId><text>然后打开Example.js文件，进行改写代码，先引入对应的React-Router组件。</text><inline-styles><font-family><from>4</from><to>14</to><value>monospace</value></font-family><font-family><from>30</from><to>42</to><value>monospace</value></font-family><font-size><from>0</from><to>4</to><value>16</value></font-size><font-size><from>4</from><to>14</to><value>13</value></font-size><font-size><from>14</from><to>30</to><value>16</value></font-size><font-size><from>30</from><to>42</to><value>13</value></font-size><font-size><from>42</from><to>45</to><value>16</value></font-size><color><from>0</from><to>4</to><value>#777777</value></color><color><from>4</from><to>14</to><value>#ff502c</value></color><color><from>14</from><to>30</to><value>#777777</value></color><color><from>30</from><to>42</to><value>#ff502c</value></color><color><from>42</from><to>45</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8886-1580377529852</coId><text>import { BrowserRouter as Router, Route, Link } from"react-router-dom"
</text><inline-styles><font-family><from>0</from><to>70</to><value>monospace</value></font-family><font-size><from>0</from><to>70</to><value>13</value></font-size><color><from>0</from><to>6</to><value>#f92672</value></color><color><from>6</from><to>23</to><value>#cccccc</value></color><color><from>23</from><to>25</to><value>#f92672</value></color><color><from>25</from><to>48</to><value>#cccccc</value></color><color><from>48</from><to>52</to><value>#f92672</value></color><color><from>52</from><to>70</to><value>#e6db74</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>28-1580225579196</coId><text>在文件中编写两个新组件，因为这两个组件都非常的简单，所以就不单独建立一个新的文件来写了。</text><inline-styles><font-size><from>0</from><to>44</to><value>16</value></font-size><color><from>0</from><to>44</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>2263-1580377548228</coId><text>function Index() {
    return &lt;h2&gt;JSPang.com&lt;/h2&gt;;
}

function List() {
    return &lt;h2&gt;List-Page&lt;/h2&gt;;
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>60-1580225579200</coId><text>有了这两个组件后，接下来可以编写路由配置，在以前的计数器代码中直接增加就可以了。</text><inline-styles><font-size><from>0</from><to>40</to><value>16</value></font-size><color><from>0</from><to>40</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>7650-1580377578518</coId><text>return (
    &lt;div&gt;
        &lt;p&gt;You clicked {count} times&lt;/p&gt;
        &lt;button onClick={()=&gt;{setCount(count+1)}}&gt;click me&lt;/button&gt;

        &lt;Router&gt;
            &lt;ul&gt;
                &lt;li&gt; &lt;Link to="/"&gt;首页&lt;/Link&gt; &lt;/li&gt;
                &lt;li&gt;&lt;Link to="/list/"&gt;列表&lt;/Link&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;Route path="/" exact component={Index} /&gt;
            &lt;Route path="/list/" component={List} /&gt;
        &lt;/Router&gt;
    &lt;/div&gt;
)
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>35-1580225579216</coId><text>然后到浏览器中查看一下，看看组件和路由是否可用。如果可用，我们现在可以调整useEffect了。在两个新组件中分别加入useEffect()函数:</text><inline-styles><font-family><from>37</from><to>46</to><value>monospace</value></font-family><font-family><from>59</from><to>70</to><value>monospace</value></font-family><font-size><from>0</from><to>37</to><value>16</value></font-size><font-size><from>37</from><to>46</to><value>13</value></font-size><font-size><from>46</from><to>59</to><value>16</value></font-size><font-size><from>59</from><to>70</to><value>13</value></font-size><font-size><from>70</from><to>73</to><value>16</value></font-size><color><from>0</from><to>37</to><value>#777777</value></color><color><from>37</from><to>46</to><value>#ff502c</value></color><color><from>46</from><to>59</to><value>#777777</value></color><color><from>59</from><to>70</to><value>#ff502c</value></color><color><from>70</from><to>73</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>6771-1580377611095</coId><text>function Index() {
    useEffect(()=&gt;{
        console.log('useEffect=&gt;老弟，你来了！Index页面')
        )
    return &lt;h2&gt;JSPang.com&lt;/h2&gt;;
}

function List() {
    useEffect(()=&gt;{
        console.log('useEffect=&gt;老弟，你来了！List页面')
    })

    return &lt;h2&gt;List-Page&lt;/h2&gt;;
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>43-1580225579224</coId><text>这时候我们点击Link进入任何一个组件，在浏览器中都会打印出对应的一段话。这时候可以用返回一个函数的形式进行解绑，代码如下：</text><inline-styles><bold><from>43</from><to>56</to><value>true</value></bold><font-family><from>7</from><to>11</to><value>monospace</value></font-family><font-size><from>0</from><to>7</to><value>16</value></font-size><font-size><from>7</from><to>11</to><value>13</value></font-size><font-size><from>11</from><to>62</to><value>16</value></font-size><color><from>0</from><to>7</to><value>#777777</value></color><color><from>7</from><to>11</to><value>#ff502c</value></color><color><from>11</from><to>62</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5215-1580377670430</coId><text>function Index() {
    useEffect(()=&gt;{
        console.log('useEffect=&gt;老弟你来了！Index页面')
        return ()=&gt;{
            console.log('老弟，你走了!Index页面')
        }
    })
    return &lt;h2&gt;JSPang.com&lt;/h2&gt;;
  }
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>16-1580225579232</coId><text>这时候你在浏览器中预览，我们仿佛实现了componentWillUnmount方法。但这只是好像实现了，当点击计数器按钮时，你会发现老弟，你走了!Index页面，也出现了。这到底是怎么回事那？其实每次状态发生变化，useEffect都进行了解绑。</text><inline-styles><font-family><from>19</from><to>39</to><value>monospace</value></font-family><font-family><from>66</from><to>80</to><value>monospace</value></font-family><font-family><from>107</from><to>116</to><value>monospace</value></font-family><font-size><from>0</from><to>19</to><value>16</value></font-size><font-size><from>19</from><to>39</to><value>13</value></font-size><font-size><from>39</from><to>66</to><value>16</value></font-size><font-size><from>66</from><to>80</to><value>13</value></font-size><font-size><from>80</from><to>107</to><value>16</value></font-size><font-size><from>107</from><to>116</to><value>13</value></font-size><font-size><from>116</from><to>123</to><value>16</value></font-size><color><from>0</from><to>19</to><value>#777777</value></color><color><from>19</from><to>39</to><value>#ff502c</value></color><color><from>39</from><to>66</to><value>#777777</value></color><color><from>66</from><to>80</to><value>#ff502c</value></color><color><from>80</from><to>107</to><value>#777777</value></color><color><from>107</from><to>116</to><value>#ff502c</value></color><color><from>116</from><to>123</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>94-1580225579234</coId><text>useEffect的第二个参数</text><inline-styles><bold><from>0</from><to>15</to><value>true</value></bold><font-size><from>0</from><to>15</to><value>20</value></font-size><color><from>0</from><to>15</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>94-1580225579235</coId><text>那到底要如何实现类似componentWillUnmount的效果那?这就需要请出useEffect的第二个参数，它是一个数组，数组中可以写入很多状态对应的变量，意思是当状态值发生变化时，我们才进行解绑。但是当传空数组[]时，就是当组件将被销毁时才进行解绑，这也就实现了componentWillUnmount的生命周期函数。</text><inline-styles><font-family><from>10</from><to>30</to><value>monospace</value></font-family><font-family><from>41</from><to>50</to><value>monospace</value></font-family><font-family><from>109</from><to>111</to><value>monospace</value></font-family><font-family><from>135</from><to>155</to><value>monospace</value></font-family><font-size><from>0</from><to>10</to><value>16</value></font-size><font-size><from>10</from><to>30</to><value>13</value></font-size><font-size><from>30</from><to>41</to><value>16</value></font-size><font-size><from>41</from><to>50</to><value>13</value></font-size><font-size><from>50</from><to>109</to><value>16</value></font-size><font-size><from>109</from><to>111</to><value>13</value></font-size><font-size><from>111</from><to>135</to><value>16</value></font-size><font-size><from>135</from><to>155</to><value>13</value></font-size><font-size><from>155</from><to>163</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#777777</value></color><color><from>10</from><to>30</to><value>#ff502c</value></color><color><from>30</from><to>41</to><value>#777777</value></color><color><from>41</from><to>50</to><value>#ff502c</value></color><color><from>50</from><to>109</to><value>#777777</value></color><color><from>109</from><to>111</to><value>#ff502c</value></color><color><from>111</from><to>135</to><value>#777777</value></color><color><from>135</from><to>155</to><value>#ff502c</value></color><color><from>155</from><to>163</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>2442-1580377731553</coId><text>function Index() {
    useEffect(()=&gt;{
        console.log('useEffect=&gt;老弟你来了！Index页面')
        return ()=&gt;{
            console.log('老弟，你走了!Index页面')
        }
    },[])
    return &lt;h2&gt;JSPang.com&lt;/h2&gt;;
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>04-1580225579244</coId><text>为了更加深入了解第二个参数的作用，把计数器的代码也加上useEffect和解绑方法，并加入第二个参数为空数组。代码如下：</text><inline-styles><font-family><from>27</from><to>36</to><value>monospace</value></font-family><font-size><from>0</from><to>27</to><value>16</value></font-size><font-size><from>27</from><to>36</to><value>13</value></font-size><font-size><from>36</from><to>60</to><value>16</value></font-size><color><from>0</from><to>27</to><value>#777777</value></color><color><from>27</from><to>36</to><value>#ff502c</value></color><color><from>36</from><to>60</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>7996-1580377795044</coId><text>function Example(){
    const [ count , setCount ] = useState(0);

    useEffect(()=&gt;{
        console.log(`useEffect=&gt;You clicked ${count} times`)

        return ()=&gt;{
            console.log('====================')
        }
    },[])

    return (
        &lt;div&gt;
            &lt;p&gt;You clicked {count} times&lt;/p&gt;
            &lt;button onClick={()=&gt;{setCount(count+1)}}&gt;click me&lt;/button&gt;

            &lt;Router&gt;
                &lt;ul&gt;
                    &lt;li&gt; &lt;Link to="/"&gt;首页&lt;/Link&gt; &lt;/li&gt;
                    &lt;li&gt;&lt;Link to="/list/"&gt;列表&lt;/Link&gt; &lt;/li&gt;
                &lt;/ul&gt;
                &lt;Route path="/" exact component={Index} /&gt;
                &lt;Route path="/list/" component={List} /&gt;
            &lt;/Router&gt;
        &lt;/div&gt;
    )
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>25-1580225579265</coId><text>这时候的代码是不能执行解绑副作用函数的。但是如果我们想每次count发生变化，我们都进行解绑，只需要在第二个参数的数组里加入count变量就可以了。代码如下：</text><inline-styles><font-family><from>29</from><to>34</to><value>monospace</value></font-family><font-family><from>62</from><to>67</to><value>monospace</value></font-family><font-size><from>0</from><to>29</to><value>16</value></font-size><font-size><from>29</from><to>34</to><value>13</value></font-size><font-size><from>34</from><to>62</to><value>16</value></font-size><font-size><from>62</from><to>67</to><value>13</value></font-size><font-size><from>67</from><to>79</to><value>16</value></font-size><color><from>0</from><to>29</to><value>#777777</value></color><color><from>29</from><to>34</to><value>#ff502c</value></color><color><from>34</from><to>62</to><value>#777777</value></color><color><from>62</from><to>67</to><value>#ff502c</value></color><color><from>67</from><to>79</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5717-1580377802420</coId><text>function Example(){
    const [ count , setCount ] = useState(0);

    useEffect(()=&gt;{
        console.log(`useEffect=&gt;You clicked ${count} times`)

        return ()=&gt;{
            console.log('====================')
        }
    },[count])

    return (
        &lt;div&gt;
            &lt;p&gt;You clicked {count} times&lt;/p&gt;
            &lt;button onClick={()=&gt;{setCount(count+1)}}&gt;click me&lt;/button&gt;

            &lt;Router&gt;
                &lt;ul&gt;
                    &lt;li&gt; &lt;Link to="/"&gt;首页&lt;/Link&gt; &lt;/li&gt;
                    &lt;li&gt;&lt;Link to="/list/"&gt;列表&lt;/Link&gt; &lt;/li&gt;
                &lt;/ul&gt;
                &lt;Route path="/" exact component={Index} /&gt;
                &lt;Route path="/list/" component={List} /&gt;
            &lt;/Router&gt;
        &lt;/div&gt;
    )
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>13-1580225579285</coId><text>这时候只要count状态发生变化，都会执行解绑副作用函数，浏览器的控制台也就打印出了一串=================。</text><inline-styles><font-family><from>5</from><to>10</to><value>monospace</value></font-family><font-family><from>44</from><to>61</to><value>monospace</value></font-family><font-size><from>0</from><to>5</to><value>16</value></font-size><font-size><from>5</from><to>10</to><value>13</value></font-size><font-size><from>10</from><to>44</to><value>16</value></font-size><font-size><from>44</from><to>61</to><value>13</value></font-size><font-size><from>61</from><to>62</to><value>16</value></font-size><color><from>0</from><to>5</to><value>#777777</value></color><color><from>5</from><to>10</to><value>#ff502c</value></color><color><from>10</from><to>44</to><value>#777777</value></color><color><from>44</from><to>61</to><value>#ff502c</value></color><color><from>61</from><to>62</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>32-1580225579287</coId><text>这节课学完我们就对useEffect函数有了一个比较深入的了解，并且可以通过useEffect实现生命周期函数了，也完成了本节课学习的目的，现在用React Hooks这种函数的方法编写组件，对比以前用Class编写组件几乎一样了。但这并不是Hooks的所有东西，它还有一些让我们惊喜的新特性。这节就到这里了，下节课我们继续讲解React Hooks。</text><inline-styles><font-family><from>9</from><to>18</to><value>monospace</value></font-family><font-family><from>38</from><to>47</to><value>monospace</value></font-family><font-family><from>73</from><to>84</to><value>monospace</value></font-family><font-family><from>101</from><to>106</to><value>monospace</value></font-family><font-family><from>121</from><to>126</to><value>monospace</value></font-family><font-family><from>164</from><to>175</to><value>monospace</value></font-family><font-size><from>0</from><to>9</to><value>16</value></font-size><font-size><from>9</from><to>18</to><value>13</value></font-size><font-size><from>18</from><to>38</to><value>16</value></font-size><font-size><from>38</from><to>47</to><value>13</value></font-size><font-size><from>47</from><to>73</to><value>16</value></font-size><font-size><from>73</from><to>84</to><value>13</value></font-size><font-size><from>84</from><to>101</to><value>16</value></font-size><font-size><from>101</from><to>106</to><value>13</value></font-size><font-size><from>106</from><to>121</to><value>16</value></font-size><font-size><from>121</from><to>126</to><value>13</value></font-size><font-size><from>126</from><to>164</to><value>16</value></font-size><font-size><from>164</from><to>175</to><value>13</value></font-size><font-size><from>175</from><to>176</to><value>16</value></font-size><color><from>0</from><to>9</to><value>#777777</value></color><color><from>9</from><to>18</to><value>#ff502c</value></color><color><from>18</from><to>38</to><value>#777777</value></color><color><from>38</from><to>47</to><value>#ff502c</value></color><color><from>47</from><to>73</to><value>#777777</value></color><color><from>73</from><to>84</to><value>#ff502c</value></color><color><from>84</from><to>101</to><value>#777777</value></color><color><from>101</from><to>106</to><value>#ff502c</value></color><color><from>106</from><to>121</to><value>#777777</value></color><color><from>121</from><to>126</to><value>#ff502c</value></color><color><from>126</from><to>164</to><value>#777777</value></color><color><from>164</from><to>175</to><value>#ff502c</value></color><color><from>175</from><to>176</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>06-1580225579290</coId><text>P05:useContext 让父子组件传值更简单</text><inline-styles><bold><from>0</from><to>25</to><value>true</value></bold><font-size><from>0</from><to>25</to><value>20</value></font-size><color><from>0</from><to>25</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>17-1580225579292</coId><text>有了useState和useEffect已经可以实现大部分的业务逻辑了，但是React Hooks中还是有很多好用的Hooks函数的，比如useContext和useReducer。</text><inline-styles><font-family><from>2</from><to>10</to><value>monospace</value></font-family><font-family><from>11</from><to>20</to><value>monospace</value></font-family><font-family><from>38</from><to>49</to><value>monospace</value></font-family><font-family><from>58</from><to>63</to><value>monospace</value></font-family><font-family><from>69</from><to>79</to><value>monospace</value></font-family><font-family><from>80</from><to>90</to><value>monospace</value></font-family><font-size><from>0</from><to>2</to><value>16</value></font-size><font-size><from>2</from><to>10</to><value>13</value></font-size><font-size><from>10</from><to>11</to><value>16</value></font-size><font-size><from>11</from><to>20</to><value>13</value></font-size><font-size><from>20</from><to>38</to><value>16</value></font-size><font-size><from>38</from><to>49</to><value>13</value></font-size><font-size><from>49</from><to>58</to><value>16</value></font-size><font-size><from>58</from><to>63</to><value>13</value></font-size><font-size><from>63</from><to>69</to><value>16</value></font-size><font-size><from>69</from><to>79</to><value>13</value></font-size><font-size><from>79</from><to>80</to><value>16</value></font-size><font-size><from>80</from><to>90</to><value>13</value></font-size><font-size><from>90</from><to>91</to><value>16</value></font-size><color><from>0</from><to>2</to><value>#777777</value></color><color><from>2</from><to>10</to><value>#ff502c</value></color><color><from>10</from><to>11</to><value>#777777</value></color><color><from>11</from><to>20</to><value>#ff502c</value></color><color><from>20</from><to>38</to><value>#777777</value></color><color><from>38</from><to>49</to><value>#ff502c</value></color><color><from>49</from><to>58</to><value>#777777</value></color><color><from>58</from><to>63</to><value>#ff502c</value></color><color><from>63</from><to>69</to><value>#777777</value></color><color><from>69</from><to>79</to><value>#ff502c</value></color><color><from>79</from><to>80</to><value>#777777</value></color><color><from>80</from><to>90</to><value>#ff502c</value></color><color><from>90</from><to>91</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>56-1580225579294</coId><text>在用类声明组件时，父子组件的传值是通过组件属性和props进行的，那现在使用方法(Function)来声明组件，已经没有了constructor构造函数也就没有了props的接收，那父子组件的传值就成了一个问题。React Hooks 为我们准备了useContext。这节课就学习一下useContext，它可以帮助我们跨越组件层级直接传递变量，实现共享。需要注意的是useContext和redux的作用是不同的，一个解决的是组件之间值传递的问题，一个是应用中统一管理状态的问题，但通过和useReducer的配合使用，可以实现类似Redux的作用。</text><inline-styles><font-family><from>24</from><to>29</to><value>monospace</value></font-family><font-family><from>61</from><to>72</to><value>monospace</value></font-family><font-family><from>106</from><to>117</to><value>monospace</value></font-family><font-family><from>124</from><to>134</to><value>monospace</value></font-family><font-family><from>143</from><to>153</to><value>monospace</value></font-family><font-family><from>185</from><to>195</to><value>monospace</value></font-family><font-family><from>196</from><to>201</to><value>monospace</value></font-family><font-family><from>246</from><to>256</to><value>monospace</value></font-family><font-family><from>268</from><to>273</to><value>monospace</value></font-family><font-size><from>0</from><to>24</to><value>16</value></font-size><font-size><from>24</from><to>29</to><value>13</value></font-size><font-size><from>29</from><to>61</to><value>16</value></font-size><font-size><from>61</from><to>72</to><value>13</value></font-size><font-size><from>72</from><to>106</to><value>16</value></font-size><font-size><from>106</from><to>117</to><value>13</value></font-size><font-size><from>117</from><to>124</to><value>16</value></font-size><font-size><from>124</from><to>134</to><value>13</value></font-size><font-size><from>134</from><to>143</to><value>16</value></font-size><font-size><from>143</from><to>153</to><value>13</value></font-size><font-size><from>153</from><to>185</to><value>16</value></font-size><font-size><from>185</from><to>195</to><value>13</value></font-size><font-size><from>195</from><to>196</to><value>16</value></font-size><font-size><from>196</from><to>201</to><value>13</value></font-size><font-size><from>201</from><to>246</to><value>16</value></font-size><font-size><from>246</from><to>256</to><value>13</value></font-size><font-size><from>256</from><to>268</to><value>16</value></font-size><font-size><from>268</from><to>273</to><value>13</value></font-size><font-size><from>273</from><to>277</to><value>16</value></font-size><color><from>0</from><to>24</to><value>#777777</value></color><color><from>24</from><to>29</to><value>#ff502c</value></color><color><from>29</from><to>61</to><value>#777777</value></color><color><from>61</from><to>72</to><value>#ff502c</value></color><color><from>72</from><to>106</to><value>#777777</value></color><color><from>106</from><to>117</to><value>#ff502c</value></color><color><from>117</from><to>124</to><value>#777777</value></color><color><from>124</from><to>134</to><value>#ff502c</value></color><color><from>134</from><to>143</to><value>#777777</value></color><color><from>143</from><to>153</to><value>#ff502c</value></color><color><from>153</from><to>185</to><value>#777777</value></color><color><from>185</from><to>195</to><value>#ff502c</value></color><color><from>195</from><to>196</to><value>#777777</value></color><color><from>196</from><to>201</to><value>#ff502c</value></color><color><from>201</from><to>246</to><value>#777777</value></color><color><from>246</from><to>256</to><value>#ff502c</value></color><color><from>256</from><to>268</to><value>#777777</value></color><color><from>268</from><to>273</to><value>#ff502c</value></color><color><from>273</from><to>277</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>27-1580225579298</coId><text>这就好比玩游戏时有很多英雄，英雄的最总目的都是赢得比赛，但是作用不同，有负责输出的，有负责抗伤害的，有负责治疗的。</text><inline-styles><font-size><from>0</from><to>57</to><value>16</value></font-size><color><from>0</from><to>57</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>83-1580225579298</coId><text>Context的作用就是对它所包含的组件树提供全局共享数据的一种技术。</text><inline-styles><font-family><from>0</from><to>7</to><value>monospace</value></font-family><font-size><from>0</from><to>7</to><value>13</value></font-size><font-size><from>7</from><to>35</to><value>16</value></font-size><color><from>0</from><to>7</to><value>#ff502c</value></color><color><from>7</from><to>35</to><value>#777777</value></color></inline-styles><styles><indent>1</indent><font-size>16</font-size></styles></para><para><coId>04-1580225579299</coId><text>createContext 函数创建context</text><inline-styles><bold><from>0</from><to>25</to><value>true</value></bold><font-size><from>0</from><to>25</to><value>20</value></font-size><color><from>0</from><to>25</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>42-1580225579300</coId><text>直接在src目录下新建一个文件Example4.js,然后拷贝Example.js里的代码，并进行修改，删除路由部分和副作用的代码，只留计数器的核心代码就可以了。</text><inline-styles><font-family><from>3</from><to>6</to><value>monospace</value></font-family><font-family><from>15</from><to>26</to><value>monospace</value></font-family><font-family><from>31</from><to>41</to><value>monospace</value></font-family><font-size><from>0</from><to>3</to><value>16</value></font-size><font-size><from>3</from><to>6</to><value>13</value></font-size><font-size><from>6</from><to>15</to><value>16</value></font-size><font-size><from>15</from><to>26</to><value>13</value></font-size><font-size><from>26</from><to>31</to><value>16</value></font-size><font-size><from>31</from><to>41</to><value>13</value></font-size><font-size><from>41</from><to>81</to><value>16</value></font-size><color><from>0</from><to>3</to><value>#777777</value></color><color><from>3</from><to>6</to><value>#ff502c</value></color><color><from>6</from><to>15</to><value>#777777</value></color><color><from>15</from><to>26</to><value>#ff502c</value></color><color><from>26</from><to>31</to><value>#777777</value></color><color><from>31</from><to>41</to><value>#ff502c</value></color><color><from>41</from><to>81</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5026-1580378072249</coId><text>import React, { useState , useEffect } from 'react';

function Example4(){
    const [ count , setCount ] = useState(0);
    return (
        &lt;div&gt;
            &lt;p&gt;You clicked {count} times&lt;/p&gt;
            &lt;button onClick={()=&gt;{setCount(count+1)}}&gt;click me&lt;/button&gt;
        &lt;/div&gt;
    )
}
export default Example4;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>01-1580225579308</coId><text>然后修改一下index.js让它渲染这个Example4.js组件，修改的代码如下。</text><inline-styles><font-family><from>6</from><to>14</to><value>monospace</value></font-family><font-family><from>20</from><to>31</to><value>monospace</value></font-family><font-size><from>0</from><to>6</to><value>16</value></font-size><font-size><from>6</from><to>14</to><value>13</value></font-size><font-size><from>14</from><to>20</to><value>16</value></font-size><font-size><from>20</from><to>31</to><value>13</value></font-size><font-size><from>31</from><to>42</to><value>16</value></font-size><color><from>0</from><to>6</to><value>#777777</value></color><color><from>6</from><to>14</to><value>#ff502c</value></color><color><from>14</from><to>20</to><value>#777777</value></color><color><from>20</from><to>31</to><value>#ff502c</value></color><color><from>31</from><to>42</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5397-1580378342312</coId><text>import React from 'react';
import ReactDOM from 'react-dom';
import Example from './Example4'
ReactDOM.render(&lt;Example /&gt;, document.getElementById('root'));
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>26-1580225579313</coId><text>之后在Example4.js中引入createContext函数，并使用得到一个组件，然后在return方法中进行使用。先看代码，然后我再解释。</text><inline-styles><font-family><from>3</from><to>14</to><value>monospace</value></font-family><font-family><from>17</from><to>30</to><value>monospace</value></font-family><font-family><from>46</from><to>52</to><value>monospace</value></font-family><font-size><from>0</from><to>3</to><value>16</value></font-size><font-size><from>3</from><to>14</to><value>13</value></font-size><font-size><from>14</from><to>17</to><value>16</value></font-size><font-size><from>17</from><to>30</to><value>13</value></font-size><font-size><from>30</from><to>46</to><value>16</value></font-size><font-size><from>46</from><to>52</to><value>13</value></font-size><font-size><from>52</from><to>72</to><value>16</value></font-size><color><from>0</from><to>3</to><value>#777777</value></color><color><from>3</from><to>14</to><value>#ff502c</value></color><color><from>14</from><to>17</to><value>#777777</value></color><color><from>17</from><to>30</to><value>#ff502c</value></color><color><from>30</from><to>46</to><value>#777777</value></color><color><from>46</from><to>52</to><value>#ff502c</value></color><color><from>52</from><to>72</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9121-1580378553978</coId><text>import React, { useState , createContext } from 'react';
//===关键代码
const CountContext = createContext()

function Example4(){
    const [ count , setCount ] = useState(0);

    return (
        &lt;div&gt;
            &lt;p&gt;You clicked {count} times&lt;/p&gt;
            &lt;button onClick={()=&gt;{setCount(count+1)}}&gt;click me&lt;/button&gt;
            {/*======关键代码 */}
            &lt;CountContext.Provider value={count}&gt;
            &lt;/CountContext.Provider&gt;

        &lt;/div&gt;
    )
}
export default Example4;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>65-1580225579324</coId><text>这段代码就相当于把count变量允许跨层级实现传递和使用了（也就是实现了上下文），当父组件的count变量发生变化时，子组件也会发生变化。接下来我们就看看一个React Hooks的组件如何接收到这个变量。</text><inline-styles><font-family><from>9</from><to>14</to><value>monospace</value></font-family><font-family><from>46</from><to>51</to><value>monospace</value></font-family><font-family><from>79</from><to>90</to><value>monospace</value></font-family><font-size><from>0</from><to>9</to><value>16</value></font-size><font-size><from>9</from><to>14</to><value>13</value></font-size><font-size><from>14</from><to>46</to><value>16</value></font-size><font-size><from>46</from><to>51</to><value>13</value></font-size><font-size><from>51</from><to>79</to><value>16</value></font-size><font-size><from>79</from><to>90</to><value>13</value></font-size><font-size><from>90</from><to>103</to><value>16</value></font-size><color><from>0</from><to>9</to><value>#777777</value></color><color><from>9</from><to>14</to><value>#ff502c</value></color><color><from>14</from><to>46</to><value>#777777</value></color><color><from>46</from><to>51</to><value>#ff502c</value></color><color><from>51</from><to>79</to><value>#777777</value></color><color><from>79</from><to>90</to><value>#ff502c</value></color><color><from>90</from><to>103</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>99-1580225579325</coId><text>useContext 接收上下文变量</text><inline-styles><bold><from>0</from><to>18</to><value>true</value></bold><font-size><from>0</from><to>18</to><value>20</value></font-size><color><from>0</from><to>18</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>42-1580225579326</coId><text>已经有了上下文变量，剩下的就时如何接收了，接收这个直接使用useContext就可以，但是在使用前需要新进行引入useContext（不引入是没办法使用的）。</text><inline-styles><font-family><from>56</from><to>66</to><value>monospace</value></font-family><font-size><from>0</from><to>56</to><value>16</value></font-size><font-size><from>56</from><to>66</to><value>13</value></font-size><font-size><from>66</from><to>79</to><value>16</value></font-size><color><from>0</from><to>56</to><value>#777777</value></color><color><from>56</from><to>66</to><value>#ff502c</value></color><color><from>66</from><to>79</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>3849-1580378622715</coId><text>import React, { useState , createContext , useContext } from'react';
</text><inline-styles><font-family><from>0</from><to>68</to><value>monospace</value></font-family><font-size><from>0</from><to>68</to><value>13</value></font-size><color><from>0</from><to>6</to><value>#f92672</value></color><color><from>6</from><to>56</to><value>#cccccc</value></color><color><from>56</from><to>60</to><value>#f92672</value></color><color><from>60</from><to>67</to><value>#e6db74</value></color><color><from>67</from><to>68</to><value>#cccccc</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>04-1580225579329</coId><text>引入后写一个Counter组件，只是显示上下文中的count变量代码如下：</text><inline-styles><font-family><from>6</from><to>13</to><value>monospace</value></font-family><font-family><from>25</from><to>30</to><value>monospace</value></font-family><font-size><from>0</from><to>6</to><value>16</value></font-size><font-size><from>6</from><to>13</to><value>13</value></font-size><font-size><from>13</from><to>25</to><value>16</value></font-size><font-size><from>25</from><to>30</to><value>13</value></font-size><font-size><from>30</from><to>37</to><value>16</value></font-size><color><from>0</from><to>6</to><value>#777777</value></color><color><from>6</from><to>13</to><value>#ff502c</value></color><color><from>13</from><to>25</to><value>#777777</value></color><color><from>25</from><to>30</to><value>#ff502c</value></color><color><from>30</from><to>37</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5323-1580378666573</coId><text>function Counter(){
    const count = useContext(CountContext)  //一句话就可以得到count
    return (&lt;h2&gt;{count}&lt;/h2&gt;)
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>76-1580225579333</coId><text>得到后就可以显示出来了，但是要记得在的闭合标签中,代码如下。</text><inline-styles><font-size><from>0</from><to>30</to><value>16</value></font-size><color><from>0</from><to>30</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1442-1580378714398</coId><text>&lt;CountContext.Provider value={count}&gt;
    &lt;Counter /&gt;
&lt;/CountContext.Provider&gt;
</text><inline-styles/><styles/><language>html</language><theme>default</theme></code><para><coId>28-1580225579335</coId><text/><inline-styles/><styles><font-size>16</font-size></styles></para><para><coId>37-1580225579336</coId><text>P06:useReducer介绍和简单使用</text><inline-styles><bold><from>0</from><to>21</to><value>true</value></bold><font-size><from>0</from><to>21</to><value>20</value></font-size><color><from>0</from><to>21</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>20-1580225579337</coId><text>上节课学习了useContext函数，那这节课开始学习一下useReducer，因为他们两个很像，并且合作可以完成类似的Redux库的操作。在开发中使用useReducer可以让代码具有更好的可读性和可维护性，并且会给测试提供方便。</text><inline-styles><font-family><from>6</from><to>16</to><value>monospace</value></font-family><font-family><from>29</from><to>39</to><value>monospace</value></font-family><font-family><from>76</from><to>86</to><value>monospace</value></font-family><font-size><from>0</from><to>6</to><value>16</value></font-size><font-size><from>6</from><to>16</to><value>13</value></font-size><font-size><from>16</from><to>29</to><value>16</value></font-size><font-size><from>29</from><to>39</to><value>13</value></font-size><font-size><from>39</from><to>76</to><value>16</value></font-size><font-size><from>76</from><to>86</to><value>13</value></font-size><font-size><from>86</from><to>116</to><value>16</value></font-size><color><from>0</from><to>6</to><value>#777777</value></color><color><from>6</from><to>16</to><value>#ff502c</value></color><color><from>16</from><to>29</to><value>#777777</value></color><color><from>29</from><to>39</to><value>#ff502c</value></color><color><from>39</from><to>76</to><value>#777777</value></color><color><from>76</from><to>86</to><value>#ff502c</value></color><color><from>86</from><to>116</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>31-1580225579339</coId><text>reducer到底是什么？</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><font-size><from>0</from><to>13</to><value>20</value></font-size><color><from>0</from><to>13</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>92-1580225579340</coId><text>为了更好的理解useReducer，所以先要了解JavaScript里的Redcuer是什么。它的兴起是从Redux广泛使用开始的，但不仅仅存在Redux中，可以使用冈的JavaScript来完成Reducer操作。那reducer其实就是一个函数，这个函数接收两个参数，一个是状态，一个用来控制业务逻辑的判断参数。我们举一个最简单的例子。</text><inline-styles><font-family><from>7</from><to>17</to><value>monospace</value></font-family><font-family><from>36</from><to>43</to><value>monospace</value></font-family><font-family><from>53</from><to>58</to><value>monospace</value></font-family><font-family><from>72</from><to>77</to><value>monospace</value></font-family><font-family><from>98</from><to>105</to><value>monospace</value></font-family><font-family><from>109</from><to>116</to><value>monospace</value></font-family><font-size><from>0</from><to>7</to><value>16</value></font-size><font-size><from>7</from><to>17</to><value>13</value></font-size><font-size><from>17</from><to>36</to><value>16</value></font-size><font-size><from>36</from><to>43</to><value>13</value></font-size><font-size><from>43</from><to>53</to><value>16</value></font-size><font-size><from>53</from><to>58</to><value>13</value></font-size><font-size><from>58</from><to>72</to><value>16</value></font-size><font-size><from>72</from><to>77</to><value>13</value></font-size><font-size><from>77</from><to>98</to><value>16</value></font-size><font-size><from>98</from><to>105</to><value>13</value></font-size><font-size><from>105</from><to>109</to><value>16</value></font-size><font-size><from>109</from><to>116</to><value>13</value></font-size><font-size><from>116</from><to>170</to><value>16</value></font-size><color><from>0</from><to>7</to><value>#777777</value></color><color><from>7</from><to>17</to><value>#ff502c</value></color><color><from>17</from><to>36</to><value>#777777</value></color><color><from>36</from><to>43</to><value>#ff502c</value></color><color><from>43</from><to>53</to><value>#777777</value></color><color><from>53</from><to>58</to><value>#ff502c</value></color><color><from>58</from><to>72</to><value>#777777</value></color><color><from>72</from><to>77</to><value>#ff502c</value></color><color><from>77</from><to>98</to><value>#777777</value></color><color><from>98</from><to>105</to><value>#ff502c</value></color><color><from>105</from><to>109</to><value>#777777</value></color><color><from>109</from><to>116</to><value>#ff502c</value></color><color><from>116</from><to>170</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>6155-1580379041567</coId><text>function countReducer(state, action) {
    switch(action.type) {
        case 'add':
            return state + 1;
        case 'sub':
            return state - 1;
        default: 
            return state;
    }
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>90-1580225579345</coId><text>上面的代码就是Reducer，你主要理解的就是这种形式和两个参数的作用，一个参数是状态，一个参数是如何控制状态。</text><inline-styles><font-size><from>0</from><to>56</to><value>16</value></font-size><color><from>0</from><to>56</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>09-1580225579346</coId><text>useReducer的使用</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><font-size><from>0</from><to>13</to><value>20</value></font-size><color><from>0</from><to>13</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>26-1580225579346</coId><text>了解reducer的含义后，就可以讲useReducer了，它也是React hooks提供的函数，可以增强我们的Reducer，实现类似Redux的功能。我们新建一个Example5.js的文件，然后用useReducer实现计数器的加减双向操作。</text><inline-styles><font-family><from>57</from><to>64</to><value>monospace</value></font-family><font-family><from>84</from><to>95</to><value>monospace</value></font-family><font-size><from>0</from><to>57</to><value>16</value></font-size><font-size><from>57</from><to>64</to><value>13</value></font-size><font-size><from>64</from><to>84</to><value>16</value></font-size><font-size><from>84</from><to>95</to><value>13</value></font-size><font-size><from>95</from><to>125</to><value>16</value></font-size><color><from>0</from><to>57</to><value>#777777</value></color><color><from>57</from><to>64</to><value>#ff502c</value></color><color><from>64</from><to>84</to><value>#777777</value></color><color><from>84</from><to>95</to><value>#ff502c</value></color><color><from>95</from><to>125</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8931-1580379702194</coId><text>import React, { useReducer } from 'react';

function ReducerDemo(){
    const [ count , dispatch ] =useReducer((state,action)=&gt;{
        switch(action){
            case 'add':
                return state+1
            case 'sub':
                return state-1
            default:
                return state
        }
    },0)
    return (
       &lt;div&gt;
           &lt;h2&gt;现在的分数是{count}&lt;/h2&gt;
           &lt;button onClick={()=&gt;dispatch('add')}&gt;Increment&lt;/button&gt;
           &lt;button onClick={()=&gt;dispatch('sub')}&gt;Decrement&lt;/button&gt;
       &lt;/div&gt;
    )

}

export default ReducerDemo
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>39-1580225579359</coId><text>这段代码是useReducer的最简单实现了，这时候可以在浏览器中实现了计数器的增加减少。</text><inline-styles><font-size><from>0</from><to>45</to><value>16</value></font-size><color><from>0</from><to>45</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>56-1580225579397</coId><text>修改index.js文件，让ReducerDemo组件起作用。</text><inline-styles><font-family><from>2</from><to>10</to><value>monospace</value></font-family><font-family><from>14</from><to>25</to><value>monospace</value></font-family><font-size><from>0</from><to>2</to><value>16</value></font-size><font-size><from>2</from><to>10</to><value>13</value></font-size><font-size><from>10</from><to>14</to><value>16</value></font-size><font-size><from>14</from><to>25</to><value>13</value></font-size><font-size><from>25</from><to>31</to><value>16</value></font-size><color><from>0</from><to>2</to><value>#777777</value></color><color><from>2</from><to>10</to><value>#ff502c</value></color><color><from>10</from><to>14</to><value>#777777</value></color><color><from>14</from><to>25</to><value>#ff502c</value></color><color><from>25</from><to>31</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8030-1580379906456</coId><text>import React from 'react';
import ReactDOM from 'react-dom';
import Example from './Example5'


ReactDOM.render(&lt;Example /&gt;, document.getElementById('root'));
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>63-1580225579402</coId><text>P07:useReducer代替Redux小案例-1</text><inline-styles><bold><from>0</from><to>26</to><value>true</value></bold><font-size><from>0</from><to>26</to><value>20</value></font-size><color><from>0</from><to>26</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>49-1580225579403</coId><text>使用useContext和useReducer是可以实现类似Redux的效果，并且一些简单的个人项目，完全可以用下面的方案代替Redux，这种做法要比Redux简单一些。因为useContext和useReducer在前两节课已经学习过了，所以我们这节课把精力就放在如何模拟出Redux的效果。</text><inline-styles><font-family><from>2</from><to>12</to><value>monospace</value></font-family><font-family><from>13</from><to>23</to><value>monospace</value></font-family><font-family><from>30</from><to>35</to><value>monospace</value></font-family><font-family><from>87</from><to>97</to><value>monospace</value></font-family><font-family><from>98</from><to>108</to><value>monospace</value></font-family><font-family><from>138</from><to>143</to><value>monospace</value></font-family><font-size><from>0</from><to>2</to><value>16</value></font-size><font-size><from>2</from><to>12</to><value>13</value></font-size><font-size><from>12</from><to>13</to><value>16</value></font-size><font-size><from>13</from><to>23</to><value>13</value></font-size><font-size><from>23</from><to>30</to><value>16</value></font-size><font-size><from>30</from><to>35</to><value>13</value></font-size><font-size><from>35</from><to>87</to><value>16</value></font-size><font-size><from>87</from><to>97</to><value>13</value></font-size><font-size><from>97</from><to>98</to><value>16</value></font-size><font-size><from>98</from><to>108</to><value>13</value></font-size><font-size><from>108</from><to>138</to><value>16</value></font-size><font-size><from>138</from><to>143</to><value>13</value></font-size><font-size><from>143</from><to>147</to><value>16</value></font-size><color><from>0</from><to>2</to><value>#777777</value></color><color><from>2</from><to>12</to><value>#ff502c</value></color><color><from>12</from><to>13</to><value>#777777</value></color><color><from>13</from><to>23</to><value>#ff502c</value></color><color><from>23</from><to>30</to><value>#777777</value></color><color><from>30</from><to>35</to><value>#ff502c</value></color><color><from>35</from><to>87</to><value>#777777</value></color><color><from>87</from><to>97</to><value>#ff502c</value></color><color><from>97</from><to>98</to><value>#777777</value></color><color><from>98</from><to>108</to><value>#ff502c</value></color><color><from>108</from><to>138</to><value>#777777</value></color><color><from>138</from><to>143</to><value>#ff502c</value></color><color><from>143</from><to>147</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>86-1580225579405</coId><text>本节课程参考了掘金上缪宇的文章 ，文章地址:https://juejin.im/post/5ceb37c851882520724c7504</text><inline-styles><font-size><from>0</from><to>69</to><value>16</value></font-size><color><from>0</from><to>22</to><value>#777777</value></color><color><from>22</from><to>69</to><value>#1890ff</value></color><href><from>22</from><to>69</to><value>https://juejin.im/post/5ceb37c851882520724c7504</value></href></inline-styles><styles><indent>1</indent><font-size>16</font-size></styles></para><para><coId>26-1580225579406</coId><text>理论上的可行性</text><inline-styles><bold><from>0</from><to>7</to><value>true</value></bold><font-size><from>0</from><to>7</to><value>20</value></font-size><color><from>0</from><to>7</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>86-1580225579406</coId><text>我们先从理论层面看看替代Redux的可能性，其实如果你对两个函数有所了解，只要我们巧妙的结合，这种替代方案是完全可行的。</text><inline-styles><font-family><from>12</from><to>17</to><value>monospace</value></font-family><font-size><from>0</from><to>12</to><value>16</value></font-size><font-size><from>12</from><to>17</to><value>13</value></font-size><font-size><from>17</from><to>60</to><value>16</value></font-size><color><from>0</from><to>12</to><value>#777777</value></color><color><from>12</from><to>17</to><value>#ff502c</value></color><color><from>17</from><to>60</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>48-1580225579407</coId><text>useContext：可访问全局状态，避免一层层的传递状态。这符合Redux其中的一项规则，就是状态全局化，并能统一管理。</text><inline-styles><font-family><from>0</from><to>10</to><value>monospace</value></font-family><font-family><from>33</from><to>38</to><value>monospace</value></font-family><font-size><from>0</from><to>10</to><value>13</value></font-size><font-size><from>10</from><to>33</to><value>16</value></font-size><font-size><from>33</from><to>38</to><value>13</value></font-size><font-size><from>38</from><to>61</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#ff502c</value></color><color><from>10</from><to>33</to><value>#777777</value></color><color><from>33</from><to>38</to><value>#ff502c</value></color><color><from>38</from><to>61</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>95-1580225579408</coId><text>useReducer：通过action的传递，更新复杂逻辑的状态，主要是可以实现类似Redux中的Reducer部分，实现业务逻辑的可行性。</text><inline-styles><font-family><from>0</from><to>10</to><value>monospace</value></font-family><font-family><from>42</from><to>47</to><value>monospace</value></font-family><font-family><from>49</from><to>56</to><value>monospace</value></font-family><font-size><from>0</from><to>10</to><value>13</value></font-size><font-size><from>10</from><to>42</to><value>16</value></font-size><font-size><from>42</from><to>47</to><value>13</value></font-size><font-size><from>47</from><to>49</to><value>16</value></font-size><font-size><from>49</from><to>56</to><value>13</value></font-size><font-size><from>56</from><to>70</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#ff502c</value></color><color><from>10</from><to>42</to><value>#777777</value></color><color><from>42</from><to>47</to><value>#ff502c</value></color><color><from>47</from><to>49</to><value>#777777</value></color><color><from>49</from><to>56</to><value>#ff502c</value></color><color><from>56</from><to>70</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>29-1580225579409</coId><text>经过我们在理论上的分析是完全可行的，接下来我们就用一个简单实例来看一下具体的实现方法。那这节课先实现useContext部分（也就是状态共享），下节再继续讲解useReducer部分（控制业务逻辑）。</text><inline-styles><font-family><from>50</from><to>60</to><value>monospace</value></font-family><font-family><from>79</from><to>89</to><value>monospace</value></font-family><font-size><from>0</from><to>50</to><value>16</value></font-size><font-size><from>50</from><to>60</to><value>13</value></font-size><font-size><from>60</from><to>79</to><value>16</value></font-size><font-size><from>79</from><to>89</to><value>13</value></font-size><font-size><from>89</from><to>100</to><value>16</value></font-size><color><from>0</from><to>50</to><value>#777777</value></color><color><from>50</from><to>60</to><value>#ff502c</value></color><color><from>60</from><to>79</to><value>#777777</value></color><color><from>79</from><to>89</to><value>#ff502c</value></color><color><from>89</from><to>100</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>41-1580225579410</coId><text>编写基本UI组件</text><inline-styles><bold><from>0</from><to>8</to><value>true</value></bold><font-size><from>0</from><to>8</to><value>20</value></font-size><color><from>0</from><to>8</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>73-1580225579411</coId><text>既然是一个实例，就需要有些界面的东西，小伙伴们不要觉的烦。在/src目录下新建一个文件夹Example6，有了文件夹后，在文件夹下面建立一个showArea.js文件。代码如下：</text><inline-styles><font-family><from>30</from><to>34</to><value>monospace</value></font-family><font-family><from>44</from><to>52</to><value>monospace</value></font-family><font-family><from>70</from><to>81</to><value>monospace</value></font-family><font-size><from>0</from><to>30</to><value>16</value></font-size><font-size><from>30</from><to>34</to><value>13</value></font-size><font-size><from>34</from><to>44</to><value>16</value></font-size><font-size><from>44</from><to>52</to><value>13</value></font-size><font-size><from>52</from><to>70</to><value>16</value></font-size><font-size><from>70</from><to>81</to><value>13</value></font-size><font-size><from>81</from><to>89</to><value>16</value></font-size><color><from>0</from><to>30</to><value>#777777</value></color><color><from>30</from><to>34</to><value>#ff502c</value></color><color><from>34</from><to>44</to><value>#777777</value></color><color><from>44</from><to>52</to><value>#ff502c</value></color><color><from>52</from><to>70</to><value>#777777</value></color><color><from>70</from><to>81</to><value>#ff502c</value></color><color><from>81</from><to>89</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1436-1580381837933</coId><text>import React from 'react';
function ShowArea(){

    return (&lt;div style={{color:'blue'}}&gt;字体颜色为blue&lt;/div&gt;)

}
export default ShowArea
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>13-1580225579416</coId><text>显示区域写完后，新建一个Buttons.js文件，用来编写按钮，这个是两个按钮，一个红色一个黄色。先不写其他任何业务逻辑。</text><inline-styles><font-family><from>12</from><to>22</to><value>monospace</value></font-family><font-size><from>0</from><to>12</to><value>16</value></font-size><font-size><from>12</from><to>22</to><value>13</value></font-size><font-size><from>22</from><to>61</to><value>16</value></font-size><color><from>0</from><to>12</to><value>#777777</value></color><color><from>12</from><to>22</to><value>#ff502c</value></color><color><from>22</from><to>61</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>2065-1580381847213</coId><text>import React from 'react';

function Buttons(){
    return (
        &lt;div&gt;
            &lt;button&gt;红色&lt;/button&gt;
            &lt;button&gt;黄色&lt;/button&gt;
        &lt;/div&gt;
    )
}

export default Buttons
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>61-1580225579422</coId><text>然后再编写一个组合他们的Example6.js组件，引入两个新编写的组件ShowArea和Buttons，并用</text><inline-styles><font-family><from>12</from><to>23</to><value>monospace</value></font-family><font-family><from>36</from><to>44</to><value>monospace</value></font-family><font-family><from>45</from><to>52</to><value>monospace</value></font-family><font-size><from>0</from><to>12</to><value>16</value></font-size><font-size><from>12</from><to>23</to><value>13</value></font-size><font-size><from>23</from><to>36</to><value>16</value></font-size><font-size><from>36</from><to>44</to><value>13</value></font-size><font-size><from>44</from><to>45</to><value>16</value></font-size><font-size><from>45</from><to>52</to><value>13</value></font-size><font-size><from>52</from><to>55</to><value>16</value></font-size><color><from>0</from><to>12</to><value>#777777</value></color><color><from>12</from><to>23</to><value>#ff502c</value></color><color><from>23</from><to>36</to><value>#777777</value></color><color><from>36</from><to>44</to><value>#ff502c</value></color><color><from>44</from><to>45</to><value>#777777</value></color><color><from>45</from><to>52</to><value>#ff502c</value></color><color><from>52</from><to>55</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>00-1580225579422</coId><text>标签给包裹起来。</text><inline-styles/><styles/></para><code><coId>9067-1580381876677</coId><text>import React, { useReducer } from 'react';
import ShowArea from './ShowArea';
import Buttons from './Buttons';


function Example6(){
    return (
        &lt;div&gt;
                &lt;ShowArea /&gt;
                &lt;Buttons /&gt;
        &lt;/div&gt;
    )
}

export default Example6
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>79-1580225579428</coId><text>这步做完，需要到/src目录下的index.js中引入一下Example6.js文件，引入后React才能正确渲染出刚写的UI组件。</text><inline-styles><font-family><from>8</from><to>12</to><value>monospace</value></font-family><font-family><from>16</from><to>24</to><value>monospace</value></font-family><font-family><from>29</from><to>40</to><value>monospace</value></font-family><font-size><from>0</from><to>8</to><value>16</value></font-size><font-size><from>8</from><to>12</to><value>13</value></font-size><font-size><from>12</from><to>16</to><value>16</value></font-size><font-size><from>16</from><to>24</to><value>13</value></font-size><font-size><from>24</from><to>29</to><value>16</value></font-size><font-size><from>29</from><to>40</to><value>13</value></font-size><font-size><from>40</from><to>66</to><value>16</value></font-size><color><from>0</from><to>8</to><value>#777777</value></color><color><from>8</from><to>12</to><value>#ff502c</value></color><color><from>12</from><to>16</to><value>#777777</value></color><color><from>16</from><to>24</to><value>#ff502c</value></color><color><from>24</from><to>29</to><value>#777777</value></color><color><from>29</from><to>40</to><value>#ff502c</value></color><color><from>40</from><to>66</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>4471-1580381890045</coId><text>import React from 'react';
import ReactDOM from 'react-dom';
import Example from './Example6/Example6'


ReactDOM.render(&lt;Example /&gt;, document.getElementById('root'));
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>24-1580225579432</coId><text/><inline-styles/><styles><font-size>16</font-size></styles></para><para><coId>29-1580225579433</coId><text>编写颜色共享组件color.js</text><inline-styles><bold><from>0</from><to>16</to><value>true</value></bold><font-family><from>8</from><to>16</to><value>monospace</value></font-family><font-size><from>0</from><to>8</to><value>20</value></font-size><font-size><from>8</from><to>16</to><value>13</value></font-size><color><from>0</from><to>8</to><value>#666666</value></color><color><from>8</from><to>16</to><value>#ff502c</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>96-1580225579433</coId><text>有了UI组件后，就可以写一些业务逻辑了，这节课我们先实现状态共享，这个就是利用useContext。建立一个color.js文件，然后写入下面的代码。</text><inline-styles><font-family><from>39</from><to>49</to><value>monospace</value></font-family><font-family><from>54</from><to>62</to><value>monospace</value></font-family><font-size><from>0</from><to>39</to><value>16</value></font-size><font-size><from>39</from><to>49</to><value>13</value></font-size><font-size><from>49</from><to>54</to><value>16</value></font-size><font-size><from>54</from><to>62</to><value>13</value></font-size><font-size><from>62</from><to>75</to><value>16</value></font-size><color><from>0</from><to>39</to><value>#777777</value></color><color><from>39</from><to>49</to><value>#ff502c</value></color><color><from>49</from><to>54</to><value>#777777</value></color><color><from>54</from><to>62</to><value>#ff502c</value></color><color><from>62</from><to>75</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9092-1580383352308</coId><text>import React, { createContext } from 'react';

export const ColorContext = createContext({})

export const Color = props=&gt;{
    return (
        &lt;ColorContext.Provider value={{color:"blue"}}&gt;
            {props.children}
        &lt;/ColorContext.Provider&gt;
    )
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>10-1580225579439</coId><text>代码中引入了createContext用来创建共享上下文ColorContext组件，然后我们要用{props.children}来显示对应的子组件。</text><inline-styles><font-family><from>6</from><to>19</to><value>monospace</value></font-family><font-family><from>28</from><to>40</to><value>monospace</value></font-family><font-family><from>49</from><to>65</to><value>monospace</value></font-family><font-size><from>0</from><to>6</to><value>16</value></font-size><font-size><from>6</from><to>19</to><value>13</value></font-size><font-size><from>19</from><to>28</to><value>16</value></font-size><font-size><from>28</from><to>40</to><value>13</value></font-size><font-size><from>40</from><to>49</to><value>16</value></font-size><font-size><from>49</from><to>65</to><value>13</value></font-size><font-size><from>65</from><to>75</to><value>16</value></font-size><color><from>0</from><to>6</to><value>#777777</value></color><color><from>6</from><to>19</to><value>#ff502c</value></color><color><from>19</from><to>28</to><value>#777777</value></color><color><from>28</from><to>40</to><value>#ff502c</value></color><color><from>40</from><to>49</to><value>#777777</value></color><color><from>49</from><to>65</to><value>#ff502c</value></color><color><from>65</from><to>75</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>05-1580225579441</coId><text>有了这个组件后，我们就可以把Example6.js进行改写，让她可以共享状态。</text><inline-styles><font-family><from>14</from><to>25</to><value>monospace</value></font-family><font-size><from>0</from><to>14</to><value>16</value></font-size><font-size><from>14</from><to>25</to><value>13</value></font-size><font-size><from>25</from><to>39</to><value>16</value></font-size><color><from>0</from><to>14</to><value>#777777</value></color><color><from>14</from><to>25</to><value>#ff502c</value></color><color><from>25</from><to>39</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1539-1580383404655</coId><text>import React, { useReducer } from 'react';
import ShowArea from './ShowArea';
import Buttons from './Buttons';
import { Color } from './color';   //引入Color组件

function Example6(){
    return (
        &lt;div&gt;
            &lt;Color&gt;
                &lt;ShowArea /&gt;
                &lt;Buttons /&gt;
            &lt;/Color&gt;

        &lt;/div&gt;
    )
}

export default Example6
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>34-1580225579448</coId><text>然后再改写showArea.js文件，我们会引入useContext和在color.js中声明的ColorContext，让组件可以接收全局变量。</text><inline-styles><font-family><from>5</from><to>16</to><value>monospace</value></font-family><font-family><from>24</from><to>34</to><value>monospace</value></font-family><font-family><from>36</from><to>44</to><value>monospace</value></font-family><font-family><from>48</from><to>60</to><value>monospace</value></font-family><font-size><from>0</from><to>5</to><value>16</value></font-size><font-size><from>5</from><to>16</to><value>13</value></font-size><font-size><from>16</from><to>24</to><value>16</value></font-size><font-size><from>24</from><to>34</to><value>13</value></font-size><font-size><from>34</from><to>36</to><value>16</value></font-size><font-size><from>36</from><to>44</to><value>13</value></font-size><font-size><from>44</from><to>48</to><value>16</value></font-size><font-size><from>48</from><to>60</to><value>13</value></font-size><font-size><from>60</from><to>73</to><value>16</value></font-size><color><from>0</from><to>5</to><value>#777777</value></color><color><from>5</from><to>16</to><value>#ff502c</value></color><color><from>16</from><to>24</to><value>#777777</value></color><color><from>24</from><to>34</to><value>#ff502c</value></color><color><from>34</from><to>36</to><value>#777777</value></color><color><from>36</from><to>44</to><value>#ff502c</value></color><color><from>44</from><to>48</to><value>#777777</value></color><color><from>48</from><to>60</to><value>#ff502c</value></color><color><from>60</from><to>73</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>7590-1580384068535</coId><text>import React , { useContext } from 'react';
import { ColorContext } from './color';

function ShowArea(){
    const {color} = useContext(ColorContext)
    return (&lt;div style={{color:color}}&gt;字体颜色为{color}&lt;/div&gt;)

}

export default ShowArea
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>64-1580225579454</coId><text>这时候就通过useContext实现了状态的共享，可以到浏览器中看一下效果。</text><inline-styles><font-family><from>6</from><to>16</to><value>monospace</value></font-family><font-size><from>0</from><to>6</to><value>16</value></font-size><font-size><from>6</from><to>16</to><value>13</value></font-size><font-size><from>16</from><to>38</to><value>16</value></font-size><color><from>0</from><to>6</to><value>#777777</value></color><color><from>6</from><to>16</to><value>#ff502c</value></color><color><from>16</from><to>38</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>71-1580225579454</coId><text>P08:useReducer代替Redux小案例-2</text><inline-styles><bold><from>0</from><to>26</to><value>true</value></bold><font-size><from>0</from><to>26</to><value>20</value></font-size><color><from>0</from><to>26</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>09-1580225579455</coId><text>用useContext实现了Redux状态共享的能力，这节课看一下如何使用useReducer来实现业务逻辑的控制。</text><inline-styles><font-family><from>1</from><to>11</to><value>monospace</value></font-family><font-family><from>37</from><to>47</to><value>monospace</value></font-family><font-size><from>0</from><to>1</to><value>16</value></font-size><font-size><from>1</from><to>11</to><value>13</value></font-size><font-size><from>11</from><to>37</to><value>16</value></font-size><font-size><from>37</from><to>47</to><value>13</value></font-size><font-size><from>47</from><to>58</to><value>16</value></font-size><color><from>0</from><to>1</to><value>#777777</value></color><color><from>1</from><to>11</to><value>#ff502c</value></color><color><from>11</from><to>37</to><value>#777777</value></color><color><from>37</from><to>47</to><value>#ff502c</value></color><color><from>47</from><to>58</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>96-1580225579456</coId><text>在color.js中添加Reducer</text><inline-styles><bold><from>0</from><to>19</to><value>true</value></bold><font-size><from>0</from><to>19</to><value>20</value></font-size><color><from>0</from><to>19</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>28-1580225579457</coId><text>颜色（state）管理的代码我们都放在了color.js中，所以在文件里添加一个reducer，用于处理颜色更新的逻辑。先声明一个reducer的函数，它就是JavaScript中的普通函数，在讲useReducer的时候已经详细讲过了。有了reducer后，在Color组件里使用useReducer,这样Color组件就有了那个共享状态和处理业务逻辑的能力，跟以前使用的Redux几乎一样了。之后修改一下共享状态。我们来看代码：</text><inline-styles><font-family><from>20</from><to>28</to><value>monospace</value></font-family><font-family><from>98</from><to>108</to><value>monospace</value></font-family><font-family><from>141</from><to>151</to><value>monospace</value></font-family><font-family><from>187</from><to>192</to><value>monospace</value></font-family><font-size><from>0</from><to>20</to><value>16</value></font-size><font-size><from>20</from><to>28</to><value>13</value></font-size><font-size><from>28</from><to>98</to><value>16</value></font-size><font-size><from>98</from><to>108</to><value>13</value></font-size><font-size><from>108</from><to>141</to><value>16</value></font-size><font-size><from>141</from><to>151</to><value>13</value></font-size><font-size><from>151</from><to>187</to><value>16</value></font-size><font-size><from>187</from><to>192</to><value>13</value></font-size><font-size><from>192</from><to>216</to><value>16</value></font-size><color><from>0</from><to>20</to><value>#777777</value></color><color><from>20</from><to>28</to><value>#ff502c</value></color><color><from>28</from><to>98</to><value>#777777</value></color><color><from>98</from><to>108</to><value>#ff502c</value></color><color><from>108</from><to>141</to><value>#777777</value></color><color><from>141</from><to>151</to><value>#ff502c</value></color><color><from>151</from><to>187</to><value>#777777</value></color><color><from>187</from><to>192</to><value>#ff502c</value></color><color><from>192</from><to>216</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>6914-1580384471000</coId><text>import React, { createContext,useReducer } from 'react';

export const ColorContext = createContext({})

export const UPDATE_COLOR = "UPDATE_COLOR"

const reducer= (state,action)=&gt;{
    switch(action.type){
        case UPDATE_COLOR:
            return action.color
        default:
            return state
    }
}


export const Color = props=&gt;{
    const [color,dispatch]=useReducer(reducer,'blue')
    return (
        &lt;ColorContext.Provider value={{color,dispatch}}&gt;
            {props.children}
        &lt;/ColorContext.Provider&gt;
    )
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>40-1580225579467</coId><text>注意，这时候我们共享出去的状态变成了color和dispatch,如果不共享出去dispatch，你是没办法完成按钮的相应事件的。</text><inline-styles><font-size><from>0</from><to>65</to><value>16</value></font-size><color><from>0</from><to>65</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>15-1580225579468</coId><text>通过dispatch修改状态</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><font-size><from>0</from><to>14</to><value>20</value></font-size><color><from>0</from><to>14</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>04-1580225579469</coId><text>目前程序已经有了处理共享状态的业务逻辑能力，接下来就可以在buttons.js使用dispatch来完成按钮的相应操作了。先引入useContext、ColorContext和UPDATE_COLOR，然后写onClick事件就可以了。代码如下:</text><inline-styles><font-family><from>29</from><to>39</to><value>monospace</value></font-family><font-family><from>41</from><to>49</to><value>monospace</value></font-family><font-family><from>64</from><to>74</to><value>monospace</value></font-family><font-family><from>75</from><to>87</to><value>monospace</value></font-family><font-family><from>88</from><to>100</to><value>monospace</value></font-family><font-family><from>104</from><to>111</to><value>monospace</value></font-family><font-size><from>0</from><to>29</to><value>16</value></font-size><font-size><from>29</from><to>39</to><value>13</value></font-size><font-size><from>39</from><to>41</to><value>16</value></font-size><font-size><from>41</from><to>49</to><value>13</value></font-size><font-size><from>49</from><to>64</to><value>16</value></font-size><font-size><from>64</from><to>74</to><value>13</value></font-size><font-size><from>74</from><to>75</to><value>16</value></font-size><font-size><from>75</from><to>87</to><value>13</value></font-size><font-size><from>87</from><to>88</to><value>16</value></font-size><font-size><from>88</from><to>100</to><value>13</value></font-size><font-size><from>100</from><to>104</to><value>16</value></font-size><font-size><from>104</from><to>111</to><value>13</value></font-size><font-size><from>111</from><to>123</to><value>16</value></font-size><color><from>0</from><to>29</to><value>#777777</value></color><color><from>29</from><to>39</to><value>#ff502c</value></color><color><from>39</from><to>41</to><value>#777777</value></color><color><from>41</from><to>49</to><value>#ff502c</value></color><color><from>49</from><to>64</to><value>#777777</value></color><color><from>64</from><to>74</to><value>#ff502c</value></color><color><from>74</from><to>75</to><value>#777777</value></color><color><from>75</from><to>87</to><value>#ff502c</value></color><color><from>87</from><to>88</to><value>#777777</value></color><color><from>88</from><to>100</to><value>#ff502c</value></color><color><from>100</from><to>104</to><value>#777777</value></color><color><from>104</from><to>111</to><value>#ff502c</value></color><color><from>111</from><to>123</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1438-1580384635408</coId><text>import React ,{useContext} from 'react';
import {ColorContext,UPDATE_COLOR} from './color'

function Buttons(){
    const { dispatch } = useContext(ColorContext)
    return (
        &lt;div&gt;
            &lt;button onClick={()=&gt;{dispatch({type:UPDATE_COLOR,color:"red"})}}&gt;红色&lt;/button&gt;
            &lt;button onClick={()=&gt;{dispatch({type:UPDATE_COLOR,color:"yellow"})}}&gt;黄色&lt;/button&gt;
        &lt;/div&gt;
    )
}

export default Buttons
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>65-1580225579478</coId><text>这样代码就编写完成了，用useContext和useReducer实现了Redux的效果，这个代码编写过程比Redux要简单。</text><inline-styles><font-family><from>12</from><to>22</to><value>monospace</value></font-family><font-family><from>23</from><to>33</to><value>monospace</value></font-family><font-size><from>0</from><to>12</to><value>16</value></font-size><font-size><from>12</from><to>22</to><value>13</value></font-size><font-size><from>22</from><to>23</to><value>16</value></font-size><font-size><from>23</from><to>33</to><value>13</value></font-size><font-size><from>33</from><to>63</to><value>16</value></font-size><color><from>0</from><to>12</to><value>#777777</value></color><color><from>12</from><to>22</to><value>#ff502c</value></color><color><from>22</from><to>23</to><value>#777777</value></color><color><from>23</from><to>33</to><value>#ff502c</value></color><color><from>33</from><to>63</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>74-1580225579479</coId><text>P09:useMemo优化React Hooks程序性能</text><inline-styles><bold><from>0</from><to>28</to><value>true</value></bold><font-size><from>0</from><to>28</to><value>20</value></font-size><color><from>0</from><to>28</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>08-1580225579480</coId><text>useMemo主要用来解决使用React hooks产生的无用渲染的性能问题。使用function的形式来声明组件，失去了shouldCompnentUpdate（在组件更新之前）这个生命周期，也就是说我们没有办法通过组件更新前条件来决定组件是否更新。而且在函数组件中，也不再区分mount和update两个状态，这意味着函数组件的每一次调用都会执行内部的所有逻辑，就带来了非常大的性能损耗。useMemo和useCallback都是解决上述性能问题的，这节课先学习useMemo.</text><inline-styles><font-family><from>0</from><to>7</to><value>monospace</value></font-family><font-family><from>61</from><to>81</to><value>monospace</value></font-family><font-family><from>140</from><to>145</to><value>monospace</value></font-family><font-family><from>146</from><to>152</to><value>monospace</value></font-family><font-family><from>196</from><to>203</to><value>monospace</value></font-family><font-family><from>204</from><to>215</to><value>monospace</value></font-family><font-family><from>233</from><to>240</to><value>monospace</value></font-family><font-size><from>0</from><to>7</to><value>13</value></font-size><font-size><from>7</from><to>61</to><value>16</value></font-size><font-size><from>61</from><to>81</to><value>13</value></font-size><font-size><from>81</from><to>140</to><value>16</value></font-size><font-size><from>140</from><to>145</to><value>13</value></font-size><font-size><from>145</from><to>146</to><value>16</value></font-size><font-size><from>146</from><to>152</to><value>13</value></font-size><font-size><from>152</from><to>196</to><value>16</value></font-size><font-size><from>196</from><to>203</to><value>13</value></font-size><font-size><from>203</from><to>204</to><value>16</value></font-size><font-size><from>204</from><to>215</to><value>13</value></font-size><font-size><from>215</from><to>233</to><value>16</value></font-size><font-size><from>233</from><to>240</to><value>13</value></font-size><font-size><from>240</from><to>241</to><value>16</value></font-size><color><from>0</from><to>7</to><value>#ff502c</value></color><color><from>7</from><to>61</to><value>#777777</value></color><color><from>61</from><to>81</to><value>#ff502c</value></color><color><from>81</from><to>140</to><value>#777777</value></color><color><from>140</from><to>145</to><value>#ff502c</value></color><color><from>145</from><to>146</to><value>#777777</value></color><color><from>146</from><to>152</to><value>#ff502c</value></color><color><from>152</from><to>196</to><value>#777777</value></color><color><from>196</from><to>203</to><value>#ff502c</value></color><color><from>203</from><to>204</to><value>#777777</value></color><color><from>204</from><to>215</to><value>#ff502c</value></color><color><from>215</from><to>233</to><value>#777777</value></color><color><from>233</from><to>240</to><value>#ff502c</value></color><color><from>240</from><to>241</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>38-1580225579482</coId><text>性能问题展示案例</text><inline-styles><bold><from>0</from><to>8</to><value>true</value></bold><font-size><from>0</from><to>8</to><value>20</value></font-size><color><from>0</from><to>8</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>82-1580225579483</coId><text>先编写一下刚才所说的性能问题，建立两个组件,一个父组件一个子组件，组件上由两个按钮，一个是小红，一个是志玲，点击哪个，那个就像我们走来了。在/src文件夹下，新建立一个Example7的文件夹，在文件夹下建立一个Example7.js文件.然后先写第一个父组件。</text><inline-styles><font-family><from>70</from><to>74</to><value>monospace</value></font-family><font-family><from>84</from><to>92</to><value>monospace</value></font-family><font-family><from>106</from><to>117</to><value>monospace</value></font-family><font-size><from>0</from><to>70</to><value>16</value></font-size><font-size><from>70</from><to>74</to><value>13</value></font-size><font-size><from>74</from><to>84</to><value>16</value></font-size><font-size><from>84</from><to>92</to><value>13</value></font-size><font-size><from>92</from><to>106</to><value>16</value></font-size><font-size><from>106</from><to>117</to><value>13</value></font-size><font-size><from>117</from><to>131</to><value>16</value></font-size><color><from>0</from><to>70</to><value>#777777</value></color><color><from>70</from><to>74</to><value>#ff502c</value></color><color><from>74</from><to>84</to><value>#777777</value></color><color><from>84</from><to>92</to><value>#ff502c</value></color><color><from>92</from><to>106</to><value>#777777</value></color><color><from>106</from><to>117</to><value>#ff502c</value></color><color><from>117</from><to>131</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8857-1580384847245</coId><text>import React , {useState,useMemo} from 'react';

function Example7(){
    const [xiaohong , setXiaohong] = useState('小红待客状态')
    const [zhiling , setZhiling] = useState('志玲待客状态')
    return (
        &lt;&gt;
            &lt;button onClick={()=&gt;{setXiaohong(new Date().getTime())}}&gt;小红&lt;/button&gt;
            &lt;button onClick={()=&gt;{setZhiling(new Date().getTime()+',志玲向我们走来了')}}&gt;志玲&lt;/button&gt;
            &lt;ChildComponent name={xiaohong}&gt;{zhiling}&lt;/ChildComponent&gt;
        &lt;/&gt;
    )
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>44-1580225579492</coId><text>父组件调用了子组件，子组件我们输出两个姑娘的状态，显示在界面上。代码如下：</text><inline-styles><font-size><from>0</from><to>37</to><value>16</value></font-size><color><from>0</from><to>37</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>2948-1580384926281</coId><text>function ChildComponent({name,children}){
    function changeXiaohong(name){
        console.log('她来了，她来了。小红向我们走来了')
        return name+',小红向我们走来了'
    }

    const actionXiaohong = changeXiaohong(name)
    return (
        &lt;&gt;
            &lt;div&gt;{actionXiaohong}&lt;/div&gt;
            &lt;div&gt;{children}&lt;/div&gt;
        &lt;/&gt;
    )
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>52-1580225579499</coId><text>然后再导出父组件，让index.js可以渲染。</text><inline-styles><font-family><from>10</from><to>18</to><value>monospace</value></font-family><font-size><from>0</from><to>10</to><value>16</value></font-size><font-size><from>10</from><to>18</to><value>13</value></font-size><font-size><from>18</from><to>23</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#777777</value></color><color><from>10</from><to>18</to><value>#ff502c</value></color><color><from>18</from><to>23</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>3042-1580384989602</coId><text>export default Example7
</text><inline-styles><font-family><from>0</from><to>23</to><value>monospace</value></font-family><font-size><from>0</from><to>23</to><value>13</value></font-size><color><from>0</from><to>15</to><value>#e6db74</value></color><color><from>15</from><to>23</to><value>#cccccc</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>06-1580225579501</coId><text>这时候你会发现在浏览器中点击志玲按钮，小红对应的方法都会执行，结果虽然没变，但是每次都执行，这就是性能的损耗。目前只有子组件，业务逻辑也非常简单，如果是一个后台查询，这将产生严重的后果。所以这个问题必须解决。当我们点击志玲按钮时，小红对应的changeXiaohong方法不能执行，只有在点击小红按钮时才能执行。</text><inline-styles><font-family><from>14</from><to>16</to><value>monospace</value></font-family><font-family><from>109</from><to>111</to><value>monospace</value></font-family><font-family><from>120</from><to>134</to><value>monospace</value></font-family><font-family><from>146</from><to>148</to><value>monospace</value></font-family><font-size><from>0</from><to>14</to><value>16</value></font-size><font-size><from>14</from><to>16</to><value>13</value></font-size><font-size><from>16</from><to>109</to><value>16</value></font-size><font-size><from>109</from><to>111</to><value>13</value></font-size><font-size><from>111</from><to>120</to><value>16</value></font-size><font-size><from>120</from><to>134</to><value>13</value></font-size><font-size><from>134</from><to>146</to><value>16</value></font-size><font-size><from>146</from><to>148</to><value>13</value></font-size><font-size><from>148</from><to>156</to><value>16</value></font-size><color><from>0</from><to>14</to><value>#777777</value></color><color><from>14</from><to>16</to><value>#ff502c</value></color><color><from>16</from><to>109</to><value>#777777</value></color><color><from>109</from><to>111</to><value>#ff502c</value></color><color><from>111</from><to>120</to><value>#777777</value></color><color><from>120</from><to>134</to><value>#ff502c</value></color><color><from>134</from><to>146</to><value>#777777</value></color><color><from>146</from><to>148</to><value>#ff502c</value></color><color><from>148</from><to>156</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>62-1580225579502</coId><text>useMemo 优化性能</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>12</to><value>20</value></font-size><color><from>0</from><to>12</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>38-1580225579503</coId><text>其实只要使用useMemo，然后给她传递第二个参数，参数匹配成功，才会执行。代码如下：</text><inline-styles><font-family><from>6</from><to>13</to><value>monospace</value></font-family><font-size><from>0</from><to>6</to><value>16</value></font-size><font-size><from>6</from><to>13</to><value>13</value></font-size><font-size><from>13</from><to>43</to><value>16</value></font-size><color><from>0</from><to>6</to><value>#777777</value></color><color><from>6</from><to>13</to><value>#ff502c</value></color><color><from>13</from><to>43</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>2310-1580385047064</coId><text>function ChildComponent({name,children}){
    function changeXiaohong(name){
        console.log('她来了，她来了。小红向我们走来了')
        return name+',小红向我们走来了'
    }

    const actionXiaohong = useMemo(()=&gt;changeXiaohong(name),[name]) 
    return (
        &lt;&gt;
            &lt;div&gt;{actionXiaohong}&lt;/div&gt;
            &lt;div&gt;{children}&lt;/div&gt;
        &lt;/&gt;
    )
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>45-1580225579510</coId><text>这时在浏览器中点击一下志玲按钮，changeXiaohong就不再执行了。也节省了性能的消耗。案例只是让你更好理解，你还要从程序本身看到优化的作用。好的程序员对自己写的程序都是会进行不断优化的，这种没必要的性能浪费也是绝对不允许的，所以useMemo的使用在工作中还是比较多的。希望小伙伴们可以掌握。</text><inline-styles><font-family><from>11</from><to>13</to><value>monospace</value></font-family><font-family><from>16</from><to>30</to><value>monospace</value></font-family><font-family><from>118</from><to>125</to><value>monospace</value></font-family><font-size><from>0</from><to>11</to><value>16</value></font-size><font-size><from>11</from><to>13</to><value>13</value></font-size><font-size><from>13</from><to>16</to><value>16</value></font-size><font-size><from>16</from><to>30</to><value>13</value></font-size><font-size><from>30</from><to>118</to><value>16</value></font-size><font-size><from>118</from><to>125</to><value>13</value></font-size><font-size><from>125</from><to>150</to><value>16</value></font-size><color><from>0</from><to>11</to><value>#777777</value></color><color><from>11</from><to>13</to><value>#ff502c</value></color><color><from>13</from><to>16</to><value>#777777</value></color><color><from>16</from><to>30</to><value>#ff502c</value></color><color><from>30</from><to>118</to><value>#777777</value></color><color><from>118</from><to>125</to><value>#ff502c</value></color><color><from>125</from><to>150</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>79-1580225579511</coId><text>P10:useRef获取DOM元素和保存变量</text><inline-styles><bold><from>0</from><to>22</to><value>true</value></bold><font-size><from>0</from><to>22</to><value>20</value></font-size><color><from>0</from><to>22</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>40-1580225579512</coId><text>useRef在工作中虽然用的不多，但是也不能缺少。它有两个主要的作用:</text><inline-styles><font-family><from>0</from><to>6</to><value>monospace</value></font-family><font-size><from>0</from><to>6</to><value>13</value></font-size><font-size><from>6</from><to>35</to><value>16</value></font-size><color><from>0</from><to>6</to><value>#ff502c</value></color><color><from>6</from><to>35</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><list-item level="1" list-id="15-1580225579512"><coId>10-1580225579513</coId><text>用useRef获取React JSX中的DOM元素，获取后你就可以控制DOM的任何东西了。但是一般不建议这样来作，React界面的变化可以通过状态来控制。</text><inline-styles><font-family><from>1</from><to>7</to><value>monospace</value></font-family><font-size><from>0</from><to>1</to><value>16</value></font-size><font-size><from>1</from><to>7</to><value>13</value></font-size><font-size><from>7</from><to>77</to><value>16</value></font-size><color><from>0</from><to>1</to><value>#777777</value></color><color><from>1</from><to>7</to><value>#ff502c</value></color><color><from>7</from><to>77</to><value>#777777</value></color></inline-styles><styles/></list-item><list-item level="1" list-id="15-1580225579512"><coId>15-1580225579515</coId><text>用useRef来保存变量，这个在工作中也很少能用到，我们有了useContext这样的保存其实意义不大，但是这是学习，也要把这个特性讲一下。</text><inline-styles><font-family><from>1</from><to>7</to><value>monospace</value></font-family><font-family><from>30</from><to>40</to><value>monospace</value></font-family><font-size><from>0</from><to>1</to><value>16</value></font-size><font-size><from>1</from><to>7</to><value>13</value></font-size><font-size><from>7</from><to>30</to><value>16</value></font-size><font-size><from>30</from><to>40</to><value>13</value></font-size><font-size><from>40</from><to>70</to><value>16</value></font-size><color><from>0</from><to>1</to><value>#777777</value></color><color><from>1</from><to>7</to><value>#ff502c</value></color><color><from>7</from><to>30</to><value>#777777</value></color><color><from>30</from><to>40</to><value>#ff502c</value></color><color><from>40</from><to>70</to><value>#777777</value></color></inline-styles><styles/></list-item><para><coId>30-1580225579515</coId><text>useRef获取DOM元素</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><font-size><from>0</from><to>13</to><value>20</value></font-size><color><from>0</from><to>13</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>45-1580225579516</coId><text>界面上有一个文本框，在文本框的旁边有一个按钮，当我们点击按钮时，在控制台打印出input的DOM元素，并进行复制到DOM中的value上。这一切都是通过useRef来实现。</text><inline-styles><font-family><from>39</from><to>44</to><value>monospace</value></font-family><font-family><from>76</from><to>82</to><value>monospace</value></font-family><font-size><from>0</from><to>39</to><value>16</value></font-size><font-size><from>39</from><to>44</to><value>13</value></font-size><font-size><from>44</from><to>76</to><value>16</value></font-size><font-size><from>76</from><to>82</to><value>13</value></font-size><font-size><from>82</from><to>86</to><value>16</value></font-size><color><from>0</from><to>39</to><value>#777777</value></color><color><from>39</from><to>44</to><value>#ff502c</value></color><color><from>44</from><to>76</to><value>#777777</value></color><color><from>76</from><to>82</to><value>#ff502c</value></color><color><from>82</from><to>86</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>19-1580225579517</coId><text>在/src文件夹下新建一个Example8.js文件，然后先引入useRef，编写业务逻辑代码如下:</text><inline-styles><font-family><from>1</from><to>5</to><value>monospace</value></font-family><font-family><from>13</from><to>24</to><value>monospace</value></font-family><font-size><from>0</from><to>1</to><value>16</value></font-size><font-size><from>1</from><to>5</to><value>13</value></font-size><font-size><from>5</from><to>13</to><value>16</value></font-size><font-size><from>13</from><to>24</to><value>13</value></font-size><font-size><from>24</from><to>50</to><value>16</value></font-size><color><from>0</from><to>1</to><value>#777777</value></color><color><from>1</from><to>5</to><value>#ff502c</value></color><color><from>5</from><to>13</to><value>#777777</value></color><color><from>13</from><to>24</to><value>#ff502c</value></color><color><from>24</from><to>50</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>4081-1580385248599</coId><text>import React, { useRef} from 'react';
function Example8(){
    const inputEl = useRef(null)
    const onButtonClick=()=&gt;{ 
        inputEl.current.value="Hello ,JSPang"
        console.log(inputEl) //输出获取到的DOM节点
    }
    return (
        &lt;&gt;
            {/*保存input的ref到inputEl */}
            &lt;input ref={inputEl} type="text"/&gt;
            &lt;button onClick = {onButtonClick}&gt;在input上展示文字&lt;/button&gt;
        &lt;/&gt;
    )
}
export default Example8
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>12-1580225579523</coId><text>当点击按钮时，你可以看到在浏览器中的控制台完整的打印出了DOM的所有东西，并且界面上的框的value值也输出了我们写好的Hello ,JSPang。这一切说明我们可以使用useRef获取DOM元素，并且可以通过useRefu控制DOM的属性和值。</text><inline-styles><font-family><from>60</from><to>73</to><value>monospace</value></font-family><font-size><from>0</from><to>60</to><value>16</value></font-size><font-size><from>60</from><to>73</to><value>13</value></font-size><font-size><from>73</from><to>123</to><value>16</value></font-size><color><from>0</from><to>60</to><value>#777777</value></color><color><from>60</from><to>73</to><value>#ff502c</value></color><color><from>73</from><to>123</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>34-1580225579524</coId><text>useRef保存普通变量</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>12</to><value>20</value></font-size><color><from>0</from><to>12</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>89-1580225579525</coId><text>这个操作在实际开发中用的并不多，但我们还是要讲解一下。就是useRef可以保存React中的变量。我们这里就写一个文本框，文本框用来改变text状态。又用useRef把text状态进行保存，最后打印在控制台上。写这段代码你会觉的很绕，其实显示开发中没必要这样写，用一个state状态就可以搞定，这里只是为了展示知识点。</text><inline-styles><font-family><from>29</from><to>35</to><value>monospace</value></font-family><font-family><from>68</from><to>72</to><value>monospace</value></font-family><font-family><from>77</from><to>83</to><value>monospace</value></font-family><font-family><from>84</from><to>88</to><value>monospace</value></font-family><font-size><from>0</from><to>29</to><value>16</value></font-size><font-size><from>29</from><to>35</to><value>13</value></font-size><font-size><from>35</from><to>68</to><value>16</value></font-size><font-size><from>68</from><to>72</to><value>13</value></font-size><font-size><from>72</from><to>77</to><value>16</value></font-size><font-size><from>77</from><to>83</to><value>13</value></font-size><font-size><from>83</from><to>84</to><value>16</value></font-size><font-size><from>84</from><to>88</to><value>13</value></font-size><font-size><from>88</from><to>159</to><value>16</value></font-size><color><from>0</from><to>29</to><value>#777777</value></color><color><from>29</from><to>35</to><value>#ff502c</value></color><color><from>35</from><to>68</to><value>#777777</value></color><color><from>68</from><to>72</to><value>#ff502c</value></color><color><from>72</from><to>77</to><value>#777777</value></color><color><from>77</from><to>83</to><value>#ff502c</value></color><color><from>83</from><to>84</to><value>#777777</value></color><color><from>84</from><to>88</to><value>#ff502c</value></color><color><from>88</from><to>159</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>59-1580225579527</coId><text>接着上面的代码来写，就没必要重新写一个文件了。先用useState声明了一个text状态和setText函数。然后编写界面，界面就是一个文本框。然后输入的时候不断变化。</text><inline-styles><font-family><from>25</from><to>33</to><value>monospace</value></font-family><font-family><from>38</from><to>42</to><value>monospace</value></font-family><font-family><from>45</from><to>52</to><value>monospace</value></font-family><font-size><from>0</from><to>25</to><value>16</value></font-size><font-size><from>25</from><to>33</to><value>13</value></font-size><font-size><from>33</from><to>38</to><value>16</value></font-size><font-size><from>38</from><to>42</to><value>13</value></font-size><font-size><from>42</from><to>45</to><value>16</value></font-size><font-size><from>45</from><to>52</to><value>13</value></font-size><font-size><from>52</from><to>84</to><value>16</value></font-size><color><from>0</from><to>25</to><value>#777777</value></color><color><from>25</from><to>33</to><value>#ff502c</value></color><color><from>33</from><to>38</to><value>#777777</value></color><color><from>38</from><to>42</to><value>#ff502c</value></color><color><from>42</from><to>45</to><value>#777777</value></color><color><from>45</from><to>52</to><value>#ff502c</value></color><color><from>52</from><to>84</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>6711-1580385446779</coId><text>import React, { useRef ,useState,useEffect } from 'react';

function Example8(){
    const inputEl = useRef(null)
    const onButtonClick=()=&gt;{ 
        inputEl.current.value="Hello ,useRef"
        console.log(inputEl)
    }
    const [text, setText] = useState('jspang')
    return (
        &lt;&gt;
            {/*保存input的ref到inputEl */}
            &lt;input ref={inputEl} type="text"/&gt;
            &lt;button onClick = {onButtonClick}&gt;在input上展示文字&lt;/button&gt;
            &lt;br/&gt;
            &lt;br/&gt;
            &lt;input value={text} onChange={(e)=&gt;{setText(e.target.value)}} /&gt;

        &lt;/&gt;
    )
}

export default Example8
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>20-1580225579536</coId><text>这时想每次text发生状态改变，保存到一个变量中或者说是useRef中，这时候就可以使用useRef了。先声明一个textRef变量，他其实就是useRef函数。然后使用useEffect函数实现每次状态变化都进行变量修改，并打印。最后的全部代码如下。</text><inline-styles><font-family><from>5</from><to>9</to><value>monospace</value></font-family><font-family><from>28</from><to>34</to><value>monospace</value></font-family><font-family><from>44</from><to>50</to><value>monospace</value></font-family><font-family><from>57</from><to>64</to><value>monospace</value></font-family><font-family><from>72</from><to>78</to><value>monospace</value></font-family><font-family><from>85</from><to>94</to><value>monospace</value></font-family><font-size><from>0</from><to>5</to><value>16</value></font-size><font-size><from>5</from><to>9</to><value>13</value></font-size><font-size><from>9</from><to>28</to><value>16</value></font-size><font-size><from>28</from><to>34</to><value>13</value></font-size><font-size><from>34</from><to>44</to><value>16</value></font-size><font-size><from>44</from><to>50</to><value>13</value></font-size><font-size><from>50</from><to>57</to><value>16</value></font-size><font-size><from>57</from><to>64</to><value>13</value></font-size><font-size><from>64</from><to>72</to><value>16</value></font-size><font-size><from>72</from><to>78</to><value>13</value></font-size><font-size><from>78</from><to>85</to><value>16</value></font-size><font-size><from>85</from><to>94</to><value>13</value></font-size><font-size><from>94</from><to>126</to><value>16</value></font-size><color><from>0</from><to>5</to><value>#777777</value></color><color><from>5</from><to>9</to><value>#ff502c</value></color><color><from>9</from><to>28</to><value>#777777</value></color><color><from>28</from><to>34</to><value>#ff502c</value></color><color><from>34</from><to>44</to><value>#777777</value></color><color><from>44</from><to>50</to><value>#ff502c</value></color><color><from>50</from><to>57</to><value>#777777</value></color><color><from>57</from><to>64</to><value>#ff502c</value></color><color><from>64</from><to>72</to><value>#777777</value></color><color><from>72</from><to>78</to><value>#ff502c</value></color><color><from>78</from><to>85</to><value>#777777</value></color><color><from>85</from><to>94</to><value>#ff502c</value></color><color><from>94</from><to>126</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9029-1580385461094</coId><text>import React, { useRef ,useState,useEffect } from 'react';
function Example8(){
    const inputEl = useRef(null)
    const onButtonClick=()=&gt;{ 
        inputEl.current.value="Hello ,useRef"
        console.log(inputEl)
    }
    //-----------关键代码--------start
    const [text, setText] = useState('jspang')
    const textRef = useRef()

    useEffect(()=&gt;{
        textRef.current = text;
        console.log('textRef.current:', textRef.current)
    })
    //----------关键代码--------------end
    return (
        &lt;&gt;
            {/*保存input的ref到inputEl */}
            &lt;input ref={inputEl} type="text"/&gt;
            &lt;button onClick = {onButtonClick}&gt;在input上展示文字&lt;/button&gt;
            &lt;br/&gt;
            &lt;br/&gt;
            &lt;input value={text} onChange={(e)=&gt;{setText(e.target.value)}} /&gt;
        &lt;/&gt;
    )
}

export default Example8
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>51-1580225579547</coId><text>这时候就可以实现每次状态修改，同时保存到useRef中了。也就是我们说的保存变量的功能。那useRef的主要功能就是获得DOM和变量保存，我们都已经讲过了。你的编码能力有增加了一些，让我们一起加油。</text><inline-styles><font-family><from>20</from><to>26</to><value>monospace</value></font-family><font-family><from>45</from><to>51</to><value>monospace</value></font-family><font-size><from>0</from><to>20</to><value>16</value></font-size><font-size><from>20</from><to>26</to><value>13</value></font-size><font-size><from>26</from><to>45</to><value>16</value></font-size><font-size><from>45</from><to>51</to><value>13</value></font-size><font-size><from>51</from><to>99</to><value>16</value></font-size><color><from>0</from><to>20</to><value>#777777</value></color><color><from>20</from><to>26</to><value>#ff502c</value></color><color><from>26</from><to>45</to><value>#777777</value></color><color><from>45</from><to>51</to><value>#ff502c</value></color><color><from>51</from><to>99</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>64-1580225579548</coId><text>P11: 自定义Hooks函数获取窗口大小</text><inline-styles><bold><from>0</from><to>21</to><value>true</value></bold><font-size><from>0</from><to>21</to><value>20</value></font-size><color><from>0</from><to>21</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>15-1580225579548</coId><text>其实自定义Hooks函数和用Hooks创建组件很相似，跟我们平时用JavaScript写函数几乎一模一样，可能就是多了些React Hooks的特性，自定义Hooks函数偏向于功能，而组件偏向于界面和业务逻辑。由于差别不大，所以使用起来也是很随意的。如果是小型项目是可以的，但是如果项目足够复杂，这会让项目结构不够清晰。所以学习自定义Hooks函数还是很有必要的。</text><inline-styles><font-family><from>60</from><to>71</to><value>monospace</value></font-family><font-size><from>0</from><to>60</to><value>16</value></font-size><font-size><from>60</from><to>71</to><value>13</value></font-size><font-size><from>71</from><to>182</to><value>16</value></font-size><color><from>0</from><to>60</to><value>#777777</value></color><color><from>60</from><to>71</to><value>#ff502c</value></color><color><from>71</from><to>182</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>85-1580225579550</coId><text>编写自定义函数</text><inline-styles><bold><from>0</from><to>7</to><value>true</value></bold><font-size><from>0</from><to>7</to><value>20</value></font-size><color><from>0</from><to>7</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>01-1580225579550</coId><text>在实际开发中，为了界面更加美观。获取浏览器窗口的尺寸是一个经常使用的功能，这样经常使用的功能，就可以封装成一个自定义Hooks函数，记住一定要用use开头，这样才能区分出什么是组件，什么是自定义函数。</text><inline-styles><font-family><from>58</from><to>63</to><value>monospace</value></font-family><font-size><from>0</from><to>58</to><value>16</value></font-size><font-size><from>58</from><to>63</to><value>13</value></font-size><font-size><from>63</from><to>100</to><value>16</value></font-size><color><from>0</from><to>58</to><value>#777777</value></color><color><from>58</from><to>63</to><value>#ff502c</value></color><color><from>63</from><to>100</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>20-1580225579552</coId><text>新建一个文件Example9.js,然后编写一个useWinSize,编写时我们会用到useState、useEffect和useCallback所以先用import进行引入。</text><inline-styles><font-family><from>6</from><to>17</to><value>monospace</value></font-family><font-family><from>43</from><to>51</to><value>monospace</value></font-family><font-family><from>52</from><to>61</to><value>monospace</value></font-family><font-family><from>62</from><to>73</to><value>monospace</value></font-family><font-family><from>77</from><to>83</to><value>monospace</value></font-family><font-size><from>0</from><to>6</to><value>16</value></font-size><font-size><from>6</from><to>17</to><value>13</value></font-size><font-size><from>17</from><to>43</to><value>16</value></font-size><font-size><from>43</from><to>51</to><value>13</value></font-size><font-size><from>51</from><to>52</to><value>16</value></font-size><font-size><from>52</from><to>61</to><value>13</value></font-size><font-size><from>61</from><to>62</to><value>16</value></font-size><font-size><from>62</from><to>73</to><value>13</value></font-size><font-size><from>73</from><to>77</to><value>16</value></font-size><font-size><from>77</from><to>83</to><value>13</value></font-size><font-size><from>83</from><to>88</to><value>16</value></font-size><color><from>0</from><to>6</to><value>#777777</value></color><color><from>6</from><to>17</to><value>#ff502c</value></color><color><from>17</from><to>43</to><value>#777777</value></color><color><from>43</from><to>51</to><value>#ff502c</value></color><color><from>51</from><to>52</to><value>#777777</value></color><color><from>52</from><to>61</to><value>#ff502c</value></color><color><from>61</from><to>62</to><value>#777777</value></color><color><from>62</from><to>73</to><value>#ff502c</value></color><color><from>73</from><to>77</to><value>#777777</value></color><color><from>77</from><to>83</to><value>#ff502c</value></color><color><from>83</from><to>88</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>6374-1580385726641</coId><text>import React, { useState ,useEffect ,useCallback } from'react';
</text><inline-styles><font-family><from>0</from><to>63</to><value>monospace</value></font-family><font-size><from>0</from><to>63</to><value>13</value></font-size><color><from>0</from><to>6</to><value>#f92672</value></color><color><from>6</from><to>51</to><value>#cccccc</value></color><color><from>51</from><to>55</to><value>#f92672</value></color><color><from>55</from><to>62</to><value>#e6db74</value></color><color><from>62</from><to>63</to><value>#cccccc</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>98-1580225579554</coId><text>然后编写函数，函数中先用useState设置size状态，然后编写一个每次修改状态的方法onResize，这个方法使用useCallback，目的是为了缓存方法(useMemo是为了缓存变量)。然后在第一次进入方法时用useEffect来注册resize监听时间。为了防止一直监听所以在方法移除时，使用return的方式移除监听。最后返回size变量就可以了。</text><inline-styles><font-family><from>22</from><to>26</to><value>monospace</value></font-family><font-family><from>44</from><to>52</to><value>monospace</value></font-family><font-family><from>59</from><to>70</to><value>monospace</value></font-family><font-family><from>109</from><to>118</to><value>monospace</value></font-family><font-family><from>121</from><to>127</to><value>monospace</value></font-family><font-size><from>0</from><to>22</to><value>16</value></font-size><font-size><from>22</from><to>26</to><value>13</value></font-size><font-size><from>26</from><to>44</to><value>16</value></font-size><font-size><from>44</from><to>52</to><value>13</value></font-size><font-size><from>52</from><to>59</to><value>16</value></font-size><font-size><from>59</from><to>70</to><value>13</value></font-size><font-size><from>70</from><to>109</to><value>16</value></font-size><font-size><from>109</from><to>118</to><value>13</value></font-size><font-size><from>118</from><to>121</to><value>16</value></font-size><font-size><from>121</from><to>127</to><value>13</value></font-size><font-size><from>127</from><to>180</to><value>16</value></font-size><color><from>0</from><to>22</to><value>#777777</value></color><color><from>22</from><to>26</to><value>#ff502c</value></color><color><from>26</from><to>44</to><value>#777777</value></color><color><from>44</from><to>52</to><value>#ff502c</value></color><color><from>52</from><to>59</to><value>#777777</value></color><color><from>59</from><to>70</to><value>#ff502c</value></color><color><from>70</from><to>109</to><value>#777777</value></color><color><from>109</from><to>118</to><value>#ff502c</value></color><color><from>118</from><to>121</to><value>#777777</value></color><color><from>121</from><to>127</to><value>#ff502c</value></color><color><from>127</from><to>180</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>3293-1580385767970</coId><text>function useWinSize(){
    const [ size , setSize] = useState({
        width:document.documentElement.clientWidth,
        height:document.documentElement.clientHeight
    })

    const onResize = useCallback(()=&gt;{
        setSize({
            width: document.documentElement.clientWidth,
            height: document.documentElement.clientHeight
        })
    },[]) 
    useEffect(()=&gt;{
        window.addEventListener('resize',onResize)
        return ()=&gt;{
            window.removeEventListener('resize',onResize)
        }
    },[])

    return size;

}functionuseWinSize(){    const [ size , setSize] = useState({        width:document.documentElement.clientWidth,        height:document.documentElement.clientHeight    })    const onResize = useCallback(()=&gt;{        setSize({            width: document.documentElement.clientWidth,            height: document.documentElement.clientHeight        })    },[])     useEffect(()=&gt;{        window.addEventListener('resize',onResize)        return()=&gt;{            window.removeEventListener('resize',onResize)        }    },[])    return size;}
</text><inline-styles><font-family><from>561</from><to>1099</to><value>monospace</value></font-family><font-size><from>561</from><to>1099</to><value>13</value></font-size><color><from>561</from><to>569</to><value>#f92672</value></color><color><from>569</from><to>579</to><value>#a6e22e</value></color><color><from>579</from><to>586</to><value>#cccccc</value></color><color><from>586</from><to>591</to><value>#f92672</value></color><color><from>591</from><to>630</to><value>#cccccc</value></color><color><from>630</from><to>635</to><value>#f92672</value></color><color><from>635</from><to>636</to><value>#cccccc</value></color><color><from>636</from><to>644</to><value>#e6db74</value></color><color><from>644</from><to>681</to><value>#cccccc</value></color><color><from>681</from><to>687</to><value>#f92672</value></color><color><from>687</from><to>688</to><value>#cccccc</value></color><color><from>688</from><to>696</to><value>#e6db74</value></color><color><from>696</from><to>735</to><value>#cccccc</value></color><color><from>735</from><to>740</to><value>#f92672</value></color><color><from>740</from><to>764</to><value>#cccccc</value></color><color><from>764</from><to>766</to><value>#f8f8f2</value></color><color><from>766</from><to>798</to><value>#cccccc</value></color><color><from>798</from><to>803</to><value>#f92672</value></color><color><from>803</from><to>805</to><value>#cccccc</value></color><color><from>805</from><to>813</to><value>#e6db74</value></color><color><from>813</from><to>854</to><value>#cccccc</value></color><color><from>854</from><to>860</to><value>#f92672</value></color><color><from>860</from><to>862</to><value>#cccccc</value></color><color><from>862</from><to>870</to><value>#e6db74</value></color><color><from>870</from><to>933</to><value>#cccccc</value></color><color><from>933</from><to>935</to><value>#f8f8f2</value></color><color><from>935</from><to>946</to><value>#cccccc</value></color><color><from>946</from><to>952</to><value>#e6db74</value></color><color><from>952</from><to>970</to><value>#cccccc</value></color><color><from>970</from><to>978</to><value>#e6db74</value></color><color><from>978</from><to>996</to><value>#cccccc</value></color><color><from>996</from><to>1002</to><value>#f92672</value></color><color><from>1002</from><to>1004</to><value>#f8f8f2</value></color><color><from>1004</from><to>1019</to><value>#cccccc</value></color><color><from>1019</from><to>1025</to><value>#e6db74</value></color><color><from>1025</from><to>1046</to><value>#cccccc</value></color><color><from>1046</from><to>1054</to><value>#e6db74</value></color><color><from>1054</from><to>1086</to><value>#cccccc</value></color><color><from>1086</from><to>1092</to><value>#f92672</value></color><color><from>1092</from><to>1099</to><value>#cccccc</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>75-1580225579564</coId><text>这就是一个自定义函数，其实和我们以前写的JS函数没什么区别，所以这里也不做太多的介绍。</text><inline-styles><font-size><from>0</from><to>43</to><value>16</value></font-size><color><from>0</from><to>43</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>54-1580225579564</coId><text>编写组件并使用自定义函数</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>12</to><value>20</value></font-size><color><from>0</from><to>12</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>14-1580225579565</coId><text>自定义Hooks函数已经写好了，可以直接进行使用，用法和JavaScript的普通函数用起来是一样的。直接在Example9组件使用useWinSize并把结果实时展示在页面上。</text><inline-styles><font-family><from>3</from><to>8</to><value>monospace</value></font-family><font-family><from>28</from><to>38</to><value>monospace</value></font-family><font-family><from>54</from><to>62</to><value>monospace</value></font-family><font-family><from>66</from><to>76</to><value>monospace</value></font-family><font-size><from>0</from><to>3</to><value>16</value></font-size><font-size><from>3</from><to>8</to><value>13</value></font-size><font-size><from>8</from><to>28</to><value>16</value></font-size><font-size><from>28</from><to>38</to><value>13</value></font-size><font-size><from>38</from><to>54</to><value>16</value></font-size><font-size><from>54</from><to>62</to><value>13</value></font-size><font-size><from>62</from><to>66</to><value>16</value></font-size><font-size><from>66</from><to>76</to><value>13</value></font-size><font-size><from>76</from><to>89</to><value>16</value></font-size><color><from>0</from><to>3</to><value>#777777</value></color><color><from>3</from><to>8</to><value>#ff502c</value></color><color><from>8</from><to>28</to><value>#777777</value></color><color><from>28</from><to>38</to><value>#ff502c</value></color><color><from>38</from><to>54</to><value>#777777</value></color><color><from>54</from><to>62</to><value>#ff502c</value></color><color><from>62</from><to>66</to><value>#777777</value></color><color><from>66</from><to>76</to><value>#ff502c</value></color><color><from>76</from><to>89</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5312-1580385783072</coId><text>function Example9(){

    const size = useWinSize()
    return (
        &lt;div&gt;页面Size:{size.width}x{size.height}&lt;/div&gt;
    )
}

export default Example9 
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>11-1580225579569</coId><text>之后就可以在浏览器中预览一下结果，可以看到当我们放大缩小浏览器窗口时，页面上的结果都会跟着进行变化。说明自定义的函数起到了作用。</text><inline-styles><font-size><from>0</from><to>64</to><value>16</value></font-size><color><from>0</from><to>64</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para></body></note>