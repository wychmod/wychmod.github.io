<?xml version="1.0" encoding="UTF-8" standalone="no"?><note xmlns="http://note.youdao.com" file-version="0" schema-version="1.0.3"><head><list id="35-1580225555178" type="unordered"/><list id="41-1580225555223" type="unordered"/></head><body><para><coId>61-1580225555163</coId><text>p01：Next.js简介和创建项目</text><inline-styles><bold><from>0</from><to>18</to><value>true</value></bold><font-size><from>0</from><to>18</to><value>20</value></font-size><color><from>0</from><to>18</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>48-1580225555177</coId><text>Next.js简介</text><inline-styles><bold><from>0</from><to>9</to><value>true</value></bold><font-size><from>0</from><to>9</to><value>20</value></font-size><color><from>0</from><to>9</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>06-1580225555177</coId><text>Next.js 是一个轻量级的 React 服务端渲染应用框架。</text><inline-styles><font-size><from>0</from><to>32</to><value>16</value></font-size><color><from>0</from><to>32</to><value>#777777</value></color></inline-styles><styles><indent>1</indent><font-size>16</font-size></styles></para><para><coId>09-1580225555178</coId><text>用一个框架，就要知道它的优点（或者是解决了我们什么问题）:</text><inline-styles><font-size><from>0</from><to>29</to><value>16</value></font-size><color><from>0</from><to>29</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><list-item level="1" list-id="35-1580225555178"><coId>68-1580225555179</coId><text>完善的React项目架构，搭建轻松。比如：Webpack配置，服务器启动，路由配置，缓存能力，这些在它内部已经完善的为我们搭建完成了。</text><inline-styles><font-size><from>0</from><to>67</to><value>16</value></font-size><color><from>0</from><to>67</to><value>#777777</value></color></inline-styles><styles/></list-item><list-item level="1" list-id="35-1580225555178"><coId>17-1580225555181</coId><text>自带数据同步策略，解决服务端渲染最大难点。把服务端渲染好的数据，拿到客户端重用，这个在没有框架的时候，是非常复杂和困难的。有了Next.js，它为我们提供了非常好的解决方法，让我们轻松的就可以实现这些步骤。</text><inline-styles><font-size><from>0</from><to>103</to><value>16</value></font-size><color><from>0</from><to>103</to><value>#777777</value></color></inline-styles><styles/></list-item><list-item level="1" list-id="35-1580225555178"><coId>82-1580225555183</coId><text>丰富的插件帮开发人员增加各种功能。每个项目的需求都是不一样的，包罗万象。无所不有，它为我们提供了插件机制，让我们可以在使用的时候按需使用。你也可以自己写一个插件，让别人来使用。</text><inline-styles><font-size><from>0</from><to>88</to><value>16</value></font-size><color><from>0</from><to>88</to><value>#777777</value></color></inline-styles><styles/></list-item><list-item level="1" list-id="35-1580225555178"><coId>94-1580225555184</coId><text>灵活的配置，让开发变的更简单。它提供很多灵活的配置项，可以根据项目要求的不同快速灵活的进行配置。</text><inline-styles><font-size><from>0</from><to>48</to><value>16</value></font-size><color><from>0</from><to>48</to><value>#777777</value></color></inline-styles><styles/></list-item><para><coId>45-1580225555185</coId><text>目前Next.js是React服务端渲染的最佳解决方案，所以如果你想使用React来开发需要SEO的应用，基本上就要使用Next.js。</text><inline-styles><font-size><from>0</from><to>68</to><value>16</value></font-size><color><from>0</from><to>68</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>95-1580225555185</coId><text>手动创建Next.js项目</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><font-size><from>0</from><to>13</to><value>20</value></font-size><color><from>0</from><to>13</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>23-1580225555186</coId><text>第一步： 建立文件夹</text><inline-styles><bold><from>0</from><to>10</to><value>true</value></bold><font-size><from>0</from><to>10</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>02-1580225555187</coId><text>创建一个Next.js项目，可以有两种方法进行，一种是手动创建，另一种是用create-next-app（脚手架）来创建。这节课我们先来进行手动创建，这样虽然麻烦点，但是可以更容易让新手了解过程和原理。</text><inline-styles><font-family><from>4</from><to>11</to><value>monospace</value></font-family><font-family><from>37</from><to>52</to><value>monospace</value></font-family><font-size><from>0</from><to>4</to><value>16</value></font-size><font-size><from>4</from><to>11</to><value>13</value></font-size><font-size><from>11</from><to>37</to><value>16</value></font-size><font-size><from>37</from><to>52</to><value>13</value></font-size><font-size><from>52</from><to>101</to><value>16</value></font-size><color><from>0</from><to>4</to><value>#777777</value></color><color><from>4</from><to>11</to><value>#ff502c</value></color><color><from>11</from><to>37</to><value>#777777</value></color><color><from>37</from><to>52</to><value>#ff502c</value></color><color><from>52</from><to>101</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>96-1580225555188</coId><text>先在你喜欢的位置新建一个文件夹，名称你也可以自己起，我这里是在D盘里建立了一个叫NextDemo文件夹。</text><inline-styles><font-family><from>40</from><to>48</to><value>monospace</value></font-family><font-size><from>0</from><to>40</to><value>16</value></font-size><font-size><from>40</from><to>48</to><value>13</value></font-size><font-size><from>48</from><to>52</to><value>16</value></font-size><color><from>0</from><to>40</to><value>#777777</value></color><color><from>40</from><to>48</to><value>#ff502c</value></color><color><from>48</from><to>52</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9740-1580387221430</coId><text>D:
mkdir NextDemo
npm init
</text><inline-styles/><styles/><language>shell</language><theme>default</theme></code><para><coId>12-1580225555191</coId><text>这里的npm init 是用来把文件夹初始化成可管理的项目的，其实就是在根目录里给你添加了一个package.json的文件。</text><inline-styles><font-family><from>3</from><to>11</to><value>monospace</value></font-family><font-family><from>47</from><to>59</to><value>monospace</value></font-family><font-size><from>0</from><to>3</to><value>16</value></font-size><font-size><from>3</from><to>11</to><value>13</value></font-size><font-size><from>11</from><to>47</to><value>16</value></font-size><font-size><from>47</from><to>59</to><value>13</value></font-size><font-size><from>59</from><to>63</to><value>16</value></font-size><color><from>0</from><to>3</to><value>#777777</value></color><color><from>3</from><to>11</to><value>#ff502c</value></color><color><from>11</from><to>47</to><value>#777777</value></color><color><from>47</from><to>59</to><value>#ff502c</value></color><color><from>59</from><to>63</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>66-1580225555192</coId><text>第二步：安装所需要的依赖包</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><font-size><from>0</from><to>13</to><value>16</value></font-size><color><from>0</from><to>13</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>89-1580225555193</coId><text>接下来可以使用yarn来安装所需要的项目依赖包，先来安装下面三个react、react-dom和next。</text><inline-styles><font-family><from>32</from><to>37</to><value>monospace</value></font-family><font-family><from>38</from><to>47</to><value>monospace</value></font-family><font-family><from>48</from><to>52</to><value>monospace</value></font-family><font-size><from>0</from><to>32</to><value>16</value></font-size><font-size><from>32</from><to>37</to><value>13</value></font-size><font-size><from>37</from><to>38</to><value>16</value></font-size><font-size><from>38</from><to>47</to><value>13</value></font-size><font-size><from>47</from><to>48</to><value>16</value></font-size><font-size><from>48</from><to>52</to><value>13</value></font-size><font-size><from>52</from><to>53</to><value>16</value></font-size><color><from>0</from><to>32</to><value>#777777</value></color><color><from>32</from><to>37</to><value>#ff502c</value></color><color><from>37</from><to>38</to><value>#777777</value></color><color><from>38</from><to>47</to><value>#ff502c</value></color><color><from>47</from><to>48</to><value>#777777</value></color><color><from>48</from><to>52</to><value>#ff502c</value></color><color><from>52</from><to>53</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8311-1580387261164</coId><text>yarn add react react-dom next
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>31-1580225555195</coId><text>当让你也可以使用npm来进行安装，npm安装时记得要使用--save</text><inline-styles><font-size><from>0</from><to>34</to><value>16</value></font-size><color><from>0</from><to>34</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9732-1580387294129</coId><text>npm install --save react react-dom next
</text><inline-styles><font-family><from>0</from><to>39</to><value>monospace</value></font-family><font-size><from>0</from><to>39</to><value>13</value></font-size><color><from>0</from><to>14</to><value>#cccccc</value></color><color><from>14</from><to>18</to><value>#e6db74</value></color><color><from>18</from><to>35</to><value>#cccccc</value></color><color><from>35</from><to>39</to><value>#e6db74</value></color></inline-styles><styles/><language>shell</language><theme>default</theme></code><para><coId>63-1580225555197</coId><text>安装完可以打开package.json文件查看一下dependencies的版本。</text><inline-styles><font-family><from>7</from><to>19</to><value>monospace</value></font-family><font-family><from>25</from><to>37</to><value>monospace</value></font-family><font-size><from>0</from><to>7</to><value>16</value></font-size><font-size><from>7</from><to>19</to><value>13</value></font-size><font-size><from>19</from><to>25</to><value>16</value></font-size><font-size><from>25</from><to>37</to><value>13</value></font-size><font-size><from>37</from><to>41</to><value>16</value></font-size><color><from>0</from><to>7</to><value>#777777</value></color><color><from>7</from><to>19</to><value>#ff502c</value></color><color><from>19</from><to>25</to><value>#777777</value></color><color><from>25</from><to>37</to><value>#ff502c</value></color><color><from>37</from><to>41</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>86-1580225555198</coId><text>第三步：增加快捷命令</text><inline-styles><bold><from>0</from><to>10</to><value>true</value></bold><font-size><from>0</from><to>10</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>70-1580225555198</coId><text>为了开发时简便的使用Next.js中的操作命令行工具，所以把常用的配置到package.json中，代码如下：</text><inline-styles><font-family><from>36</from><to>48</to><value>monospace</value></font-family><font-size><from>0</from><to>36</to><value>16</value></font-size><font-size><from>36</from><to>48</to><value>13</value></font-size><font-size><from>48</from><to>55</to><value>16</value></font-size><color><from>0</from><to>36</to><value>#777777</value></color><color><from>36</from><to>48</to><value>#ff502c</value></color><color><from>48</from><to>55</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>3970-1580387337684</coId><text> "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",
    "dev" : "next" ,
    "build" : " next build",
    "start" : "next start"
  },
</text><inline-styles/><styles/><language>shell</language><theme>default</theme></code><para><coId>61-1580225555203</coId><text>第四步：创建pages文件夹和文件</text><inline-styles><bold><from>0</from><to>17</to><value>true</value></bold><font-size><from>0</from><to>17</to><value>16</value></font-size><color><from>0</from><to>17</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>02-1580225555204</coId><text>在根目录下，创建一个pages文件夹，这个文件夹是Next规定的，在这个文件夹下写入的文件，Next.js会自动创建对应的路由。有了文件夹以后，在文件下面创建一个index.js文件，这就是我们的首页了,然后用React Hooks的写法，写个最简单的Hello World。</text><inline-styles><font-family><from>10</from><to>15</to><value>monospace</value></font-family><font-family><from>81</from><to>89</to><value>monospace</value></font-family><font-family><from>105</from><to>116</to><value>monospace</value></font-family><font-family><from>126</from><to>137</to><value>monospace</value></font-family><font-size><from>0</from><to>10</to><value>16</value></font-size><font-size><from>10</from><to>15</to><value>13</value></font-size><font-size><from>15</from><to>81</to><value>16</value></font-size><font-size><from>81</from><to>89</to><value>13</value></font-size><font-size><from>89</from><to>105</to><value>16</value></font-size><font-size><from>105</from><to>116</to><value>13</value></font-size><font-size><from>116</from><to>126</to><value>16</value></font-size><font-size><from>126</from><to>137</to><value>13</value></font-size><font-size><from>137</from><to>138</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#777777</value></color><color><from>10</from><to>15</to><value>#ff502c</value></color><color><from>15</from><to>81</to><value>#777777</value></color><color><from>81</from><to>89</to><value>#ff502c</value></color><color><from>89</from><to>105</to><value>#777777</value></color><color><from>105</from><to>116</to><value>#ff502c</value></color><color><from>116</from><to>126</to><value>#777777</value></color><color><from>126</from><to>137</to><value>#ff502c</value></color><color><from>137</from><to>138</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8880-1580387494390</coId><text>function Index(){
    return (
        &lt;div&gt;Hello Next.js&lt;/div&gt;
    )
}
export default Index
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>58-1580225555209</coId><text>写好后在终端中使用yarn dev来打开预览，在浏览器中可以看到输出了正确的结果。这节课就到这里，你可以试着去联系一下这种Next.js项目的搭建方法，因为这会让我们更明白Next项目的来龙去脉。</text><inline-styles><font-family><from>9</from><to>17</to><value>monospace</value></font-family><font-size><from>0</from><to>9</to><value>16</value></font-size><font-size><from>9</from><to>17</to><value>13</value></font-size><font-size><from>17</from><to>98</to><value>16</value></font-size><color><from>0</from><to>9</to><value>#777777</value></color><color><from>9</from><to>17</to><value>#ff502c</value></color><color><from>17</from><to>98</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>21-1580225555210</coId><text>p02：creact-next-app快速创建Next.js项目</text><inline-styles><bold><from>0</from><to>32</to><value>true</value></bold><font-size><from>0</from><to>32</to><value>20</value></font-size><color><from>0</from><to>32</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>88-1580225555211</coId><text>create-next-app可以快速的创建Next.js项目，它就是一个脚手架，有了它只要一句命令就可以把项目需要的依赖包和基本目录都生成，工作中我基本不用手动的形式自己创建，全部使用create-next-app来创建。</text><inline-styles><font-family><from>0</from><to>15</to><value>monospace</value></font-family><font-family><from>22</from><to>29</to><value>monospace</value></font-family><font-family><from>93</from><to>108</to><value>monospace</value></font-family><font-size><from>0</from><to>15</to><value>13</value></font-size><font-size><from>15</from><to>22</to><value>16</value></font-size><font-size><from>22</from><to>29</to><value>13</value></font-size><font-size><from>29</from><to>93</to><value>16</value></font-size><font-size><from>93</from><to>108</to><value>13</value></font-size><font-size><from>108</from><to>112</to><value>16</value></font-size><color><from>0</from><to>15</to><value>#ff502c</value></color><color><from>15</from><to>22</to><value>#777777</value></color><color><from>22</from><to>29</to><value>#ff502c</value></color><color><from>29</from><to>93</to><value>#777777</value></color><color><from>93</from><to>108</to><value>#ff502c</value></color><color><from>108</from><to>112</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>52-1580225555212</coId><text>安装create-next-app</text><inline-styles><bold><from>0</from><to>17</to><value>true</value></bold><font-size><from>0</from><to>17</to><value>20</value></font-size><color><from>0</from><to>17</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>60-1580225555212</coId><text>使用脚手架前，需要先进行全局安装。</text><inline-styles><font-size><from>0</from><to>17</to><value>16</value></font-size><color><from>0</from><to>17</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1914-1580387613393</coId><text>npm install -g create-next-app
</text><inline-styles><font-family><from>0</from><to>30</to><value>monospace</value></font-family><font-size><from>0</from><to>30</to><value>13</value></font-size><color><from>0</from><to>4</to><value>#cccccc</value></color><color><from>4</from><to>11</to><value>#f92672</value></color><color><from>11</from><to>15</to><value>#cccccc</value></color><color><from>15</from><to>21</to><value>#f92672</value></color><color><from>21</from><to>22</to><value>#cccccc</value></color><color><from>22</from><to>26</to><value>#f92672</value></color><color><from>26</from><to>30</to><value>#cccccc</value></color></inline-styles><styles/><language>shell</language><theme>default</theme></code><para><coId>49-1580225555214</coId><text>安装完成后，就可以通过create-next-app命令来创建一个Next.js的项目了。</text><inline-styles><font-family><from>11</from><to>26</to><value>monospace</value></font-family><font-size><from>0</from><to>11</to><value>16</value></font-size><font-size><from>11</from><to>26</to><value>13</value></font-size><font-size><from>26</from><to>45</to><value>16</value></font-size><color><from>0</from><to>11</to><value>#777777</value></color><color><from>11</from><to>26</to><value>#ff502c</value></color><color><from>26</from><to>45</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>06-1580225555214</coId><text>创建Next.js项目</text><inline-styles><bold><from>0</from><to>11</to><value>true</value></bold><font-size><from>0</from><to>11</to><value>20</value></font-size><color><from>0</from><to>11</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>21-1580225555215</coId><text>目前可以支持三种方式的创建，分别是用npx,yarn和create-next-app命令来进行安装，安装的结构都是完全一样的，所以就给大家演示其中的一种npx的形式。</text><inline-styles><font-family><from>18</from><to>21</to><value>monospace</value></font-family><font-family><from>22</from><to>26</to><value>monospace</value></font-family><font-family><from>27</from><to>42</to><value>monospace</value></font-family><font-family><from>76</from><to>79</to><value>monospace</value></font-family><font-size><from>0</from><to>18</to><value>16</value></font-size><font-size><from>18</from><to>21</to><value>13</value></font-size><font-size><from>21</from><to>22</to><value>16</value></font-size><font-size><from>22</from><to>26</to><value>13</value></font-size><font-size><from>26</from><to>27</to><value>16</value></font-size><font-size><from>27</from><to>42</to><value>13</value></font-size><font-size><from>42</from><to>76</to><value>16</value></font-size><font-size><from>76</from><to>79</to><value>13</value></font-size><font-size><from>79</from><to>83</to><value>16</value></font-size><color><from>0</from><to>18</to><value>#777777</value></color><color><from>18</from><to>21</to><value>#ff502c</value></color><color><from>21</from><to>22</to><value>#777777</value></color><color><from>22</from><to>26</to><value>#ff502c</value></color><color><from>26</from><to>27</to><value>#777777</value></color><color><from>27</from><to>42</to><value>#ff502c</value></color><color><from>42</from><to>76</to><value>#777777</value></color><color><from>76</from><to>79</to><value>#ff502c</value></color><color><from>79</from><to>83</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>78-1580225555216</coId><text>npx 是Node自带的npm模块，所以你只要安装了Node都是可以直接使用npx命令的。</text><inline-styles><font-size><from>0</from><to>45</to><value>16</value></font-size><color><from>0</from><to>45</to><value>#777777</value></color></inline-styles><styles><indent>1</indent><font-size>16</font-size></styles></para><para><coId>74-1580225555217</coId><text>但低版本的Node是不带这个命令的，所以你需要手都安装一下。</text><inline-styles><font-size><from>0</from><to>30</to><value>16</value></font-size><color><from>0</from><to>30</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>3438-1580387835201</coId><text>$ npm install -g npx
</text><inline-styles><font-family><from>0</from><to>20</to><value>monospace</value></font-family><font-size><from>0</from><to>20</to><value>13</value></font-size><color><from>0</from><to>6</to><value>#cccccc</value></color><color><from>6</from><to>13</to><value>#f92672</value></color><color><from>13</from><to>20</to><value>#cccccc</value></color></inline-styles><styles/><language>shell</language><theme>default</theme></code><para><coId>27-1580225555218</coId><text>打开命令提示符工具，然后进入D盘，然后直接用下面的npx命令创建项目。</text><inline-styles><font-size><from>0</from><to>35</to><value>16</value></font-size><color><from>0</from><to>35</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>0098-1580387841213</coId><text>$ npx create-next-appnext-create
</text><inline-styles><font-family><from>0</from><to>32</to><value>monospace</value></font-family><font-size><from>0</from><to>32</to><value>13</value></font-size><color><from>0</from><to>2</to><value>#cccccc</value></color><color><from>2</from><to>32</to><value>#e6db74</value></color></inline-styles><styles/><language>shell</language><theme>default</theme></code><para><coId>77-1580225555220</coId><text>输入后按回车，就会自动给我们进行安装项目需要的依赖。并且会给我们添加好命令。稍等一会，全部安装完成后，可以进入项目母乳，执行yarn dev来测试项目。</text><inline-styles><font-family><from>62</from><to>70</to><value>monospace</value></font-family><font-size><from>0</from><to>62</to><value>16</value></font-size><font-size><from>62</from><to>70</to><value>13</value></font-size><font-size><from>70</from><to>76</to><value>16</value></font-size><color><from>0</from><to>62</to><value>#777777</value></color><color><from>62</from><to>70</to><value>#ff502c</value></color><color><from>70</from><to>76</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>80-1580225555221</coId><text>在浏览器中输入http://localhost:3000/,看到下面的内容，说明项目生成成功.</text><inline-styles><font-family><from>7</from><to>29</to><value>monospace</value></font-family><font-size><from>0</from><to>7</to><value>16</value></font-size><font-size><from>7</from><to>29</to><value>13</value></font-size><font-size><from>29</from><to>47</to><value>16</value></font-size><color><from>0</from><to>7</to><value>#777777</value></color><color><from>7</from><to>29</to><value>#ff502c</value></color><color><from>29</from><to>47</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>8484-1580387931713</coId><text/><inline-styles/><styles/></para><para><coId>13-1580225555222</coId><text>项目结构介绍</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><font-size><from>0</from><to>6</to><value>20</value></font-size><color><from>0</from><to>6</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>61-1580225555223</coId><text>看到结果后，用VSCode打开目录，可以看到已经有了很多自动建立好的文件和文件夹，下面就简单的介绍一下这些它们的用处：</text><inline-styles><font-size><from>0</from><to>59</to><value>16</value></font-size><color><from>0</from><to>59</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><list-item level="1" list-id="41-1580225555223"><coId>87-1580225555224</coId><text>components文件夹:这里是专门放置自己写的组件的，这里的组件不包括页面，指公用的或者有专门用途的组件。</text><inline-styles><font-size><from>0</from><to>55</to><value>16</value></font-size><color><from>0</from><to>55</to><value>#777777</value></color></inline-styles><styles/></list-item><list-item level="1" list-id="41-1580225555223"><coId>20-1580225555225</coId><text>node_modules文件夹：Next项目的所有依赖包都在这里，一般我们不会修改和编辑这里的内容。</text><inline-styles><font-size><from>0</from><to>50</to><value>16</value></font-size><color><from>0</from><to>50</to><value>#777777</value></color></inline-styles><styles/></list-item><list-item level="1" list-id="41-1580225555223"><coId>97-1580225555226</coId><text>pages文件夹：这里是放置页面的，这里边的内容会自动生成路由，并在服务器端渲染，渲染好后进行数据同步。</text><inline-styles><font-size><from>0</from><to>52</to><value>16</value></font-size><color><from>0</from><to>52</to><value>#777777</value></color></inline-styles><styles/></list-item><list-item level="1" list-id="41-1580225555223"><coId>81-1580225555227</coId><text>static文件夹： 这个是静态文件夹，比如项目需要的图片、图标和静态资源都可以放到这里。</text><inline-styles><font-size><from>0</from><to>45</to><value>16</value></font-size><color><from>0</from><to>45</to><value>#777777</value></color></inline-styles><styles/></list-item><list-item level="1" list-id="41-1580225555223"><coId>98-1580225555228</coId><text>.gitignore文件： 这个主要是控制git提交和上传文件的，简称就是忽略提交。</text><inline-styles><font-size><from>0</from><to>42</to><value>16</value></font-size><color><from>0</from><to>42</to><value>#777777</value></color></inline-styles><styles/></list-item><list-item level="1" list-id="41-1580225555223"><coId>48-1580225555229</coId><text>package.json文件：定义了项目所需要的文件和项目的配置信息（名称、版本和许可证），最主要的是使用npm install 就可以下载项目所需要的所有包。</text><inline-styles><font-family><from>53</from><to>64</to><value>monospace</value></font-family><font-size><from>0</from><to>53</to><value>16</value></font-size><font-size><from>53</from><to>64</to><value>13</value></font-size><font-size><from>64</from><to>80</to><value>16</value></font-size><color><from>0</from><to>53</to><value>#777777</value></color><color><from>53</from><to>64</to><value>#ff502c</value></color><color><from>64</from><to>80</to><value>#777777</value></color></inline-styles><styles/></list-item><para><coId>68-1580225555230</coId><text>当你了解项目目录和文件后就可以试着修改一下项目，简单的尝试一下了。这节课就到这里了，主要讲解的就是利用create-next-app来创建项目和生成项目的基本结构介绍。</text><inline-styles><font-family><from>51</from><to>66</to><value>monospace</value></font-family><font-size><from>0</from><to>51</to><value>16</value></font-size><font-size><from>51</from><to>66</to><value>13</value></font-size><font-size><from>66</from><to>84</to><value>16</value></font-size><color><from>0</from><to>51</to><value>#777777</value></color><color><from>51</from><to>66</to><value>#ff502c</value></color><color><from>66</from><to>84</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>43-1580225555231</coId><text>p03：Next.js的Page和Component的使用</text><inline-styles><bold><from>0</from><to>29</to><value>true</value></bold><font-size><from>0</from><to>29</to><value>20</value></font-size><color><from>0</from><to>29</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>12-1580225555231</coId><text>上节课已经利用create-next-app创建了项目，也简单的介绍了一下创建后的项目结构。这节课就来看看如何新建页面和新建组件。</text><inline-styles><font-family><from>7</from><to>22</to><value>monospace</value></font-family><font-size><from>0</from><to>7</to><value>16</value></font-size><font-size><from>7</from><to>22</to><value>13</value></font-size><font-size><from>22</from><to>65</to><value>16</value></font-size><color><from>0</from><to>7</to><value>#777777</value></color><color><from>7</from><to>22</to><value>#ff502c</value></color><color><from>22</from><to>65</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>41-1580225555232</coId><text>新建页面和访问路径</text><inline-styles><bold><from>0</from><to>9</to><value>true</value></bold><font-size><from>0</from><to>9</to><value>20</value></font-size><color><from>0</from><to>9</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>27-1580225555233</coId><text>直接在根目录下的pages文件夹下，新建一个jspang.js页面。然后写入下面的代码：</text><inline-styles><font-family><from>8</from><to>13</to><value>monospace</value></font-family><font-family><from>22</from><to>31</to><value>monospace</value></font-family><font-size><from>0</from><to>8</to><value>16</value></font-size><font-size><from>8</from><to>13</to><value>13</value></font-size><font-size><from>13</from><to>22</to><value>16</value></font-size><font-size><from>22</from><to>31</to><value>13</value></font-size><font-size><from>31</from><to>44</to><value>16</value></font-size><color><from>0</from><to>8</to><value>#777777</value></color><color><from>8</from><to>13</to><value>#ff502c</value></color><color><from>13</from><to>22</to><value>#777777</value></color><color><from>22</from><to>31</to><value>#ff502c</value></color><color><from>31</from><to>44</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5542-1580388551830</coId><text>function Jspang(){
    return (&lt;button&gt;技术胖&lt;/button&gt;)
}

export default  Jspang;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>52-1580225555236</coId><text>只要写完上面的代码，Next框架就自动作好了路由，这个也算是Next的一个重要优点，给我们节省了大量的时间。</text><inline-styles><font-family><from>10</from><to>14</to><value>monospace</value></font-family><font-size><from>0</from><to>10</to><value>16</value></font-size><font-size><from>10</from><to>14</to><value>13</value></font-size><font-size><from>14</from><to>54</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#777777</value></color><color><from>10</from><to>14</to><value>#ff502c</value></color><color><from>14</from><to>54</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>59-1580225555238</coId><text>现在要作一个更深的页面，比如把有关博客的界面都放在这样的路径下http://localhost:3000/blog/nextBlog,其实只要在pages文件夹下再建立一个新的文件夹blog，然后进入blog文件夹，新建一个nextBlog.js文件，就可以实现了。</text><inline-styles><font-family><from>31</from><to>66</to><value>monospace</value></font-family><font-family><from>72</from><to>77</to><value>monospace</value></font-family><font-family><from>91</from><to>95</to><value>monospace</value></font-family><font-family><from>100</from><to>104</to><value>monospace</value></font-family><font-family><from>112</from><to>123</to><value>monospace</value></font-family><font-size><from>0</from><to>31</to><value>16</value></font-size><font-size><from>31</from><to>66</to><value>13</value></font-size><font-size><from>66</from><to>72</to><value>16</value></font-size><font-size><from>72</from><to>77</to><value>13</value></font-size><font-size><from>77</from><to>91</to><value>16</value></font-size><font-size><from>91</from><to>95</to><value>13</value></font-size><font-size><from>95</from><to>100</to><value>16</value></font-size><font-size><from>100</from><to>104</to><value>13</value></font-size><font-size><from>104</from><to>112</to><value>16</value></font-size><font-size><from>112</from><to>123</to><value>13</value></font-size><font-size><from>123</from><to>133</to><value>16</value></font-size><color><from>0</from><to>31</to><value>#777777</value></color><color><from>31</from><to>66</to><value>#ff502c</value></color><color><from>66</from><to>72</to><value>#777777</value></color><color><from>72</from><to>77</to><value>#ff502c</value></color><color><from>77</from><to>91</to><value>#777777</value></color><color><from>91</from><to>95</to><value>#ff502c</value></color><color><from>95</from><to>100</to><value>#777777</value></color><color><from>100</from><to>104</to><value>#ff502c</value></color><color><from>104</from><to>112</to><value>#777777</value></color><color><from>112</from><to>123</to><value>#ff502c</value></color><color><from>123</from><to>133</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>43-1580225555239</coId><text>nextBlog.js文件内容,我们这里就用最简单的写法了</text><inline-styles><font-size><from>0</from><to>29</to><value>16</value></font-size><color><from>0</from><to>29</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>2111-1580388587128</coId><text>export default ()=&gt;&lt;div&gt;nextBlog page&lt;/div&gt;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>74-1580225555241</coId><text>写完后，就可以直接在浏览器中访问了，是不是发现Next框架真的减轻了我们大量的工作。</text><inline-styles><font-size><from>0</from><to>42</to><value>16</value></font-size><color><from>0</from><to>42</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>86-1580225555242</coId><text>Component组件的制作</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><font-size><from>0</from><to>14</to><value>20</value></font-size><color><from>0</from><to>14</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>39-1580225555243</coId><text>制作组件也同样方便，比如要建立一个jspang组件，直接在components目录下建立一个文件jspang.js,然后写入下面代码:</text><inline-styles><font-family><from>29</from><to>39</to><value>monospace</value></font-family><font-family><from>48</from><to>57</to><value>monospace</value></font-family><font-size><from>0</from><to>29</to><value>16</value></font-size><font-size><from>29</from><to>39</to><value>13</value></font-size><font-size><from>39</from><to>48</to><value>16</value></font-size><font-size><from>48</from><to>57</to><value>13</value></font-size><font-size><from>57</from><to>67</to><value>16</value></font-size><color><from>0</from><to>29</to><value>#777777</value></color><color><from>29</from><to>39</to><value>#ff502c</value></color><color><from>39</from><to>48</to><value>#777777</value></color><color><from>48</from><to>57</to><value>#ff502c</value></color><color><from>57</from><to>67</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5462-1580389081315</coId><text>export default ({children})=&gt;&lt;button&gt;{children}button&gt;
</text><inline-styles><font-family><from>0</from><to>54</to><value>monospace</value></font-family><font-size><from>0</from><to>54</to><value>13</value></font-size><color><from>0</from><to>16</to><value>#cccccc</value></color><color><from>16</from><to>26</to><value>#e6db74</value></color><color><from>26</from><to>29</to><value>#cccccc</value></color><color><from>29</from><to>30</to><value>#f8f8f2</value></color><color><from>30</from><to>36</to><value>#f92672</value></color><color><from>36</from><to>37</to><value>#f8f8f2</value></color><color><from>37</from><to>47</to><value>#e6db74</value></color><color><from>47</from><to>53</to><value>#f92672</value></color><color><from>53</from><to>54</to><value>#f8f8f2</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>78-1580225555245</coId><text>组件写完后需要先引入，比如我们在Index页面里进行引入：</text><inline-styles><font-size><from>0</from><to>29</to><value>16</value></font-size><color><from>0</from><to>29</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8067-1580389082449</coId><text>import Jspang from'../components/jspang'
</text><inline-styles><font-family><from>0</from><to>40</to><value>monospace</value></font-family><font-size><from>0</from><to>40</to><value>13</value></font-size><color><from>0</from><to>6</to><value>#f92672</value></color><color><from>6</from><to>14</to><value>#cccccc</value></color><color><from>14</from><to>18</to><value>#f92672</value></color><color><from>18</from><to>40</to><value>#e6db74</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>89-1580225555247</coId><text>使用就非常简单了，直接写入标签就可以。</text><inline-styles><font-size><from>0</from><to>19</to><value>16</value></font-size><color><from>0</from><to>19</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9440-1580389084918</coId><text>&lt;Jspang&gt;按钮Jspang&gt;
</text><inline-styles><font-family><from>0</from><to>17</to><value>monospace</value></font-family><font-size><from>0</from><to>17</to><value>13</value></font-size><color><from>0</from><to>1</to><value>#f8f8f2</value></color><color><from>1</from><to>7</to><value>#f92672</value></color><color><from>7</from><to>8</to><value>#f8f8f2</value></color><color><from>8</from><to>10</to><value>#cccccc</value></color><color><from>10</from><to>16</to><value>#f92672</value></color><color><from>16</from><to>17</to><value>#f8f8f2</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>64-1580225555248</coId><text>一个自定义组件的创建和使用也是这么简单， 如果你React的基础很好，那这节课的内容对你来说就更加简单了。也就是说Next框架并没有给我们带来太多的学习成本，但是为我们减轻了很多配置工作。</text><inline-styles><font-size><from>0</from><to>94</to><value>16</value></font-size><color><from>0</from><to>94</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>43-1580225555250</coId><text>p04：路由-基础和基本跳转</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><font-size><from>0</from><to>14</to><value>20</value></font-size><color><from>0</from><to>14</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>32-1580225555250</coId><text>学会编写组件和页面后，下一步应该了解的就是路由体系，每个框架都有着不同的路由体系，这节先学习最基础的页面如何跳转。页面跳转一般有两种形式，第一种是利用标签&lt;Link&gt;,第二种是用js编程的方式进行跳转，也就是利用Router组件。先来看一下标签的形式如何跳转。</text><inline-styles><font-family><from>106</from><to>112</to><value>monospace</value></font-family><font-size><from>0</from><to>77</to><value>16</value></font-size><font-size><from>77</from><to>83</to><value>13</value></font-size><font-size><from>83</from><to>106</to><value>16</value></font-size><font-size><from>106</from><to>112</to><value>13</value></font-size><font-size><from>112</from><to>130</to><value>16</value></font-size><color><from>0</from><to>77</to><value>#777777</value></color><color><from>77</from><to>83</to><value>#ff502c</value></color><color><from>83</from><to>106</to><value>#777777</value></color><color><from>106</from><to>112</to><value>#ff502c</value></color><color><from>112</from><to>130</to><value>#777777</value></color><back-color><from>77</from><to>83</to><value>#fff5f5</value></back-color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>55-1580225555252</coId><text>标签式导航</text><inline-styles><bold><from>0</from><to>5</to><value>true</value></bold><font-size><from>0</from><to>5</to><value>20</value></font-size><color><from>0</from><to>5</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>13-1580225555252</coId><text>在编写代码之前，先删除index.js中的代码，保证代码的最小化。使用标签式导航需要先进行引入，代码如下:</text><inline-styles><font-family><from>11</from><to>19</to><value>monospace</value></font-family><font-size><from>0</from><to>11</to><value>16</value></font-size><font-size><from>11</from><to>19</to><value>13</value></font-size><font-size><from>19</from><to>53</to><value>16</value></font-size><color><from>0</from><to>11</to><value>#777777</value></color><color><from>11</from><to>19</to><value>#ff502c</value></color><color><from>19</from><to>53</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>4733-1580389244184</coId><text>import Link from'next/link'
</text><inline-styles><font-family><from>0</from><to>27</to><value>monospace</value></font-family><font-size><from>0</from><to>27</to><value>13</value></font-size><color><from>0</from><to>6</to><value>#f92672</value></color><color><from>6</from><to>12</to><value>#cccccc</value></color><color><from>12</from><to>16</to><value>#f92672</value></color><color><from>16</from><to>27</to><value>#e6db74</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>90-1580225555254</coId><text>然后新建两个页面jspangA.js和jspangB.js，新建后写个最简单的页面，能标识出来A、B两个页面就好。</text><inline-styles><font-family><from>8</from><to>18</to><value>monospace</value></font-family><font-family><from>19</from><to>29</to><value>monospace</value></font-family><font-size><from>0</from><to>8</to><value>16</value></font-size><font-size><from>8</from><to>18</to><value>13</value></font-size><font-size><from>18</from><to>19</to><value>16</value></font-size><font-size><from>19</from><to>29</to><value>13</value></font-size><font-size><from>29</from><to>57</to><value>16</value></font-size><color><from>0</from><to>8</to><value>#777777</value></color><color><from>8</from><to>18</to><value>#ff502c</value></color><color><from>18</from><to>19</to><value>#777777</value></color><color><from>19</from><to>29</to><value>#ff502c</value></color><color><from>29</from><to>57</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8458-1580389254929</coId><text>//jspangA.js
import Link from 'next/link'

export default ()=&gt;(
    &lt;&gt;
        &lt;div&gt;Jspang-A page .  &lt;/div&gt;
        &lt;Link href="/"&gt;&lt;a&gt;返回首页&lt;/a&gt;&lt;/Link&gt;
    &lt;/&gt;
)
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>62-1580225555260</coId><text>写完A页面后，可以直接复制A页面的内容，然后修改一下就是B页面。</text><inline-styles><font-size><from>0</from><to>32</to><value>16</value></font-size><color><from>0</from><to>32</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1928-1580389262678</coId><text>//jspangB.js

import Link from 'next/link'

export default ()=&gt;(
    &lt;&gt;
        &lt;div&gt;Jspang-B page .  &lt;/div&gt;
        &lt;Link href="/"&gt;&lt;a&gt;返回首页&lt;/a&gt;&lt;/Link&gt;
    &lt;/&gt;
)
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>28-1580225555266</coId><text>有了两个页面后，可以编写首页的代码，实现跳转了。</text><inline-styles><font-size><from>0</from><to>24</to><value>16</value></font-size><color><from>0</from><to>24</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9130-1580389274274</coId><text>//index.js
import React from 'react'
import Link from 'next/link'


const Home = () =&gt; (
  &lt;&gt;
    &lt;div&gt;我是首页&lt;/div&gt;
    &lt;div&gt;&lt;Link href="/jspangA"&gt;&lt;a&gt;去JspangA页面&lt;/a&gt;&lt;/Link&gt;&lt;/div&gt;
    &lt;div&gt;&lt;Link href="/jspangB"&gt;&lt;a&gt;去JspangB页面&lt;/a&gt;&lt;/Link&gt;&lt;/div&gt;

  &lt;/&gt;
)

export default Home
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>33-1580225555276</coId><text>用标签进行跳转是非常容易的，但是又一个小坑需要你注意一下，就是他不支持兄弟标签并列的情况。</text><inline-styles><font-size><from>0</from><to>45</to><value>16</value></font-size><color><from>0</from><to>45</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9643-1580389623802</coId><text>&lt;div&gt;
  &lt;Link href="/jspangA"&gt;
    &lt;span&gt;去JspangA页面&lt;/span&gt;
    &lt;span&gt;前端博客&lt;/span&gt;
  &lt;/Link&gt;
&lt;/div&gt;
</text><inline-styles/><styles/><language>html</language><theme>default</theme></code><para><coId>00-1580225555281</coId><text>如果这样写会直接报错，报错信息如下</text><inline-styles><font-size><from>0</from><to>17</to><value>16</value></font-size><color><from>0</from><to>17</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8980-1580389643997</coId><text>client pings, but there's no entry for page: /_errorWarning: You're using a string directly inside . This usage has been deprecated. Please add an  tag as child of 
</text><inline-styles><font-family><from>0</from><to>164</to><value>monospace</value></font-family><font-size><from>0</from><to>164</to><value>13</value></font-size><color><from>0</from><to>22</to><value>#cccccc</value></color><color><from>22</from><to>65</to><value>#e6db74</value></color><color><from>65</from><to>68</to><value>#cccccc</value></color><color><from>68</from><to>73</to><value>#f92672</value></color><color><from>73</from><to>106</to><value>#cccccc</value></color><color><from>106</from><to>111</to><value>#f92672</value></color><color><from>111</from><to>140</to><value>#cccccc</value></color><color><from>140</from><to>143</to><value>#f92672</value></color><color><from>143</from><to>152</to><value>#cccccc</value></color><color><from>152</from><to>154</to><value>#f92672</value></color><color><from>154</from><to>161</to><value>#cccccc</value></color><color><from>161</from><to>163</to><value>#f92672</value></color><color><from>163</from><to>164</to><value>#cccccc</value></color></inline-styles><styles/><language>shell</language><theme>default</theme></code><para><coId>59-1580225555285</coId><text>但是你可以把这两个标签外边套一个父标签，就可以了，比如下面的代码就没有错误。</text><inline-styles><font-size><from>0</from><to>38</to><value>16</value></font-size><color><from>0</from><to>38</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1276-1580389681020</coId><text>&lt;Link href="/jspangA"&gt;
  &lt;a&gt;
    &lt;span&gt;去JspangA页面&lt;/span&gt;
    &lt;span&gt;前端博客&lt;/span&gt;
  &lt;/a&gt;
&lt;/Link&gt;
</text><inline-styles/><styles/><language>html</language><theme>default</theme></code><para><coId>57-1580225555289</coId><text>通过标签跳转非常的简单，跟使用标签几乎一样。那再来看看如何用编程的方式进行跳转。</text><inline-styles><font-size><from>0</from><to>40</to><value>16</value></font-size><color><from>0</from><to>40</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>31-1580225555290</coId><text>Router模块进行跳转</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>12</to><value>20</value></font-size><color><from>0</from><to>12</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>20-1580225555290</coId><text>在Next框架中还可以使用Router模块进行编程式的跳转，使用前也需要我们引入Router，代码如下：</text><inline-styles><font-family><from>1</from><to>5</to><value>monospace</value></font-family><font-family><from>40</from><to>46</to><value>monospace</value></font-family><font-size><from>0</from><to>1</to><value>16</value></font-size><font-size><from>1</from><to>5</to><value>13</value></font-size><font-size><from>5</from><to>40</to><value>16</value></font-size><font-size><from>40</from><to>46</to><value>13</value></font-size><font-size><from>46</from><to>52</to><value>16</value></font-size><color><from>0</from><to>1</to><value>#777777</value></color><color><from>1</from><to>5</to><value>#ff502c</value></color><color><from>5</from><to>40</to><value>#777777</value></color><color><from>40</from><to>46</to><value>#ff502c</value></color><color><from>46</from><to>52</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8760-1580389699682</coId><text>import Router from'next/router'
</text><inline-styles><font-family><from>0</from><to>31</to><value>monospace</value></font-family><font-size><from>0</from><to>31</to><value>13</value></font-size><color><from>0</from><to>6</to><value>#f92672</value></color><color><from>6</from><to>14</to><value>#cccccc</value></color><color><from>14</from><to>18</to><value>#f92672</value></color><color><from>18</from><to>31</to><value>#e6db74</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>52-1580225555292</coId><text>然后在Index.js页面中加入，直接使用Router进行跳转就可以了。</text><inline-styles><font-family><from>3</from><to>11</to><value>monospace</value></font-family><font-size><from>0</from><to>3</to><value>16</value></font-size><font-size><from>3</from><to>11</to><value>13</value></font-size><font-size><from>11</from><to>36</to><value>16</value></font-size><color><from>0</from><to>3</to><value>#777777</value></color><color><from>3</from><to>11</to><value>#ff502c</value></color><color><from>11</from><to>36</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>3461-1580389722438</coId><text>&lt;div&gt;
    &lt;button onClick={()=&gt;{Router.push('/jspangA')}}&gt;去JspangA页面&lt;/button&gt;
&lt;/div&gt;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>58-1580225555296</coId><text>这样写只是简单，但是还是耦合性太高，跟Link标签没什么区别，你可以修改一下代码，把跳转放到一个方法里，然后调用方法。</text><inline-styles><font-size><from>0</from><to>59</to><value>16</value></font-size><color><from>0</from><to>59</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9020-1580389744146</coId><text>import React from 'react'
import Link from 'next/link'
import Router from 'next/router'
const Home = () =&gt; {
  function gotoA(){
    Router.push('/jspangA')
  }
  return(
    &lt;&gt;
      &lt;div&gt;我是首页&lt;/div&gt;
      &lt;div&gt;
        &lt;Link href="/jspangA"&gt;
          &lt;a&gt;
            &lt;span&gt;去JspangA页面&lt;/span&gt;
            &lt;span&gt;前端博客&lt;/span&gt;
          &lt;/a&gt;
        &lt;/Link&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;Link href="/jspangB"&gt;&lt;a&gt;去JspangB页面&lt;/a&gt;&lt;/Link&gt;&lt;/div&gt;
      &lt;div&gt;
        &lt;button onClick={gotoA}&gt;去JspangA页面&lt;/button&gt;
      &lt;/div&gt;
    &lt;/&gt;
  )

}
export default Home
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>39-1580225555313</coId><text>这样也是可以实现跳转的，而且耦合性也降低了,所以个人更喜欢这种跳转方式。这节课主要学习了Next的两种跳转方式，第一种是标签式跳转，第二种是编程式跳转。</text><inline-styles><font-size><from>0</from><to>76</to><value>16</value></font-size><color><from>0</from><to>76</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>62-1580225555314</coId><text>p05：路由-跳转时用query传递和接受参数</text><inline-styles><bold><from>0</from><to>23</to><value>true</value></bold><font-size><from>0</from><to>23</to><value>20</value></font-size><color><from>0</from><to>23</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>72-1580225555314</coId><text>项目开发中一般都不是简单的静态跳转，而是需要动态跳转的。动态跳转就是跳转时需要带一个参数或几个参数过去，然后在到达的页面接受这个传递的参数，并根据参数不同显示不同的内容。比如新闻列表，然后点击一个要看的新闻就会跳转到具体内容。这些类似这样的需求都都是通过传递参数实现的。</text><inline-styles><font-size><from>0</from><to>135</to><value>16</value></font-size><color><from>0</from><to>135</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>95-1580225555315</coId><text>只能用query传递参数</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>12</to><value>20</value></font-size><color><from>0</from><to>12</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>76-1580225555317</coId><text>这节课作一个“找小姐姐”的例子，通过这个例子来通俗易懂的讲解一下路由带参数的知识。在Next.js中只能通过通过query（?id=1）来传递参数，而不能通过(path:id)的形式传递参数，这个一定要记住，在工作中很容易就容易记混。</text><inline-styles><font-family><from>42</from><to>49</to><value>monospace</value></font-family><font-family><from>62</from><to>67</to><value>monospace</value></font-family><font-family><from>80</from><to>87</to><value>monospace</value></font-family><font-size><from>0</from><to>42</to><value>16</value></font-size><font-size><from>42</from><to>49</to><value>13</value></font-size><font-size><from>49</from><to>62</to><value>16</value></font-size><font-size><from>62</from><to>67</to><value>13</value></font-size><font-size><from>67</from><to>80</to><value>16</value></font-size><font-size><from>80</from><to>87</to><value>13</value></font-size><font-size><from>87</from><to>117</to><value>16</value></font-size><color><from>0</from><to>42</to><value>#777777</value></color><color><from>42</from><to>49</to><value>#ff502c</value></color><color><from>49</from><to>62</to><value>#777777</value></color><color><from>62</from><to>67</to><value>#ff502c</value></color><color><from>67</from><to>80</to><value>#777777</value></color><color><from>80</from><to>87</to><value>#ff502c</value></color><color><from>87</from><to>117</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>18-1580225555318</coId><text>现在我们改写一下pages文件夹下的index.js文件。</text><inline-styles><font-family><from>18</from><to>26</to><value>monospace</value></font-family><font-size><from>0</from><to>18</to><value>16</value></font-size><font-size><from>18</from><to>26</to><value>13</value></font-size><font-size><from>26</from><to>29</to><value>16</value></font-size><color><from>0</from><to>18</to><value>#777777</value></color><color><from>18</from><to>26</to><value>#ff502c</value></color><color><from>26</from><to>29</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1890-1580390006958</coId><text>import React from 'react'
import Link from 'next/link'
import Router from 'next/router'
const Home = () =&gt; {
  return(
    &lt;&gt;
      &lt;div&gt;我是首页&lt;/div&gt;
      &lt;div&gt;
        &lt;Link href="/xiaojiejie?name=波多野结衣"&gt;&lt;a&gt;选波多野结衣&lt;/a&gt;&lt;/Link&gt;&lt;br/&gt;
        &lt;Link href="/xiaojiejie?name=苍井空"&gt;&lt;a&gt;选苍井空&lt;/a&gt;&lt;/Link&gt;
      &lt;/div&gt;
    &lt;/&gt;
  )

}
export default Home
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>09-1580225555330</coId><text>这样编写query参数就可以进行传递过去了，接下来就是要接受参数了。</text><inline-styles><font-size><from>0</from><to>34</to><value>16</value></font-size><color><from>0</from><to>34</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>30-1580225555330</coId><text>接收传递过来的参数</text><inline-styles><bold><from>0</from><to>9</to><value>true</value></bold><font-size><from>0</from><to>9</to><value>20</value></font-size><color><from>0</from><to>9</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>92-1580225555331</coId><text>现在还没有小姐姐对应的页面，所以我们要创建xiaojiejie.js页面，并写下下面的代码。</text><inline-styles><font-family><from>21</from><to>34</to><value>monospace</value></font-family><font-size><from>0</from><to>21</to><value>16</value></font-size><font-size><from>21</from><to>34</to><value>13</value></font-size><font-size><from>34</from><to>46</to><value>16</value></font-size><color><from>0</from><to>21</to><value>#777777</value></color><color><from>21</from><to>34</to><value>#ff502c</value></color><color><from>34</from><to>46</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1055-1580390036680</coId><text>import { withRouter} from 'next/router'
import Link from 'next/link'

const Xiaojiejie = ({router})=&gt;{
    return (
        &lt;&gt;
            &lt;div&gt;{router.query.name},来为我们服务了 .&lt;/div&gt;
            &lt;Link href="/"&gt;&lt;a&gt;返回首页&lt;/a&gt;&lt;/Link&gt;
        &lt;/&gt;
    )
}

export default withRouter(Xiaojiejie)
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>16-1580225555339</coId><text>withRouter是Next.js框架的高级组件，用来处理路由用的，这里先学简单用法，以后还会学习的。通过这种方式就获得了参数，并显示在页面上了。</text><inline-styles><font-family><from>0</from><to>10</to><value>monospace</value></font-family><font-size><from>0</from><to>10</to><value>13</value></font-size><font-size><from>10</from><to>74</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#ff502c</value></color><color><from>10</from><to>74</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>83-1580225555340</coId><text>编程式跳转传递参数</text><inline-styles><bold><from>0</from><to>9</to><value>true</value></bold><font-size><from>0</from><to>9</to><value>20</value></font-size><color><from>0</from><to>9</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>96-1580225555341</coId><text>回了这种标签式跳转传递参数的形式，那编程式跳转如何传递那，其实也可以简单使用?加参数的形式，代码如下：</text><inline-styles><font-family><from>38</from><to>42</to><value>monospace</value></font-family><font-size><from>0</from><to>38</to><value>16</value></font-size><font-size><from>38</from><to>42</to><value>13</value></font-size><font-size><from>42</from><to>51</to><value>16</value></font-size><color><from>0</from><to>38</to><value>#777777</value></color><color><from>38</from><to>42</to><value>#ff502c</value></color><color><from>42</from><to>51</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>4799-1580390110933</coId><text>&lt;div&gt;
  &lt;button onClick={gotoXiaojiejie}&gt;选井空&lt;/button&gt;
&lt;/div&gt;
</text><inline-styles/><styles/><language>html</language><theme>default</theme></code><para><coId>6930-1580390110933</coId><text/><inline-styles/><styles/></para><code><coId>7830-1580390103388</coId><text>// gotoXiaojiejie
function gotoXiaojiejie(){
    Router.push('/xiaojiejie?name=井空')
  }
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>17-1580225555347</coId><text>这种形式跳转和传递参数是完全没有问题的，但是不太优雅（优雅这东西很难界定，其实你完全可以看成一种装X，这太简单了，我需要装个X），所以也可以写成Object的形式。</text><inline-styles><font-family><from>72</from><to>78</to><value>monospace</value></font-family><font-size><from>0</from><to>72</to><value>16</value></font-size><font-size><from>72</from><to>78</to><value>13</value></font-size><font-size><from>78</from><to>82</to><value>16</value></font-size><color><from>0</from><to>72</to><value>#777777</value></color><color><from>72</from><to>78</to><value>#ff502c</value></color><color><from>78</from><to>82</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8723-1580390138659</coId><text> function gotoXiaojiejie(){
    Router.push({
      pathname:'/xiaojiejie',
      query:{
        name:'井空'
      }
    })
  }
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>62-1580225555351</coId><text>嗯，这样写确实优雅很多(我们一定要面向对象编程，有对象比没对象要好)。</text><inline-styles><font-size><from>0</from><to>35</to><value>16</value></font-size><color><from>0</from><to>35</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>96-1580225555352</coId><text>其实标签也可以写成这种形式，比如我们把第一个修改成这种形式.</text><inline-styles><font-size><from>0</from><to>30</to><value>16</value></font-size><color><from>0</from><to>30</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>3387-1580390155045</coId><text>&lt;Linkhref={{pathname:'/xiaojiejie',query:{name:'结衣'}}}&gt;&lt;a&gt;选结衣a&gt;Link&gt;&lt;br/&gt;
</text><inline-styles><font-family><from>0</from><to>73</to><value>monospace</value></font-family><font-size><from>0</from><to>73</to><value>13</value></font-size><color><from>0</from><to>1</to><value>#f8f8f2</value></color><color><from>1</from><to>9</to><value>#f92672</value></color><color><from>9</from><to>10</to><value>#f8f8f2</value></color><color><from>10</from><to>21</to><value>#e6db74</value></color><color><from>21</from><to>23</to><value>#f8f8f2</value></color><color><from>23</from><to>33</to><value>#f92672</value></color><color><from>33</from><to>35</to><value>#f8f8f2</value></color><color><from>35</from><to>41</to><value>#f92672</value></color><color><from>41</from><to>42</to><value>#f8f8f2</value></color><color><from>42</from><to>47</to><value>#f92672</value></color><color><from>47</from><to>56</to><value>#f8f8f2</value></color><color><from>56</from><to>57</to><value>#f92672</value></color><color><from>57</from><to>58</to><value>#f8f8f2</value></color><color><from>58</from><to>61</to><value>#cccccc</value></color><color><from>61</from><to>62</to><value>#f92672</value></color><color><from>62</from><to>63</to><value>#f8f8f2</value></color><color><from>63</from><to>67</to><value>#f92672</value></color><color><from>67</from><to>69</to><value>#f8f8f2</value></color><color><from>69</from><to>71</to><value>#f92672</value></color><color><from>71</from><to>73</to><value>#f8f8f2</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>54-1580225555357</coId><text>在浏览器中预览一下，如果一切正常是可以顺利进行跳转，并接收到传递的值。这节课主要讲解了Next框架的路由跳转时带参数过去，然后用withRouter进行接收。</text><inline-styles><font-family><from>64</from><to>74</to><value>monospace</value></font-family><font-size><from>0</from><to>64</to><value>16</value></font-size><font-size><from>64</from><to>74</to><value>13</value></font-size><font-size><from>74</from><to>79</to><value>16</value></font-size><color><from>0</from><to>64</to><value>#777777</value></color><color><from>64</from><to>74</to><value>#ff502c</value></color><color><from>74</from><to>79</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>69-1580225555358</coId><text>p06：路由-六个钩子事件的讲解</text><inline-styles><bold><from>0</from><to>16</to><value>true</value></bold><font-size><from>0</from><to>16</to><value>20</value></font-size><color><from>0</from><to>16</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>02-1580225555358</coId><text>路由的钩子事件，也就是当路由发生变化时，可以监听到这些变化事件，执行对应的函数。它一共有六个钩子事件，这节课就学习一下。</text><inline-styles><font-size><from>0</from><to>60</to><value>16</value></font-size><color><from>0</from><to>60</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>51-1580225555359</coId><text>routerChangeStart路由发生变化时</text><inline-styles><bold><from>0</from><to>24</to><value>true</value></bold><font-family><from>0</from><to>17</to><value>monospace</value></font-family><font-size><from>0</from><to>17</to><value>13</value></font-size><font-size><from>17</from><to>24</to><value>20</value></font-size><color><from>0</from><to>17</to><value>#ff502c</value></color><color><from>17</from><to>24</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>59-1580225555361</coId><text>在监听路由发生变化时，我们需要用Router组件，然后用on方法来进行监听,在pages文件夹下的index.js，然后写入下面的监听事件，这里我们只打印一句话，就不作其他的事情了。代码如下：</text><inline-styles><font-family><from>28</from><to>30</to><value>monospace</value></font-family><font-family><from>39</from><to>44</to><value>monospace</value></font-family><font-family><from>49</from><to>57</to><value>monospace</value></font-family><font-size><from>0</from><to>28</to><value>16</value></font-size><font-size><from>28</from><to>30</to><value>13</value></font-size><font-size><from>30</from><to>39</to><value>16</value></font-size><font-size><from>39</from><to>44</to><value>13</value></font-size><font-size><from>44</from><to>49</to><value>16</value></font-size><font-size><from>49</from><to>57</to><value>13</value></font-size><font-size><from>57</from><to>96</to><value>16</value></font-size><color><from>0</from><to>28</to><value>#777777</value></color><color><from>28</from><to>30</to><value>#ff502c</value></color><color><from>30</from><to>39</to><value>#777777</value></color><color><from>39</from><to>44</to><value>#ff502c</value></color><color><from>44</from><to>49</to><value>#777777</value></color><color><from>49</from><to>57</to><value>#ff502c</value></color><color><from>57</from><to>96</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>4499-1580390391992</coId><text>   Router.events.on('routeChangeStart',(...args)=&gt;{
    console.log('1.routeChangeStart-&gt;路由开始变化,参数为:',...args)
  })
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>15-1580225555365</coId><text>这个时路由发生变化时，时间第一时间被监听到，并执行了里边的方法。</text><inline-styles><font-size><from>0</from><to>32</to><value>16</value></font-size><color><from>0</from><to>32</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>30-1580225555365</coId><text>routerChangeComplete路由结束变化时</text><inline-styles><bold><from>0</from><to>27</to><value>true</value></bold><font-family><from>0</from><to>20</to><value>monospace</value></font-family><font-size><from>0</from><to>20</to><value>13</value></font-size><font-size><from>20</from><to>27</to><value>20</value></font-size><color><from>0</from><to>20</to><value>#ff502c</value></color><color><from>20</from><to>27</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>26-1580225555366</coId><text>路由变化开始时可以监听到，那结束时也时可以监听到的，这时候监听的事件是routerChangeComplete。</text><inline-styles><font-family><from>35</from><to>55</to><value>monospace</value></font-family><font-size><from>0</from><to>35</to><value>16</value></font-size><font-size><from>35</from><to>55</to><value>13</value></font-size><font-size><from>55</from><to>56</to><value>16</value></font-size><color><from>0</from><to>35</to><value>#777777</value></color><color><from>35</from><to>55</to><value>#ff502c</value></color><color><from>55</from><to>56</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>7030-1580390405334</coId><text>  Router.events.on('routeChangeComplete',(...args)=&gt;{
    console.log('routeChangeComplete-&gt;路由结束变化,参数为:',...args)
  })
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>65-1580225555369</coId><text>beforeHistoryChange浏览器history触发前</text><inline-styles><bold><from>0</from><to>32</to><value>true</value></bold><font-family><from>0</from><to>19</to><value>monospace</value></font-family><font-size><from>0</from><to>19</to><value>13</value></font-size><font-size><from>19</from><to>32</to><value>20</value></font-size><color><from>0</from><to>19</to><value>#ff502c</value></color><color><from>19</from><to>32</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>84-1580225555370</coId><text>history就是HTML中的API，如果这个不了解可以百度了解一下，Next.js路由变化默认都是通过history进行的，所以每次都会调用。不适用history的话，也可以通过hash</text><inline-styles><font-family><from>35</from><to>42</to><value>monospace</value></font-family><font-size><from>0</from><to>35</to><value>16</value></font-size><font-size><from>35</from><to>42</to><value>13</value></font-size><font-size><from>42</from><to>94</to><value>16</value></font-size><color><from>0</from><to>35</to><value>#777777</value></color><color><from>35</from><to>42</to><value>#ff502c</value></color><color><from>42</from><to>94</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>7874-1580390602204</coId><text>  Router.events.on('beforeHistoryChange',(...args)=&gt;{
    console.log('3,beforeHistoryChange-&gt;在改变浏览器 history之前触发,参数为:',...args)
  })
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>69-1580225555375</coId><text>routeChangeError路由跳转发生错误时</text><inline-styles><bold><from>0</from><to>25</to><value>true</value></bold><font-family><from>0</from><to>16</to><value>monospace</value></font-family><font-size><from>0</from><to>16</to><value>13</value></font-size><font-size><from>16</from><to>25</to><value>20</value></font-size><color><from>0</from><to>16</to><value>#ff502c</value></color><color><from>16</from><to>25</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><code><coId>2825-1580390612086</coId><text> Router.events.on('routeChangeError',(...args)=&gt;{
    console.log('4,routeChangeError-&gt;跳转发生错误,参数为:',...args)
  })
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>52-1580225555378</coId><text>需要注意的是404找不到路由页面不算错误，这个我们就不演示了。</text><inline-styles><font-size><from>0</from><to>31</to><value>16</value></font-size><color><from>0</from><to>31</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>05-1580225555378</coId><text>转变成hash路由模式</text><inline-styles><bold><from>0</from><to>11</to><value>true</value></bold><font-size><from>0</from><to>11</to><value>20</value></font-size><color><from>0</from><to>11</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>96-1580225555379</coId><text>还有两种事件，都是针对hash的，所以现在要转变成hash模式。hash模式下的两个事件hashChangeStart和hashChangeComplete,就都在这里进行编写了。</text><inline-styles><font-family><from>44</from><to>59</to><value>monospace</value></font-family><font-family><from>60</from><to>78</to><value>monospace</value></font-family><font-size><from>0</from><to>44</to><value>16</value></font-size><font-size><from>44</from><to>59</to><value>13</value></font-size><font-size><from>59</from><to>60</to><value>16</value></font-size><font-size><from>60</from><to>78</to><value>13</value></font-size><font-size><from>78</from><to>90</to><value>16</value></font-size><color><from>0</from><to>44</to><value>#777777</value></color><color><from>44</from><to>59</to><value>#ff502c</value></color><color><from>59</from><to>60</to><value>#777777</value></color><color><from>60</from><to>78</to><value>#ff502c</value></color><color><from>78</from><to>90</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>4123-1580390635813</coId><text>  Router.events.on('hashChangeStart',(...args)=&gt;{
    console.log('5,hashChangeStart-&gt;hash跳转开始时执行,参数为:',...args)
  })

  Router.events.on('hashChangeComplete',(...args)=&gt;{
    console.log('6,hashChangeComplete-&gt;hash跳转完成时,参数为:',...args)
  })
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>69-1580225555385</coId><text>在下面的jsx语法部分，再增加一个链接,使用hash来进行跳转，代码如下：</text><inline-styles><font-size><from>0</from><to>37</to><value>16</value></font-size><color><from>0</from><to>37</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5652-1580390647807</coId><text>&lt;div&gt;
    &lt;Link href="#jspang"&gt;&lt;a&gt;选JSPang&lt;/a&gt;&lt;/Link&gt;
&lt;/div&gt;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>21-1580225555389</coId><text>为了方便你学习，我这里给出index.js的全部代码，你可以在练习时进行参考。</text><inline-styles><font-family><from>13</from><to>21</to><value>monospace</value></font-family><font-size><from>0</from><to>13</to><value>16</value></font-size><font-size><from>13</from><to>21</to><value>13</value></font-size><font-size><from>21</from><to>39</to><value>16</value></font-size><color><from>0</from><to>13</to><value>#777777</value></color><color><from>13</from><to>21</to><value>#ff502c</value></color><color><from>21</from><to>39</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>4017-1580390667213</coId><text>import React from 'react'
import Link from 'next/link'
import Router from 'next/router'


const Home = () =&gt; {

  function gotoXiaojiejie(){
    Router.push({
      pathname:'/xiaojiejie',
      query:{
        name:'井空'
      }
    })
  }



  Router.events.on('routeChangeStart',(...args)=&gt;{
    console.log('1.routeChangeStart-&gt;路由开始变化,参数为:',...args)
  })

  Router.events.on('routeChangeComplete',(...args)=&gt;{
    console.log('2.routeChangeComplete-&gt;路由结束变化,参数为:',...args)
  })

  Router.events.on('beforeHistoryChange',(...args)=&gt;{
    console.log('3,beforeHistoryChange-&gt;在改变浏览器 history之前触发,参数为:',...args)
  })

  Router.events.on('routeChangeError',(...args)=&gt;{
    console.log('4,routeChangeError-&gt;跳转发生错误,参数为:',...args)
  })

  Router.events.on('hashChangeStart',(...args)=&gt;{
    console.log('5,hashChangeStart-&gt;hash跳转开始时执行,参数为:',...args)
  })

  Router.events.on('hashChangeComplete',(...args)=&gt;{
    console.log('6,hashChangeComplete-&gt;hash跳转完成时,参数为:',...args)
  })




  return(
    &lt;&gt;
      &lt;div&gt;我是首页&lt;/div&gt;
      &lt;div&gt;
        &lt;Link href={{pathname:'/xiaojiejie',query:{name:'结衣'}}}&gt;&lt;a&gt;选结衣&lt;/a&gt;&lt;/Link&gt;&lt;br/&gt;
        &lt;Link href="/xiaojiejie?name=井空"&gt;&lt;a&gt;选井空&lt;/a&gt;&lt;/Link&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &lt;button onClick={gotoXiaojiejie}&gt;选井空&lt;/button&gt;
      &lt;/div&gt;
      &lt;div&gt;
         &lt;Link href="#jspang"&gt;&lt;a&gt;选JSPang&lt;/a&gt;&lt;/Link&gt;
      &lt;/div&gt;
    &lt;/&gt;
  )

}
export default Home
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>68-1580225555424</coId><text>这节主要学习了路由的钩子事件，利用钩子事件是可以作很多事情的，比如转换时的加载动画，关掉页面的一些资源计数器.....。</text><inline-styles><font-size><from>0</from><to>60</to><value>16</value></font-size><color><from>0</from><to>60</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>69-1580225555425</coId><text>p07：在getInitialProps中用Axios获取远端数据</text><inline-styles><bold><from>0</from><to>33</to><value>true</value></bold><font-size><from>0</from><to>33</to><value>20</value></font-size><color><from>0</from><to>33</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>69-1580225555426</coId><text>在Next.js框架中提供了getInitialProps静态方法用来获取远端数据，这个是框架的约定，所以你也只能在这个方法里获取远端数据。不要再试图在声明周期里获得，虽然也可以在ComponentDidMount中获得，但是用了别人的框架，就要遵守别人的约定。</text><inline-styles><font-family><from>1</from><to>8</to><value>monospace</value></font-family><font-family><from>14</from><to>29</to><value>monospace</value></font-family><font-family><from>90</from><to>107</to><value>monospace</value></font-family><font-size><from>0</from><to>1</to><value>16</value></font-size><font-size><from>1</from><to>8</to><value>13</value></font-size><font-size><from>8</from><to>14</to><value>16</value></font-size><font-size><from>14</from><to>29</to><value>13</value></font-size><font-size><from>29</from><to>90</to><value>16</value></font-size><font-size><from>90</from><to>107</to><value>13</value></font-size><font-size><from>107</from><to>131</to><value>16</value></font-size><color><from>0</from><to>1</to><value>#777777</value></color><color><from>1</from><to>8</to><value>#ff502c</value></color><color><from>8</from><to>14</to><value>#777777</value></color><color><from>14</from><to>29</to><value>#ff502c</value></color><color><from>29</from><to>90</to><value>#777777</value></color><color><from>90</from><to>107</to><value>#ff502c</value></color><color><from>107</from><to>131</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>10-1580225555427</coId><text>安装和引入Axios插件</text><inline-styles><bold><from>0</from><to>12</to><value>true</value></bold><font-size><from>0</from><to>12</to><value>20</value></font-size><color><from>0</from><to>12</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>10-1580225555428</coId><text>Axios是目前最或的前端获取数据的插件了，也是由大神首推的数据接口请求插件，我在工作中也是一直在使用它，所以这里依然使用Axios来进行远端数据请求。在请求前需要先安装Axios插件。</text><inline-styles><font-family><from>0</from><to>5</to><value>monospace</value></font-family><font-family><from>61</from><to>66</to><value>monospace</value></font-family><font-family><from>85</from><to>90</to><value>monospace</value></font-family><font-size><from>0</from><to>5</to><value>13</value></font-size><font-size><from>5</from><to>61</to><value>16</value></font-size><font-size><from>61</from><to>66</to><value>13</value></font-size><font-size><from>66</from><to>85</to><value>16</value></font-size><font-size><from>85</from><to>90</to><value>13</value></font-size><font-size><from>90</from><to>93</to><value>16</value></font-size><color><from>0</from><to>5</to><value>#ff502c</value></color><color><from>5</from><to>61</to><value>#777777</value></color><color><from>61</from><to>66</to><value>#ff502c</value></color><color><from>66</from><to>85</to><value>#777777</value></color><color><from>85</from><to>90</to><value>#ff502c</value></color><color><from>90</from><to>93</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>72-1580225555429</coId><text>打开终端，直接使用yarn命令进行安装。</text><inline-styles><font-size><from>0</from><to>20</to><value>16</value></font-size><color><from>0</from><to>20</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>2225-1580390766110</coId><text>yarn add axios
</text><inline-styles><font-family><from>0</from><to>14</to><value>monospace</value></font-family><font-size><from>0</from><to>14</to><value>13</value></font-size><color><from>0</from><to>5</to><value>#cccccc</value></color><color><from>5</from><to>8</to><value>#f92672</value></color><color><from>8</from><to>14</to><value>#cccccc</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>36-1580225555431</coId><text>我使用的版本是0.19.0,可能你学习的时候会稍有变化。安装完成后，在需要的页面中用import引入axios，代码如下：</text><inline-styles><font-family><from>7</from><to>13</to><value>monospace</value></font-family><font-family><from>42</from><to>48</to><value>monospace</value></font-family><font-family><from>50</from><to>55</to><value>monospace</value></font-family><font-size><from>0</from><to>7</to><value>16</value></font-size><font-size><from>7</from><to>13</to><value>13</value></font-size><font-size><from>13</from><to>42</to><value>16</value></font-size><font-size><from>42</from><to>48</to><value>13</value></font-size><font-size><from>48</from><to>50</to><value>16</value></font-size><font-size><from>50</from><to>55</to><value>13</value></font-size><font-size><from>55</from><to>61</to><value>16</value></font-size><color><from>0</from><to>7</to><value>#777777</value></color><color><from>7</from><to>13</to><value>#ff502c</value></color><color><from>13</from><to>42</to><value>#777777</value></color><color><from>42</from><to>48</to><value>#ff502c</value></color><color><from>48</from><to>50</to><value>#777777</value></color><color><from>50</from><to>55</to><value>#ff502c</value></color><color><from>55</from><to>61</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5618-1580390774958</coId><text>import axios from'axios'
</text><inline-styles><font-family><from>0</from><to>24</to><value>monospace</value></font-family><font-size><from>0</from><to>24</to><value>13</value></font-size><color><from>0</from><to>6</to><value>#f92672</value></color><color><from>6</from><to>13</to><value>#cccccc</value></color><color><from>13</from><to>17</to><value>#f92672</value></color><color><from>17</from><to>24</to><value>#e6db74</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>22-1580225555434</coId><text>引入后，就可以使用getInitialProps进行获取后端接口数据了。</text><inline-styles><font-family><from>9</from><to>24</to><value>monospace</value></font-family><font-size><from>0</from><to>9</to><value>16</value></font-size><font-size><from>9</from><to>24</to><value>13</value></font-size><font-size><from>24</from><to>36</to><value>16</value></font-size><color><from>0</from><to>9</to><value>#777777</value></color><color><from>9</from><to>24</to><value>#ff502c</value></color><color><from>24</from><to>36</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>24-1580225555435</coId><text>getInitialProps中获取数据</text><inline-styles><bold><from>0</from><to>20</to><value>true</value></bold><font-family><from>0</from><to>15</to><value>monospace</value></font-family><font-size><from>0</from><to>15</to><value>13</value></font-size><font-size><from>15</from><to>20</to><value>20</value></font-size><color><from>0</from><to>15</to><value>#ff502c</value></color><color><from>15</from><to>20</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>57-1580225555436</coId><text>在xiaojiejie.js页面中使用getInitialProps，因为是远程获取数据，所以我们采用异步请求的方式。数据存在了Easy Mock中，地址如下：</text><inline-styles><font-family><from>1</from><to>14</to><value>monospace</value></font-family><font-family><from>19</from><to>34</to><value>monospace</value></font-family><font-family><from>64</from><to>73</to><value>monospace</value></font-family><font-size><from>0</from><to>1</to><value>16</value></font-size><font-size><from>1</from><to>14</to><value>13</value></font-size><font-size><from>14</from><to>19</to><value>16</value></font-size><font-size><from>19</from><to>34</to><value>13</value></font-size><font-size><from>34</from><to>64</to><value>16</value></font-size><font-size><from>64</from><to>73</to><value>13</value></font-size><font-size><from>73</from><to>80</to><value>16</value></font-size><color><from>0</from><to>1</to><value>#777777</value></color><color><from>1</from><to>14</to><value>#ff502c</value></color><color><from>14</from><to>19</to><value>#777777</value></color><color><from>19</from><to>34</to><value>#ff502c</value></color><color><from>34</from><to>64</to><value>#777777</value></color><color><from>64</from><to>73</to><value>#ff502c</value></color><color><from>73</from><to>80</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1000-1580390783531</coId><text>https://www.easy-mock.com/mock/5cfcce489dc7c36bd6da2c99/xiaojiejie/getList
</text><inline-styles><font-family><from>0</from><to>74</to><value>monospace</value></font-family><font-size><from>0</from><to>74</to><value>13</value></font-size><color><from>0</from><to>6</to><value>#cccccc</value></color><color><from>6</from><to>8</to><value>#ae81ff</value></color><color><from>8</from><to>25</to><value>#cccccc</value></color><color><from>25</from><to>32</to><value>#ae81ff</value></color><color><from>32</from><to>55</to><value>#cccccc</value></color><color><from>55</from><to>68</to><value>#ae81ff</value></color><color><from>68</from><to>74</to><value>#cccccc</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>26-1580225555438</coId><text>(你可以自己作一个数据源，因为这个可能也不稳定，不过半年内应该是可以的)</text><inline-styles><font-size><from>0</from><to>36</to><value>16</value></font-size><color><from>0</from><to>36</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5985-1580390792611</coId><text>Xiaojiejie.getInitialProps = async ()=&gt;{
    const promise =new Promise((resolve)=&gt;{
            axios('https://www.easy-mock.com/mock/5cfcce489dc7c36bd6da2c99/xiaojiejie/getList').then(
                (res)=&gt;{
                    console.log('远程数据结果：',res)
                    resolve(res.data.data)
                }
            )
    })
    return await promise
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>78-1580225555446</coId><text>获得数据后，我们需要把得到的数据传递给页面组件，用{}显示出来就可以了。</text><inline-styles><font-family><from>25</from><to>27</to><value>monospace</value></font-family><font-size><from>0</from><to>25</to><value>16</value></font-size><font-size><from>25</from><to>27</to><value>13</value></font-size><font-size><from>27</from><to>36</to><value>16</value></font-size><color><from>0</from><to>25</to><value>#777777</value></color><color><from>25</from><to>27</to><value>#ff502c</value></color><color><from>27</from><to>36</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>4929-1580390901853</coId><text>const Xiaojiejie = ({router,list})=&gt;{
    return (
        &lt;&gt;
            &lt;div&gt;{router.query.name},来为我们服务了 .&lt;br/&gt;{list}&lt;/div&gt;
            &lt;Link href="/"&gt;&lt;a&gt;返回首页&lt;/a&gt;&lt;/Link&gt;
        &lt;/&gt;
    )
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>24-1580225555453</coId><text>这样我们就利用Axios从远端获取了数据，为了方便你学习，这里给出xiaojiejie.js的所有代码。</text><inline-styles><font-family><from>33</from><to>46</to><value>monospace</value></font-family><font-size><from>0</from><to>33</to><value>16</value></font-size><font-size><from>33</from><to>46</to><value>13</value></font-size><font-size><from>46</from><to>52</to><value>16</value></font-size><color><from>0</from><to>33</to><value>#777777</value></color><color><from>33</from><to>46</to><value>#ff502c</value></color><color><from>46</from><to>52</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>3074-1580390895166</coId><text>import { withRouter} from 'next/router'
import Link from 'next/link'
import axios from 'axios'

const Xiaojiejie = ({router,list})=&gt;{
    return (
        &lt;&gt;
            &lt;div&gt;{router.query.name},来为我们服务了 .&lt;br/&gt;{list}&lt;/div&gt;
            &lt;Link href="/"&gt;&lt;a&gt;返回首页&lt;/a&gt;&lt;/Link&gt;
        &lt;/&gt;
    )
}

Xiaojiejie.getInitialProps = async ()=&gt;{
    const promise =new Promise((resolve)=&gt;{
            axios('https://www.easy-mock.com/mock/5cfcce489dc7c36bd6da2c99/xiaojiejie/getList').then(
                (res)=&gt;{
                    console.log('远程数据结果：',res)
                    resolve(res.data.data)
                }
            )
    })
    return await promise
}

export default withRouter(Xiaojiejie)
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>64-1580225555501</coId><text>这节课主要学习了在Next.js框架下在getInitialProps方法中利用Axios来获取远端数据的的操作，这个在实际项目中是必备技能，所以需要多练习几遍。</text><inline-styles><font-family><from>9</from><to>16</to><value>monospace</value></font-family><font-family><from>20</from><to>35</to><value>monospace</value></font-family><font-family><from>40</from><to>45</to><value>monospace</value></font-family><font-size><from>0</from><to>9</to><value>16</value></font-size><font-size><from>9</from><to>16</to><value>13</value></font-size><font-size><from>16</from><to>20</to><value>16</value></font-size><font-size><from>20</from><to>35</to><value>13</value></font-size><font-size><from>35</from><to>40</to><value>16</value></font-size><font-size><from>40</from><to>45</to><value>13</value></font-size><font-size><from>45</from><to>81</to><value>16</value></font-size><color><from>0</from><to>9</to><value>#777777</value></color><color><from>9</from><to>16</to><value>#ff502c</value></color><color><from>16</from><to>20</to><value>#777777</value></color><color><from>20</from><to>35</to><value>#ff502c</value></color><color><from>35</from><to>40</to><value>#777777</value></color><color><from>40</from><to>45</to><value>#ff502c</value></color><color><from>45</from><to>81</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>03-1580225555501</coId><text>p08：使用Style JSX编写页面的CSS样式</text><inline-styles><bold><from>0</from><to>25</to><value>true</value></bold><font-size><from>0</from><to>25</to><value>20</value></font-size><color><from>0</from><to>25</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>06-1580225555502</coId><text>在Next.js中引入一个CSS样式是不可以用的，如果想用，需要作额外的配置。因为框架为我们提供了一个style jsx特性，也就是把CSS用JSX的语法写出来。如果你以前学过Vue，那这种写法你是非常熟悉的。</text><inline-styles><font-family><from>1</from><to>8</to><value>monospace</value></font-family><font-family><from>51</from><to>60</to><value>monospace</value></font-family><font-size><from>0</from><to>1</to><value>16</value></font-size><font-size><from>1</from><to>8</to><value>13</value></font-size><font-size><from>8</from><to>51</to><value>16</value></font-size><font-size><from>51</from><to>60</to><value>13</value></font-size><font-size><from>60</from><to>105</to><value>16</value></font-size><color><from>0</from><to>1</to><value>#777777</value></color><color><from>1</from><to>8</to><value>#ff502c</value></color><color><from>8</from><to>51</to><value>#777777</value></color><color><from>51</from><to>60</to><value>#ff502c</value></color><color><from>60</from><to>105</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>31-1580225555503</coId><text>初识Style JSX语法 把字体设成蓝色</text><inline-styles><bold><from>0</from><to>21</to><value>true</value></bold><font-family><from>2</from><to>11</to><value>monospace</value></font-family><font-size><from>0</from><to>2</to><value>20</value></font-size><font-size><from>2</from><to>11</to><value>13</value></font-size><font-size><from>11</from><to>21</to><value>20</value></font-size><color><from>0</from><to>2</to><value>#666666</value></color><color><from>2</from><to>11</to><value>#ff502c</value></color><color><from>11</from><to>21</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>80-1580225555504</coId><text>在pages文件夹下，新建一个jspang.js文件。然后写入下面的代码：</text><inline-styles><font-family><from>1</from><to>6</to><value>monospace</value></font-family><font-family><from>15</from><to>24</to><value>monospace</value></font-family><font-size><from>0</from><to>1</to><value>16</value></font-size><font-size><from>1</from><to>6</to><value>13</value></font-size><font-size><from>6</from><to>15</to><value>16</value></font-size><font-size><from>15</from><to>24</to><value>13</value></font-size><font-size><from>24</from><to>37</to><value>16</value></font-size><color><from>0</from><to>1</to><value>#777777</value></color><color><from>1</from><to>6</to><value>#ff502c</value></color><color><from>6</from><to>15</to><value>#777777</value></color><color><from>15</from><to>24</to><value>#ff502c</value></color><color><from>24</from><to>37</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9650-1580390972989</coId><text>//jspang.js
function Jspang(){
    return (
        &lt;&gt;
            &lt;div&gt;技术胖免费前端教程&lt;/div&gt;
        &lt;/&gt;
    )
}
export default Jspang
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>30-1580225555507</coId><text>这个是一个最简单的页面，只在层中写了一句话。这时候我们想把页面中字的颜色变成蓝色，就可以使用Style JSX语法。直接在&lt;&gt;之间写下如下的代码:</text><inline-styles><font-family><from>46</from><to>55</to><value>monospace</value></font-family><font-family><from>61</from><to>63</to><value>monospace</value></font-family><font-size><from>0</from><to>46</to><value>16</value></font-size><font-size><from>46</from><to>55</to><value>13</value></font-size><font-size><from>55</from><to>61</to><value>16</value></font-size><font-size><from>61</from><to>63</to><value>13</value></font-size><font-size><from>63</from><to>73</to><value>16</value></font-size><color><from>0</from><to>46</to><value>#777777</value></color><color><from>46</from><to>55</to><value>#ff502c</value></color><color><from>55</from><to>61</to><value>#777777</value></color><color><from>61</from><to>63</to><value>#ff502c</value></color><color><from>63</from><to>73</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>3721-1580390981294</coId><text>&lt;style jsx&gt;
    {`
        div{color:blue;}
    `}
&lt;/style&gt;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>78-1580225555509</coId><text>主要所有的css样式需要用{}进行包裹，否则就会报错。这时候你打开浏览器进行预览，字体的颜色就变成了蓝色。</text><inline-styles><font-family><from>13</from><to>15</to><value>monospace</value></font-family><font-size><from>0</from><to>13</to><value>16</value></font-size><font-size><from>13</from><to>15</to><value>13</value></font-size><font-size><from>15</from><to>53</to><value>16</value></font-size><color><from>0</from><to>13</to><value>#777777</value></color><color><from>13</from><to>15</to><value>#ff502c</value></color><color><from>15</from><to>53</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>08-1580225555510</coId><text>自动加随机类名 不会污染全局CSS</text><inline-styles><bold><from>0</from><to>17</to><value>true</value></bold><font-size><from>0</from><to>17</to><value>20</value></font-size><color><from>0</from><to>17</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>80-1580225555511</coId><text>加入了Style jsx代码后，Next.js会自动加入一个随机类名，这样就防止了CSS的全局污染。比如我们把代码写成下面这样，然后在浏览器的控制台中进行查看，你会发现自动给我们加入了类名，类似jsx-xxxxxxxx。</text><inline-styles><font-family><from>3</from><to>12</to><value>monospace</value></font-family><font-family><from>16</from><to>23</to><value>monospace</value></font-family><font-family><from>97</from><to>109</to><value>monospace</value></font-family><font-size><from>0</from><to>3</to><value>16</value></font-size><font-size><from>3</from><to>12</to><value>13</value></font-size><font-size><from>12</from><to>16</to><value>16</value></font-size><font-size><from>16</from><to>23</to><value>13</value></font-size><font-size><from>23</from><to>97</to><value>16</value></font-size><font-size><from>97</from><to>109</to><value>13</value></font-size><font-size><from>109</from><to>110</to><value>16</value></font-size><color><from>0</from><to>3</to><value>#777777</value></color><color><from>3</from><to>12</to><value>#ff502c</value></color><color><from>12</from><to>16</to><value>#777777</value></color><color><from>16</from><to>23</to><value>#ff502c</value></color><color><from>23</from><to>97</to><value>#777777</value></color><color><from>97</from><to>109</to><value>#ff502c</value></color><color><from>109</from><to>110</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8475-1580391048115</coId><text>function Jspang(){
    return (
        &lt;&gt;
            &lt;div&gt;技术胖免费前端教程&lt;/div&gt;
            &lt;div className="jspang"&gt;技术胖免费前端教程&lt;/div&gt;

            &lt;style jsx&gt;
                {`
                    div { color:blue;}
                    .jspang {color:red;}
                `}
            &lt;/style&gt;
        &lt;/&gt;
    )
}
export default Jspang
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>95-1580225555517</coId><text>动态显示样式</text><inline-styles><bold><from>0</from><to>6</to><value>true</value></bold><font-size><from>0</from><to>6</to><value>20</value></font-size><color><from>0</from><to>6</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>56-1580225555517</coId><text>Next.js使用了Style jsx,所以定义动态的CSS样式就非常简单，比如现在要作一个按钮，点击一下，字体颜色就由蓝色变成了红色。下面是实现代码。</text><inline-styles><font-family><from>0</from><to>7</to><value>monospace</value></font-family><font-family><from>10</from><to>19</to><value>monospace</value></font-family><font-size><from>0</from><to>7</to><value>13</value></font-size><font-size><from>7</from><to>10</to><value>16</value></font-size><font-size><from>10</from><to>19</to><value>13</value></font-size><font-size><from>19</from><to>76</to><value>16</value></font-size><color><from>0</from><to>7</to><value>#ff502c</value></color><color><from>7</from><to>10</to><value>#777777</value></color><color><from>10</from><to>19</to><value>#ff502c</value></color><color><from>19</from><to>76</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5692-1580391097698</coId><text>import React, {useState} from 'react'

function Jspang(){
    //关键代码----------start-------
    const [color,setColor] = useState('blue')

    const changeColor=()=&gt;{

        setColor(color=='blue'?'red':'blue')
    }
     //关键代码----------end-------

    return (
        &lt;&gt;
            &lt;div&gt;技术胖免费前端教程&lt;/div&gt;
            &lt;div&gt;&lt;button onClick={changeColor}&gt;改变颜色&lt;/button&gt;&lt;/div&gt;
            &lt;style jsx&gt;
                {`
                    div { color:${color};}
                `}
            &lt;/style&gt;
        &lt;/&gt;
    )
}
export default Jspang
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>22-1580225555528</coId><text>这样就完成了CSS的动态显示，是不是非常容易。这节课主要学习了Style jsx的一些知识，有了这些知识，可以让我们的页面开始漂亮起来了。</text><inline-styles><font-family><from>31</from><to>40</to><value>monospace</value></font-family><font-size><from>0</from><to>31</to><value>16</value></font-size><font-size><from>31</from><to>40</to><value>13</value></font-size><font-size><from>40</from><to>69</to><value>16</value></font-size><color><from>0</from><to>31</to><value>#777777</value></color><color><from>31</from><to>40</to><value>#ff502c</value></color><color><from>40</from><to>69</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>14-1580225555529</coId><text>p09：Lazy Loading实现模块懒加载</text><inline-styles><bold><from>0</from><to>23</to><value>true</value></bold><font-size><from>0</from><to>23</to><value>20</value></font-size><color><from>0</from><to>23</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>58-1580225555530</coId><text>当项目越来越大的时候，模块的加载是需要管理的，如果不管理会出现首次打开过慢，页面长时间没有反应一系列问题。这时候可用Next.js提供的LazyLoading来解决这类问题。让模块和组件只有在用到的时候在进行加载，一般我把这种东西叫做“懒加载”.它一般分为两种情况，一种是懒加载（或者说是异步加载）模块，另一种是异步加载组件。他们使用的方法也稍有不同，下面我们就来分别学习一下。</text><inline-styles><font-family><from>58</from><to>65</to><value>monospace</value></font-family><font-family><from>68</from><to>79</to><value>monospace</value></font-family><font-size><from>0</from><to>58</to><value>16</value></font-size><font-size><from>58</from><to>65</to><value>13</value></font-size><font-size><from>65</from><to>68</to><value>16</value></font-size><font-size><from>68</from><to>79</to><value>13</value></font-size><font-size><from>79</from><to>189</to><value>16</value></font-size><color><from>0</from><to>58</to><value>#777777</value></color><color><from>58</from><to>65</to><value>#ff502c</value></color><color><from>65</from><to>68</to><value>#777777</value></color><color><from>68</from><to>79</to><value>#ff502c</value></color><color><from>79</from><to>189</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>46-1580225555531</coId><text>懒加载模块</text><inline-styles><bold><from>0</from><to>5</to><value>true</value></bold><font-size><from>0</from><to>5</to><value>20</value></font-size><color><from>0</from><to>5</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>18-1580225555532</coId><text>这里使用一个在开发中常用的模块Moment.js，它是一个JavaScript日期处理类库，使用前需要先进行安装，这里使用yarn来进行安装。</text><inline-styles><font-family><from>15</from><to>24</to><value>monospace</value></font-family><font-family><from>61</from><to>65</to><value>monospace</value></font-family><font-size><from>0</from><to>15</to><value>16</value></font-size><font-size><from>15</from><to>24</to><value>13</value></font-size><font-size><from>24</from><to>61</to><value>16</value></font-size><font-size><from>61</from><to>65</to><value>13</value></font-size><font-size><from>65</from><to>71</to><value>16</value></font-size><color><from>0</from><to>15</to><value>#777777</value></color><color><from>15</from><to>24</to><value>#ff502c</value></color><color><from>24</from><to>61</to><value>#777777</value></color><color><from>61</from><to>65</to><value>#ff502c</value></color><color><from>65</from><to>71</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>1999-1580391239776</coId><text>yarn add momnet
</text><inline-styles><font-family><from>0</from><to>15</to><value>monospace</value></font-family><font-size><from>0</from><to>15</to><value>13</value></font-size><color><from>0</from><to>5</to><value>#cccccc</value></color><color><from>5</from><to>8</to><value>#f92672</value></color><color><from>8</from><to>15</to><value>#cccccc</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>02-1580225555533</coId><text>然后在pages文件夹下，新建立一个time.js文件，并使用刚才的moment库来格式化时间，代码如下:</text><inline-styles><font-family><from>3</from><to>8</to><value>monospace</value></font-family><font-family><from>18</from><to>25</to><value>monospace</value></font-family><font-family><from>34</from><to>40</to><value>monospace</value></font-family><font-size><from>0</from><to>3</to><value>16</value></font-size><font-size><from>3</from><to>8</to><value>13</value></font-size><font-size><from>8</from><to>18</to><value>16</value></font-size><font-size><from>18</from><to>25</to><value>13</value></font-size><font-size><from>25</from><to>34</to><value>16</value></font-size><font-size><from>34</from><to>40</to><value>13</value></font-size><font-size><from>40</from><to>53</to><value>16</value></font-size><color><from>0</from><to>3</to><value>#777777</value></color><color><from>3</from><to>8</to><value>#ff502c</value></color><color><from>8</from><to>18</to><value>#777777</value></color><color><from>18</from><to>25</to><value>#ff502c</value></color><color><from>25</from><to>34</to><value>#777777</value></color><color><from>34</from><to>40</to><value>#ff502c</value></color><color><from>40</from><to>53</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>6686-1580391245945</coId><text>import React, {useState} from 'react'
import moment from 'moment'

function Time(){

    const [nowTime,setTime] = useState(Date.now())

    const changeTime=()=&gt;{
        setTime(moment(Date.now()).format())
    }
    return (
        &lt;&gt;
            &lt;div&gt;显示时间为:{nowTime}&lt;/div&gt;
            &lt;div&gt;&lt;button onClick={changeTime}&gt;改变时间格式&lt;/button&gt;&lt;/div&gt;
        &lt;/&gt;
    )
}
export default Time
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>22-1580225555542</coId><text>这个看起来很简单和清晰的案例，缺存在着一个潜在的风险，就是如何有半数以上页面使用了这个momnet的库，那它就会以公共库的形式进行打包发布，就算项目第一个页面不使用moment也会进行加载，这就是资源浪费，对于我这样有代码洁癖的良好程序员是绝对不允许的。下面我们就通过Lazy Loading来进行改造代码。</text><inline-styles><font-family><from>43</from><to>49</to><value>monospace</value></font-family><font-family><from>82</from><to>88</to><value>monospace</value></font-family><font-family><from>134</from><to>146</to><value>monospace</value></font-family><font-size><from>0</from><to>43</to><value>16</value></font-size><font-size><from>43</from><to>49</to><value>13</value></font-size><font-size><from>49</from><to>82</to><value>16</value></font-size><font-size><from>82</from><to>88</to><value>13</value></font-size><font-size><from>88</from><to>134</to><value>16</value></font-size><font-size><from>134</from><to>146</to><value>13</value></font-size><font-size><from>146</from><to>154</to><value>16</value></font-size><color><from>0</from><to>43</to><value>#777777</value></color><color><from>43</from><to>49</to><value>#ff502c</value></color><color><from>49</from><to>82</to><value>#777777</value></color><color><from>82</from><to>88</to><value>#ff502c</value></color><color><from>88</from><to>134</to><value>#777777</value></color><color><from>134</from><to>146</to><value>#ff502c</value></color><color><from>146</from><to>154</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8428-1580391327250</coId><text>import React, {useState} from 'react'
//删除import moment
function Time(){

    const [nowTime,setTime] = useState(Date.now())

    const changeTime= async ()=&gt;{ //把方法变成异步模式
        const moment = await import('moment') //等待moment加载完成
        setTime(moment.default(Date.now()).format()) //注意使用defalut
    }
    return (
        &lt;&gt;
            &lt;div&gt;显示时间为:{nowTime}&lt;/div&gt;
            &lt;div&gt;&lt;button onClick={changeTime}&gt;改变时间格式&lt;/button&gt;&lt;/div&gt;
        &lt;/&gt;
    )
}
export default Time
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>04-1580225555552</coId><text>这时候就就是懒加载了，可以在浏览器中按F12，看一下Network标签，当我们点击按钮时，才会加载1.js,它就是momnet.js的内容。</text><inline-styles><font-family><from>26</from><to>33</to><value>monospace</value></font-family><font-family><from>49</from><to>53</to><value>monospace</value></font-family><font-family><from>57</from><to>66</to><value>monospace</value></font-family><font-size><from>0</from><to>26</to><value>16</value></font-size><font-size><from>26</from><to>33</to><value>13</value></font-size><font-size><from>33</from><to>49</to><value>16</value></font-size><font-size><from>49</from><to>53</to><value>13</value></font-size><font-size><from>53</from><to>57</to><value>16</value></font-size><font-size><from>57</from><to>66</to><value>13</value></font-size><font-size><from>66</from><to>70</to><value>16</value></font-size><color><from>0</from><to>26</to><value>#777777</value></color><color><from>26</from><to>33</to><value>#ff502c</value></color><color><from>33</from><to>49</to><value>#777777</value></color><color><from>49</from><to>53</to><value>#ff502c</value></color><color><from>53</from><to>57</to><value>#777777</value></color><color><from>57</from><to>66</to><value>#ff502c</value></color><color><from>66</from><to>70</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>82-1580225555553</coId><text>懒加载自定义组件</text><inline-styles><bold><from>0</from><to>8</to><value>true</value></bold><font-size><from>0</from><to>8</to><value>20</value></font-size><color><from>0</from><to>8</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>71-1580225555554</coId><text>懒加载组件也是非常容易的，我们先来写一个最简单的组件，在components文件夹下建立一个one.js文件，然后编写如下代码：</text><inline-styles><font-family><from>28</from><to>38</to><value>monospace</value></font-family><font-family><from>46</from><to>52</to><value>monospace</value></font-family><font-size><from>0</from><to>28</to><value>16</value></font-size><font-size><from>28</from><to>38</to><value>13</value></font-size><font-size><from>38</from><to>46</to><value>16</value></font-size><font-size><from>46</from><to>52</to><value>13</value></font-size><font-size><from>52</from><to>64</to><value>16</value></font-size><color><from>0</from><to>28</to><value>#777777</value></color><color><from>28</from><to>38</to><value>#ff502c</value></color><color><from>38</from><to>46</to><value>#777777</value></color><color><from>46</from><to>52</to><value>#ff502c</value></color><color><from>52</from><to>64</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>7968-1580391409761</coId><text>export default ()=&gt;&lt;div&gt;Lazy Loading Component&lt;/div&gt;
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>71-1580225555556</coId><text>有了自定义组件后，先要在懒加载这个组件的文件中引入dynamic,我们这个就在上边新建的time.js文件中编写了。</text><inline-styles><font-family><from>25</from><to>32</to><value>monospace</value></font-family><font-family><from>44</from><to>51</to><value>monospace</value></font-family><font-size><from>0</from><to>25</to><value>16</value></font-size><font-size><from>25</from><to>32</to><value>13</value></font-size><font-size><from>32</from><to>44</to><value>16</value></font-size><font-size><from>44</from><to>51</to><value>13</value></font-size><font-size><from>51</from><to>58</to><value>16</value></font-size><color><from>0</from><to>25</to><value>#777777</value></color><color><from>25</from><to>32</to><value>#ff502c</value></color><color><from>32</from><to>44</to><value>#777777</value></color><color><from>44</from><to>51</to><value>#ff502c</value></color><color><from>51</from><to>58</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5062-1580391426381</coId><text>import dynamic from 'next/dynamic'
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>51-1580225555558</coId><text>引入后就可以懒加载自定义模块了，代码如下：</text><inline-styles><font-size><from>0</from><to>21</to><value>16</value></font-size><color><from>0</from><to>21</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9278-1580391460806</coId><text>import React, {useState} from 'react'
import dynamic from 'next/dynamic'

const One = dynamic(import('../components/one'))

function Time(){

    const [nowTime,setTime] = useState(Date.now())

    const changeTime= async ()=&gt;{
        const moment = await import('moment')

        setTime(moment.default(Date.now()).format())
    }
    return (
        &lt;&gt;
            &lt;div&gt;显示时间为:{nowTime}&lt;/div&gt;
            &lt;One/&gt;
            &lt;div&gt;&lt;button onClick={changeTime}&gt;改变时间格式&lt;/button&gt;&lt;/div&gt;
        &lt;/&gt;
    )
}
export default Time
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>87-1580225555568</coId><text>写完代码后，可以看到自定义组件是懒加载的，只有在jsx里用到时，才会被加载进来，如果不使用就不会被加载。</text><inline-styles><font-family><from>24</from><to>27</to><value>monospace</value></font-family><font-size><from>0</from><to>24</to><value>16</value></font-size><font-size><from>24</from><to>27</to><value>13</value></font-size><font-size><from>27</from><to>52</to><value>16</value></font-size><color><from>0</from><to>24</to><value>#777777</value></color><color><from>24</from><to>27</to><value>#ff502c</value></color><color><from>27</from><to>52</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>65-1580225555569</coId><text>当我们作的应用存在首页打开过慢和某个页面加载过慢时，就可以采用Lazy Loading的形式，用懒加载解决这些问题。</text><inline-styles><font-family><from>31</from><to>43</to><value>monospace</value></font-family><font-size><from>0</from><to>31</to><value>16</value></font-size><font-size><from>31</from><to>43</to><value>13</value></font-size><font-size><from>43</from><to>58</to><value>16</value></font-size><color><from>0</from><to>31</to><value>#777777</value></color><color><from>31</from><to>43</to><value>#ff502c</value></color><color><from>43</from><to>58</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>42-1580225555569</coId><text>p10：自定义Head 更加友好的SEO操作</text><inline-styles><bold><from>0</from><to>22</to><value>true</value></bold><font-size><from>0</from><to>22</to><value>20</value></font-size><color><from>0</from><to>22</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>80-1580225555570</coId><text>既然用了Next.js框架，你就是希望服务端渲染，进行SEO操作。那为了更好的进行SEO优化，可以自己定制标签，定义一般有两种方式，这节课都学习一下。</text><inline-styles><font-family><from>4</from><to>11</to><value>monospace</value></font-family><font-size><from>0</from><to>4</to><value>16</value></font-size><font-size><from>4</from><to>11</to><value>13</value></font-size><font-size><from>11</from><to>75</to><value>16</value></font-size><color><from>0</from><to>4</to><value>#777777</value></color><color><from>4</from><to>11</to><value>#ff502c</value></color><color><from>11</from><to>75</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>23-1580225555571</coId><text>方法1：在各个页面加上标签</text><inline-styles><bold><from>0</from><to>13</to><value>true</value></bold><font-size><from>0</from><to>13</to><value>20</value></font-size><color><from>0</from><to>13</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>93-1580225555571</coId><text>先在/pages文件夹下面建立一个header.js文件，然后写一个最简单的Hooks页面，代码如下:</text><inline-styles><font-family><from>2</from><to>8</to><value>monospace</value></font-family><font-family><from>17</from><to>26</to><value>monospace</value></font-family><font-family><from>38</from><to>43</to><value>monospace</value></font-family><font-size><from>0</from><to>2</to><value>16</value></font-size><font-size><from>2</from><to>8</to><value>13</value></font-size><font-size><from>8</from><to>17</to><value>16</value></font-size><font-size><from>17</from><to>26</to><value>13</value></font-size><font-size><from>26</from><to>38</to><value>16</value></font-size><font-size><from>38</from><to>43</to><value>13</value></font-size><font-size><from>43</from><to>51</to><value>16</value></font-size><color><from>0</from><to>2</to><value>#777777</value></color><color><from>2</from><to>8</to><value>#ff502c</value></color><color><from>8</from><to>17</to><value>#777777</value></color><color><from>17</from><to>26</to><value>#ff502c</value></color><color><from>26</from><to>38</to><value>#777777</value></color><color><from>38</from><to>43</to><value>#ff502c</value></color><color><from>43</from><to>51</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>6037-1580391523041</coId><text>function Header(){ 
    return (&lt;div&gt;JSPang.com&lt;/div&gt;)
}
export default Header
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>61-1580225555575</coId><text>写完后到浏览器中预览一下，可以发现title部分并没有任何内容，显示的是localhost:3000/header,接下来就自定义下。自定义需要先进行引入next/head。</text><inline-styles><font-family><from>36</from><to>57</to><value>monospace</value></font-family><font-family><from>77</from><to>86</to><value>monospace</value></font-family><font-size><from>0</from><to>36</to><value>16</value></font-size><font-size><from>36</from><to>57</to><value>13</value></font-size><font-size><from>57</from><to>77</to><value>16</value></font-size><font-size><from>77</from><to>86</to><value>13</value></font-size><font-size><from>86</from><to>87</to><value>16</value></font-size><color><from>0</from><to>36</to><value>#777777</value></color><color><from>36</from><to>57</to><value>#ff502c</value></color><color><from>57</from><to>77</to><value>#777777</value></color><color><from>77</from><to>86</to><value>#ff502c</value></color><color><from>86</from><to>87</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9426-1580391529643</coId><text>import Head from 'next/head'
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>61-1580225555577</coId><text>引入后你就可以写一些列的头部标签了，全部代码如下:</text><inline-styles><font-size><from>0</from><to>25</to><value>16</value></font-size><color><from>0</from><to>25</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5910-1580391553262</coId><text>import Head from 'next/head'
function Header(){ 
    return (
        &lt;&gt;
            &lt;Head&gt;
                &lt;title&gt;技术胖是最胖的！&lt;/title&gt;
                &lt;meta charSet='utf-8' /&gt;
            &lt;/Head&gt;
            &lt;div&gt;JSPang.com&lt;/div&gt;

        &lt;/&gt; 
    )
}
export default Header
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>27-1580225555582</coId><text>这时候再打开浏览器预览，你发现已经有了title。</text><inline-styles><font-family><from>19</from><to>24</to><value>monospace</value></font-family><font-size><from>0</from><to>19</to><value>16</value></font-size><font-size><from>19</from><to>24</to><value>13</value></font-size><font-size><from>24</from><to>25</to><value>16</value></font-size><color><from>0</from><to>19</to><value>#777777</value></color><color><from>19</from><to>24</to><value>#ff502c</value></color><color><from>24</from><to>25</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>25-1580225555583</coId><text>方法2：定义全局的</text><inline-styles><bold><from>0</from><to>9</to><value>true</value></bold><font-size><from>0</from><to>9</to><value>20</value></font-size><color><from>0</from><to>9</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>39-1580225555583</coId><text>这种方法相当于自定义了一个组件，然后把在组件里定义好，以后每个页面都使用这个组件,其实这种方法用处不大，也不灵活。因为Next.js已经把封装好了，本身就是一个组件，我们再次封装的意义不大。</text><inline-styles><font-family><from>59</from><to>66</to><value>monospace</value></font-family><font-size><from>0</from><to>59</to><value>16</value></font-size><font-size><from>59</from><to>66</to><value>13</value></font-size><font-size><from>66</from><to>95</to><value>16</value></font-size><color><from>0</from><to>59</to><value>#777777</value></color><color><from>59</from><to>66</to><value>#ff502c</value></color><color><from>66</from><to>95</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>83-1580225555585</coId><text>比如在components文件夹下面新建立一个myheader.js,然后写入下面的代码:</text><inline-styles><font-family><from>3</from><to>13</to><value>monospace</value></font-family><font-family><from>23</from><to>34</to><value>monospace</value></font-family><font-size><from>0</from><to>3</to><value>16</value></font-size><font-size><from>3</from><to>13</to><value>13</value></font-size><font-size><from>13</from><to>23</to><value>16</value></font-size><font-size><from>23</from><to>34</to><value>13</value></font-size><font-size><from>34</from><to>45</to><value>16</value></font-size><color><from>0</from><to>3</to><value>#777777</value></color><color><from>3</from><to>13</to><value>#ff502c</value></color><color><from>13</from><to>23</to><value>#777777</value></color><color><from>23</from><to>34</to><value>#ff502c</value></color><color><from>34</from><to>45</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8597-1580391580773</coId><text>import Head from 'next/head'

const MyHeader = ()=&gt;{
    return (
        &lt;&gt;
            &lt;Head&gt;
                &lt;title&gt; jspang.com &lt;/title&gt;   
            &lt;/Head&gt;
        &lt;/&gt;
    )
}

export default MyHeader
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>30-1580225555589</coId><text>这时候把刚才编写的header.js页面改写一下，引入自定义的myheader，在页面里进行使用，最后在浏览器中预览，也是可以得到title的。</text><inline-styles><font-family><from>9</from><to>18</to><value>monospace</value></font-family><font-family><from>31</from><to>39</to><value>monospace</value></font-family><font-family><from>65</from><to>70</to><value>monospace</value></font-family><font-size><from>0</from><to>9</to><value>16</value></font-size><font-size><from>9</from><to>18</to><value>13</value></font-size><font-size><from>18</from><to>31</to><value>16</value></font-size><font-size><from>31</from><to>39</to><value>13</value></font-size><font-size><from>39</from><to>65</to><value>16</value></font-size><font-size><from>65</from><to>70</to><value>13</value></font-size><font-size><from>70</from><to>72</to><value>16</value></font-size><color><from>0</from><to>9</to><value>#777777</value></color><color><from>9</from><to>18</to><value>#ff502c</value></color><color><from>18</from><to>31</to><value>#777777</value></color><color><from>31</from><to>39</to><value>#ff502c</value></color><color><from>39</from><to>65</to><value>#777777</value></color><color><from>65</from><to>70</to><value>#ff502c</value></color><color><from>70</from><to>72</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>7832-1580391762810</coId><text>import Myheader from '../components/myheader'
function Header(){ 
    return (
        &lt;&gt;
            &lt;Myheader /&gt;
            &lt;div&gt;JSPang.com&lt;/div&gt;

        &lt;/&gt; 
    )
}
export default Header
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>90-1580225555593</coId><text>这节课讲解了一下Next.js的标签如何使用和自定义，这个在工作中的每个页面都会用到，所以你一定要学会哦。</text><inline-styles><font-family><from>8</from><to>15</to><value>monospace</value></font-family><font-size><from>0</from><to>8</to><value>16</value></font-size><font-size><from>8</from><to>15</to><value>13</value></font-size><font-size><from>15</from><to>53</to><value>16</value></font-size><color><from>0</from><to>8</to><value>#777777</value></color><color><from>8</from><to>15</to><value>#ff502c</value></color><color><from>15</from><to>53</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>77-1580225555594</coId><text>p11：Next.js框架下使用Ant Design UI </text><inline-styles><bold><from>0</from><to>30</to><value>true</value></bold><font-size><from>0</from><to>30</to><value>20</value></font-size><color><from>0</from><to>30</to><value>#333333</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>91-1580225555596</coId><text>让Next.js支持CSS文件</text><inline-styles><bold><from>0</from><to>15</to><value>true</value></bold><font-size><from>0</from><to>15</to><value>20</value></font-size><color><from>0</from><to>15</to><value>#666666</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>17-1580225555597</coId><text>在前面的课程中我讲过Next.js默认是不支持CSS文件的，它用的是style jsx，也就是说它是不支持直接用import进行引入css的。</text><inline-styles><font-family><from>10</from><to>17</to><value>monospace</value></font-family><font-family><from>34</from><to>43</to><value>monospace</value></font-family><font-family><from>56</from><to>62</to><value>monospace</value></font-family><font-family><from>66</from><to>69</to><value>monospace</value></font-family><font-size><from>0</from><to>10</to><value>16</value></font-size><font-size><from>10</from><to>17</to><value>13</value></font-size><font-size><from>17</from><to>34</to><value>16</value></font-size><font-size><from>34</from><to>43</to><value>13</value></font-size><font-size><from>43</from><to>56</to><value>16</value></font-size><font-size><from>56</from><to>62</to><value>13</value></font-size><font-size><from>62</from><to>66</to><value>16</value></font-size><font-size><from>66</from><to>69</to><value>13</value></font-size><font-size><from>69</from><to>71</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#777777</value></color><color><from>10</from><to>17</to><value>#ff502c</value></color><color><from>17</from><to>34</to><value>#777777</value></color><color><from>34</from><to>43</to><value>#ff502c</value></color><color><from>43</from><to>56</to><value>#777777</value></color><color><from>56</from><to>62</to><value>#ff502c</value></color><color><from>62</from><to>66</to><value>#777777</value></color><color><from>66</from><to>69</to><value>#ff502c</value></color><color><from>69</from><to>71</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>68-1580225555598</coId><text>比如在根目录下新建一个文件夹static（其实正常情况下你应该已经有这个文件了），然后在文件夹下建立一个test.css文件，写入一些CSS Style。</text><inline-styles><font-family><from>14</from><to>20</to><value>monospace</value></font-family><font-family><from>52</from><to>60</to><value>monospace</value></font-family><font-family><from>67</from><to>76</to><value>monospace</value></font-family><font-size><from>0</from><to>14</to><value>16</value></font-size><font-size><from>14</from><to>20</to><value>13</value></font-size><font-size><from>20</from><to>52</to><value>16</value></font-size><font-size><from>52</from><to>60</to><value>13</value></font-size><font-size><from>60</from><to>67</to><value>16</value></font-size><font-size><from>67</from><to>76</to><value>13</value></font-size><font-size><from>76</from><to>77</to><value>16</value></font-size><color><from>0</from><to>14</to><value>#777777</value></color><color><from>14</from><to>20</to><value>#ff502c</value></color><color><from>20</from><to>52</to><value>#777777</value></color><color><from>52</from><to>60</to><value>#ff502c</value></color><color><from>60</from><to>67</to><value>#777777</value></color><color><from>67</from><to>76</to><value>#ff502c</value></color><color><from>76</from><to>77</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>9810-1580391875142</coId><text>body{
    color:green;
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>01-1580225555600</coId><text>然后用import在header.js里引入。</text><inline-styles><font-family><from>3</from><to>9</to><value>monospace</value></font-family><font-family><from>10</from><to>19</to><value>monospace</value></font-family><font-size><from>0</from><to>3</to><value>16</value></font-size><font-size><from>3</from><to>9</to><value>13</value></font-size><font-size><from>9</from><to>10</to><value>16</value></font-size><font-size><from>10</from><to>19</to><value>13</value></font-size><font-size><from>19</from><to>23</to><value>16</value></font-size><color><from>0</from><to>3</to><value>#777777</value></color><color><from>3</from><to>9</to><value>#ff502c</value></color><color><from>9</from><to>10</to><value>#777777</value></color><color><from>10</from><to>19</to><value>#ff502c</value></color><color><from>19</from><to>23</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>8128-1580391891429</coId><text>import '../static/test.css'
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>85-1580225555602</coId><text>写完这些后到浏览器中进行预览，没有任何输出结果而且报错了。这说明Next.js默认是不支持CSS样式引入的，要进行一些必要的设置，才可以完成。</text><inline-styles><font-family><from>32</from><to>39</to><value>monospace</value></font-family><font-size><from>0</from><to>32</to><value>16</value></font-size><font-size><from>32</from><to>39</to><value>13</value></font-size><font-size><from>39</from><to>71</to><value>16</value></font-size><color><from>0</from><to>32</to><value>#777777</value></color><color><from>32</from><to>39</to><value>#ff502c</value></color><color><from>39</from><to>71</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>71-1580225555602</coId><text>开始进行配置，让Next.js支持CSS文件</text><inline-styles><bold><from>0</from><to>22</to><value>true</value></bold><font-size><from>0</from><to>22</to><value>16</value></font-size><color><from>0</from><to>22</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>40-1580225555603</coId><text>先用yarn命令来安装@zeit/next-css包，它的主要功能就是让Next.js可以加载CSS文件，有了这个包才可以进行配置。</text><inline-styles><font-family><from>2</from><to>6</to><value>monospace</value></font-family><font-family><from>11</from><to>25</to><value>monospace</value></font-family><font-family><from>36</from><to>43</to><value>monospace</value></font-family><font-size><from>0</from><to>2</to><value>16</value></font-size><font-size><from>2</from><to>6</to><value>13</value></font-size><font-size><from>6</from><to>11</to><value>16</value></font-size><font-size><from>11</from><to>25</to><value>13</value></font-size><font-size><from>25</from><to>36</to><value>16</value></font-size><font-size><from>36</from><to>43</to><value>13</value></font-size><font-size><from>43</from><to>66</to><value>16</value></font-size><color><from>0</from><to>2</to><value>#777777</value></color><color><from>2</from><to>6</to><value>#ff502c</value></color><color><from>6</from><to>11</to><value>#777777</value></color><color><from>11</from><to>25</to><value>#ff502c</value></color><color><from>25</from><to>36</to><value>#777777</value></color><color><from>36</from><to>43</to><value>#ff502c</value></color><color><from>43</from><to>66</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>4440-1580391909937</coId><text>yarn add @zeit/next-css
</text><inline-styles><font-family><from>0</from><to>4</to><value>monospace</value></font-family><font-family><from>5</from><to>23</to><value>monospace</value></font-family><font-size><from>0</from><to>4</to><value>13</value></font-size><font-size><from>5</from><to>23</to><value>13</value></font-size><color><from>0</from><to>4</to><value>#f92672</value></color><color><from>5</from><to>8</to><value>#f92672</value></color><color><from>8</from><to>10</to><value>#cccccc</value></color><color><from>10</from><to>14</to><value>#f92672</value></color><color><from>14</from><to>15</to><value>#cccccc</value></color><color><from>15</from><to>19</to><value>#f92672</value></color><color><from>19</from><to>20</to><value>#cccccc</value></color><color><from>20</from><to>23</to><value>#f92672</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>8258-1580386286703</coId><text>包安装好以后就可以进行配置文件的编写了，建立一个next.config.js.这个就是Next.js的总配置文件（如果感兴趣可以自学一下）。</text><inline-styles><font-family><from>24</from><to>38</to><value>monospace</value></font-family><font-family><from>43</from><to>50</to><value>monospace</value></font-family><font-size><from>0</from><to>24</to><value>16</value></font-size><font-size><from>24</from><to>38</to><value>13</value></font-size><font-size><from>38</from><to>43</to><value>16</value></font-size><font-size><from>43</from><to>50</to><value>13</value></font-size><font-size><from>50</from><to>70</to><value>16</value></font-size><color><from>0</from><to>24</to><value>#777777</value></color><color><from>24</from><to>38</to><value>#ff502c</value></color><color><from>38</from><to>43</to><value>#777777</value></color><color><from>43</from><to>50</to><value>#ff502c</value></color><color><from>50</from><to>70</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>5783-1580391954610</coId><text>const withCss = require('@zeit/next-css')

if(typeof require !== 'undefined'){
    require.extensions['.css']=file=&gt;{}
}

module.exports = withCss({})
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>23-1580225555609</coId><text>这段代码你有兴趣是可以看看的，其实我对配置文件基本不记忆的，因为配置文件就是别人规定的配置，你写就好。比如要使用CSS就可以把上面这段代码输入到放入到里边的就好了。</text><inline-styles><font-size><from>0</from><to>82</to><value>16</value></font-size><color><from>0</from><to>82</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>01-1580225555610</coId><text>修改配置文件需要重新启一下服务，重启服务可以让配置生效，这时候你到浏览器中可以发现CSS文件已经生效了，字变成了绿色。</text><inline-styles><font-size><from>0</from><to>59</to><value>16</value></font-size><color><from>0</from><to>59</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>69-1580225555611</coId><text>按需加载Ant Design</text><inline-styles><bold><from>0</from><to>14</to><value>true</value></bold><font-family><from>4</from><to>14</to><value>monospace</value></font-family><font-size><from>0</from><to>4</to><value>20</value></font-size><font-size><from>4</from><to>14</to><value>13</value></font-size><color><from>0</from><to>4</to><value>#666666</value></color><color><from>4</from><to>14</to><value>#ff502c</value></color></inline-styles><styles><font-size>20</font-size></styles></para><para><coId>13-1580225555611</coId><text>加载Ant Design在我们打包的时候会把Ant Design的所有包都打包进来，这样就会产生性能问题，让项目加载变的非常慢。这肯定是不行的，现在的目的是只加载项目中用到的模块，这就需要我们用到一个babel-plugin-import文件。</text><inline-styles><font-family><from>2</from><to>12</to><value>monospace</value></font-family><font-family><from>22</from><to>32</to><value>monospace</value></font-family><font-family><from>100</from><to>119</to><value>monospace</value></font-family><font-size><from>0</from><to>2</to><value>16</value></font-size><font-size><from>2</from><to>12</to><value>13</value></font-size><font-size><from>12</from><to>22</to><value>16</value></font-size><font-size><from>22</from><to>32</to><value>13</value></font-size><font-size><from>32</from><to>100</to><value>16</value></font-size><font-size><from>100</from><to>119</to><value>13</value></font-size><font-size><from>119</from><to>122</to><value>16</value></font-size><color><from>0</from><to>2</to><value>#777777</value></color><color><from>2</from><to>12</to><value>#ff502c</value></color><color><from>12</from><to>22</to><value>#777777</value></color><color><from>22</from><to>32</to><value>#ff502c</value></color><color><from>32</from><to>100</to><value>#777777</value></color><color><from>100</from><to>119</to><value>#ff502c</value></color><color><from>119</from><to>122</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>14-1580225555612</coId><text>** 先来安装Ant Design库 **</text><inline-styles><font-family><from>7</from><to>17</to><value>monospace</value></font-family><font-size><from>0</from><to>7</to><value>16</value></font-size><font-size><from>7</from><to>17</to><value>13</value></font-size><font-size><from>17</from><to>21</to><value>16</value></font-size><color><from>0</from><to>7</to><value>#777777</value></color><color><from>7</from><to>17</to><value>#ff502c</value></color><color><from>17</from><to>21</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>87-1580225555613</coId><text>直接使用yarn来安装就可以。</text><inline-styles><font-size><from>0</from><to>15</to><value>16</value></font-size><color><from>0</from><to>15</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>3261-1580391981527</coId><text>yarn add antd
</text><inline-styles><font-family><from>0</from><to>13</to><value>monospace</value></font-family><font-size><from>0</from><to>13</to><value>13</value></font-size><color><from>0</from><to>5</to><value>#cccccc</value></color><color><from>5</from><to>8</to><value>#f92672</value></color><color><from>8</from><to>13</to><value>#cccccc</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>67-1580225555614</coId><text>** 安装和配置babel-plugin-import 插件 **</text><inline-styles><font-family><from>8</from><to>27</to><value>monospace</value></font-family><font-size><from>0</from><to>8</to><value>16</value></font-size><font-size><from>8</from><to>27</to><value>13</value></font-size><font-size><from>27</from><to>33</to><value>16</value></font-size><color><from>0</from><to>8</to><value>#777777</value></color><color><from>8</from><to>27</to><value>#ff502c</value></color><color><from>27</from><to>33</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>54-1580225555614</coId><text>其实babel-plugin-import我讲Vue.js和Webpack.js的时候都一次讲过这个插件，这里我们就再来讲一下，先进行安装。</text><inline-styles><font-family><from>2</from><to>21</to><value>monospace</value></font-family><font-size><from>0</from><to>2</to><value>16</value></font-size><font-size><from>2</from><to>21</to><value>13</value></font-size><font-size><from>21</from><to>70</to><value>16</value></font-size><color><from>0</from><to>2</to><value>#777777</value></color><color><from>2</from><to>21</to><value>#ff502c</value></color><color><from>21</from><to>70</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>7072-1580391997241</coId><text>yarn add babel-plugin-import
</text><inline-styles><font-family><from>0</from><to>4</to><value>monospace</value></font-family><font-family><from>5</from><to>28</to><value>monospace</value></font-family><font-size><from>0</from><to>4</to><value>13</value></font-size><font-size><from>5</from><to>28</to><value>13</value></font-size><color><from>0</from><to>4</to><value>#66d9ef</value></color><color><from>5</from><to>28</to><value>#f92672</value></color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>11-1580225555616</coId><text>安装完成后，在项目根目录建立.babelrc文件，然后写入如下配置文件。</text><inline-styles><font-family><from>14</from><to>22</to><value>monospace</value></font-family><font-size><from>0</from><to>14</to><value>16</value></font-size><font-size><from>14</from><to>22</to><value>13</value></font-size><font-size><from>22</from><to>36</to><value>16</value></font-size><color><from>0</from><to>14</to><value>#777777</value></color><color><from>14</from><to>22</to><value>#ff502c</value></color><color><from>22</from><to>36</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>3740-1580392008874</coId><text>{
    "presets":["next/babel"],  //Next.js的总配置文件，相当于继承了它本身的所有配置
    "plugins":[     //增加新的插件，这个插件就是让antd可以按需引入，包括CSS
        [
            "import",
            {
                "libraryName":"antd",
                "style":"css"
            }
        ]
    ]
}
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>27-1580225555620</coId><text>这样配置好了以后，webpack就不会默认把整个Ant Design的包都进行打包到生产环境了，而是我们使用那个组件就打包那个组件,同样CSS也是按需打包的。</text><inline-styles><font-family><from>9</from><to>16</to><value>monospace</value></font-family><font-family><from>24</from><to>34</to><value>monospace</value></font-family><font-size><from>0</from><to>9</to><value>16</value></font-size><font-size><from>9</from><to>16</to><value>13</value></font-size><font-size><from>16</from><to>24</to><value>16</value></font-size><font-size><from>24</from><to>34</to><value>13</value></font-size><font-size><from>34</from><to>79</to><value>16</value></font-size><color><from>0</from><to>9</to><value>#777777</value></color><color><from>9</from><to>16</to><value>#ff502c</value></color><color><from>16</from><to>24</to><value>#777777</value></color><color><from>24</from><to>34</to><value>#ff502c</value></color><color><from>34</from><to>79</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>05-1580225555621</coId><text>通过上面的配置，就可以愉快的在Next.js中使用Ant Desgin，让页面变的好看起来。</text><inline-styles><font-family><from>15</from><to>22</to><value>monospace</value></font-family><font-family><from>25</from><to>35</to><value>monospace</value></font-family><font-size><from>0</from><to>15</to><value>16</value></font-size><font-size><from>15</from><to>22</to><value>13</value></font-size><font-size><from>22</from><to>25</to><value>16</value></font-size><font-size><from>25</from><to>35</to><value>13</value></font-size><font-size><from>35</from><to>46</to><value>16</value></font-size><color><from>0</from><to>15</to><value>#777777</value></color><color><from>15</from><to>22</to><value>#ff502c</value></color><color><from>22</from><to>25</to><value>#777777</value></color><color><from>25</from><to>35</to><value>#ff502c</value></color><color><from>35</from><to>46</to><value>#777777</value></color></inline-styles><styles><font-size>16</font-size></styles></para><para><coId>38-1580225555622</coId><text>可以在header.js里，引入&lt;Button&gt;组件，并进行使用，代码如下。</text><inline-styles><font-family><from>3</from><to>12</to><value>monospace</value></font-family><font-family><from>16</from><to>24</to><value>monospace</value></font-family><font-size><from>0</from><to>3</to><value>16</value></font-size><font-size><from>3</from><to>12</to><value>13</value></font-size><font-size><from>12</from><to>16</to><value>16</value></font-size><font-size><from>16</from><to>24</to><value>8</value></font-size><font-size><from>24</from><to>38</to><value>16</value></font-size><color><from>0</from><to>3</to><value>#777777</value></color><color><from>3</from><to>12</to><value>#ff502c</value></color><color><from>12</from><to>16</to><value>#777777</value></color><color><from>16</from><to>24</to><value>#ff502c</value></color><color><from>24</from><to>38</to><value>#777777</value></color><back-color><from>14</from><to>16</to><value>#ffffff</value></back-color><back-color><from>16</from><to>24</to><value>#fff5f5</value></back-color><back-color><from>24</from><to>38</to><value>#ffffff</value></back-color></inline-styles><styles><font-size>16</font-size></styles></para><code><coId>2138-1580392131810</coId><text>import Myheader from '../components/myheader'
import {Button} from 'antd'


import '../static/test.css'
function Header(){ 
    return (
        &lt;&gt;
            &lt;Myheader /&gt;
            &lt;div&gt;JSPang.com&lt;/div&gt;
            &lt;div&gt;&lt;Button&gt;我是按钮&lt;/Button&gt;&lt;/div&gt;

        &lt;/&gt; 
    )
}
export default Header
</text><inline-styles/><styles/><language>javascript</language><theme>default</theme></code><para><coId>6396-1580392131810</coId><text/><inline-styles/><styles/></para><para><coId>6334-1580392222570</coId><text>p12：Next.js生产环境打包（完结）</text><inline-styles><bold><from>0</from><to>21</to><value>true</value></bold><font-size><from>0</from><to>21</to><value>20</value></font-size><color><from>0</from><to>21</to><value>#333333</value></color></inline-styles><styles/></para><para><coId>3947-1580392215644</coId><text>大部分的Next.js基础知识都作了讲解，我相信你通过11集视频的学习，也一定能入门Next.js这个框架了，但就在小伙伴准备进行打包项目时，遇到了问题，所谓这节课讲一下如何进行打包和打包中的一些坑。</text><inline-styles><font-family><from>42</from><to>49</to><value>monospace</value></font-family><font-size><from>0</from><to>42</to><value>16</value></font-size><font-size><from>42</from><to>49</to><value>8</value></font-size><font-size><from>49</from><to>100</to><value>16</value></font-size><color><from>0</from><to>42</to><value>#777777</value></color><color><from>42</from><to>49</to><value>#ff502c</value></color><color><from>49</from><to>100</to><value>#777777</value></color><back-color><from>0</from><to>42</to><value>#ffffff</value></back-color><back-color><from>42</from><to>49</to><value>#fff5f5</value></back-color><back-color><from>49</from><to>100</to><value>#ffffff</value></back-color></inline-styles><styles/></para><para><coId>7223-1580392240886</coId><text>其实Next.js大打包时非常简单的，只要一个命令就可以打包成功。但是当你使用了Ant Desgin后，在打包的时候会遇到一些坑。</text><inline-styles><font-family><from>40</from><to>50</to><value>monospace</value></font-family><font-size><from>0</from><to>40</to><value>16</value></font-size><font-size><from>40</from><to>50</to><value>8</value></font-size><font-size><from>50</from><to>65</to><value>16</value></font-size><color><from>0</from><to>40</to><value>#777777</value></color><color><from>40</from><to>50</to><value>#ff502c</value></color><color><from>50</from><to>65</to><value>#777777</value></color><back-color><from>0</from><to>40</to><value>#ffffff</value></back-color><back-color><from>40</from><to>50</to><value>#fff5f5</value></back-color><back-color><from>50</from><to>65</to><value>#ffffff</value></back-color></inline-styles><styles/></para><para><coId>1230-1580392241243</coId><text>打包 ：next build</text><inline-styles><font-size><from>0</from><to>14</to><value>16</value></font-size><color><from>0</from><to>14</to><value>#777777</value></color><back-color><from>0</from><to>14</to><value>#ffffff</value></back-color></inline-styles><styles><indent>1</indent></styles></para><para><coId>9961-1580392241243</coId><text>运行：next start -p 80</text><inline-styles><font-size><from>0</from><to>19</to><value>16</value></font-size><color><from>0</from><to>19</to><value>#777777</value></color><back-color><from>0</from><to>19</to><value>#ffffff</value></back-color></inline-styles><styles><indent>1</indent></styles></para><para><coId>2390-1580392241243</coId><text>先把这两个命令配置到package.json文件里，比如配置成下面的样子。</text><inline-styles><font-family><from>10</from><to>22</to><value>monospace</value></font-family><font-size><from>0</from><to>10</to><value>16</value></font-size><font-size><from>10</from><to>22</to><value>8</value></font-size><font-size><from>22</from><to>37</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#777777</value></color><color><from>10</from><to>22</to><value>#ff502c</value></color><color><from>22</from><to>37</to><value>#777777</value></color><back-color><from>0</from><to>10</to><value>#ffffff</value></back-color><back-color><from>10</from><to>22</to><value>#fff5f5</value></back-color><back-color><from>22</from><to>37</to><value>#ffffff</value></back-color></inline-styles><styles/></para><code><coId>2223-1580392251682</coId><text>"scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start -p 80"
},
</text><inline-styles><font-family><from>0</from><to>91</to><value>monospace</value></font-family><font-size><from>0</from><to>91</to><value>8</value></font-size><color><from>0</from><to>9</to><value>#e6db74</value></color><color><from>9</from><to>15</to><value>#ffffff</value></color><color><from>15</from><to>20</to><value>#e6db74</value></color><color><from>20</from><to>22</to><value>#ffffff</value></color><color><from>22</from><to>32</to><value>#e6db74</value></color><color><from>32</from><to>36</to><value>#ffffff</value></color><color><from>36</from><to>43</to><value>#e6db74</value></color><color><from>43</from><to>45</to><value>#ffffff</value></color><color><from>45</from><to>57</to><value>#e6db74</value></color><color><from>57</from><to>61</to><value>#ffffff</value></color><color><from>61</from><to>68</to><value>#e6db74</value></color><color><from>68</from><to>70</to><value>#ffffff</value></color><color><from>70</from><to>88</to><value>#e6db74</value></color><color><from>88</from><to>91</to><value>#ffffff</value></color><back-color><from>0</from><to>91</to><value>#283646</value></back-color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>7641-1580392241243</coId><text>然后在终端里运行一下yarn build，如果这时候报错，其实是我们在加入Ant Design的样式时产生的，这个已经在Ant Design的Github上被提出了，但目前还没有被修改，你可以改完全局引入CSS解决问题。</text><inline-styles><font-family><from>10</from><to>20</to><value>monospace</value></font-family><font-family><from>37</from><to>47</to><value>monospace</value></font-family><font-family><from>60</from><to>70</to><value>monospace</value></font-family><font-size><from>0</from><to>10</to><value>16</value></font-size><font-size><from>10</from><to>20</to><value>8</value></font-size><font-size><from>20</from><to>37</to><value>16</value></font-size><font-size><from>37</from><to>47</to><value>8</value></font-size><font-size><from>47</from><to>60</to><value>16</value></font-size><font-size><from>60</from><to>70</to><value>8</value></font-size><font-size><from>70</from><to>110</to><value>16</value></font-size><color><from>0</from><to>10</to><value>#777777</value></color><color><from>10</from><to>20</to><value>#ff502c</value></color><color><from>20</from><to>37</to><value>#777777</value></color><color><from>37</from><to>47</to><value>#ff502c</value></color><color><from>47</from><to>60</to><value>#777777</value></color><color><from>60</from><to>70</to><value>#ff502c</value></color><color><from>70</from><to>110</to><value>#777777</value></color><back-color><from>0</from><to>10</to><value>#ffffff</value></back-color><back-color><from>10</from><to>20</to><value>#fff5f5</value></back-color><back-color><from>20</from><to>37</to><value>#ffffff</value></back-color><back-color><from>37</from><to>47</to><value>#fff5f5</value></back-color><back-color><from>47</from><to>60</to><value>#ffffff</value></back-color><back-color><from>60</from><to>70</to><value>#fff5f5</value></back-color><back-color><from>70</from><to>110</to><value>#ffffff</value></back-color></inline-styles><styles/></para><para><coId>2090-1580392241243</coId><text>在page目录下，新建一个_app.js文件，然后写入下面的代码。</text><inline-styles><font-family><from>13</from><to>20</to><value>monospace</value></font-family><font-size><from>0</from><to>13</to><value>16</value></font-size><font-size><from>13</from><to>20</to><value>8</value></font-size><font-size><from>20</from><to>33</to><value>16</value></font-size><color><from>0</from><to>13</to><value>#777777</value></color><color><from>13</from><to>20</to><value>#ff502c</value></color><color><from>20</from><to>33</to><value>#777777</value></color><back-color><from>0</from><to>13</to><value>#ffffff</value></back-color><back-color><from>13</from><to>20</to><value>#fff5f5</value></back-color><back-color><from>20</from><to>33</to><value>#ffffff</value></back-color></inline-styles><styles/></para><code><coId>7363-1580392247396</coId><text>import App from 'next/app'

import 'antd/dist/antd.css'

export default App
</text><inline-styles><font-family><from>0</from><to>75</to><value>monospace</value></font-family><font-size><from>0</from><to>75</to><value>8</value></font-size><color><from>0</from><to>11</to><value>#ffffff</value></color><color><from>11</from><to>15</to><value>#f92672</value></color><color><from>15</from><to>16</to><value>#ffffff</value></color><color><from>16</from><to>26</to><value>#e6db74</value></color><color><from>26</from><to>35</to><value>#ffffff</value></color><color><from>35</from><to>55</to><value>#e6db74</value></color><color><from>55</from><to>57</to><value>#ffffff</value></color><color><from>57</from><to>72</to><value>#e6db74</value></color><color><from>72</from><to>75</to><value>#ffffff</value></color><back-color><from>0</from><to>75</to><value>#283646</value></back-color></inline-styles><styles/><language>javascript</language><theme>default</theme></code><para><coId>2840-1580392241243</coId><text>这样配置一下，就可以打包成功了，然后再运行yarn start来运行服务器，看一下我们的header页面，也是有样式的。说明打包已经成功了。</text><inline-styles><font-family><from>21</from><to>31</to><value>monospace</value></font-family><font-family><from>44</from><to>50</to><value>monospace</value></font-family><font-size><from>0</from><to>21</to><value>16</value></font-size><font-size><from>21</from><to>31</to><value>8</value></font-size><font-size><from>31</from><to>44</to><value>16</value></font-size><font-size><from>44</from><to>50</to><value>8</value></font-size><font-size><from>50</from><to>70</to><value>16</value></font-size><color><from>0</from><to>21</to><value>#777777</value></color><color><from>21</from><to>31</to><value>#ff502c</value></color><color><from>31</from><to>44</to><value>#777777</value></color><color><from>44</from><to>50</to><value>#ff502c</value></color><color><from>50</from><to>70</to><value>#777777</value></color><back-color><from>0</from><to>21</to><value>#ffffff</value></back-color><back-color><from>21</from><to>31</to><value>#fff5f5</value></back-color><back-color><from>31</from><to>44</to><value>#ffffff</value></back-color><back-color><from>44</from><to>50</to><value>#fff5f5</value></back-color><back-color><from>50</from><to>70</to><value>#ffffff</value></back-color></inline-styles><styles/></para></body></note>